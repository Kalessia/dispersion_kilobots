
build/ohc-big.elf:     formato del file elf32-avr


Disassemblamento della sezione .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7008:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    700c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7010:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7014:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7018:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    701c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7020:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7024:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7028:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    702c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7030:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7034:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7038:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    703c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7040:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7044:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7048:	0c 94 48 38 	jmp	0x7090	; 0x7090 <__vector_18>
    704c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7050:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7054:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7058:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    705c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7060:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7064:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_clear_bss>:
    7074:	22 e0       	ldi	r18, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	01 c0       	rjmp	.+2      	; 0x707e <.do_clear_bss_start>

0000707c <.do_clear_bss_loop>:
    707c:	1d 92       	st	X+, r1

0000707e <.do_clear_bss_start>:
    707e:	a0 32       	cpi	r26, 0x20	; 32
    7080:	b2 07       	cpc	r27, r18
    7082:	e1 f7       	brne	.-8      	; 0x707c <.do_clear_bss_loop>
    7084:	0e 94 0a 3a 	call	0x7414	; 0x7414 <main>
    7088:	0c 94 0f 3c 	jmp	0x781e	; 0x781e <_exit>

0000708c <__bad_interrupt>:
    708c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007090 <__vector_18>:
    }

    return 0;
}

ISR(USART_RX_vect) {
    7090:	1f 92       	push	r1
    7092:	0f 92       	push	r0
    7094:	0f b6       	in	r0, 0x3f	; 63
    7096:	0f 92       	push	r0
    7098:	11 24       	eor	r1, r1
    709a:	ef 92       	push	r14
    709c:	ff 92       	push	r15
    709e:	0f 93       	push	r16
    70a0:	1f 93       	push	r17
    70a2:	2f 93       	push	r18
    70a4:	3f 93       	push	r19
    70a6:	4f 93       	push	r20
    70a8:	5f 93       	push	r21
    70aa:	6f 93       	push	r22
    70ac:	7f 93       	push	r23
    70ae:	8f 93       	push	r24
    70b0:	9f 93       	push	r25
    70b2:	af 93       	push	r26
    70b4:	bf 93       	push	r27
    70b6:	cf 93       	push	r28
    70b8:	df 93       	push	r29
    70ba:	ef 93       	push	r30
    70bc:	ff 93       	push	r31
    uint8_t rx = UDR0;
    70be:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    packet_checksum ^= packet_buffer[packet_head];
    70c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <packet_head>
    70c6:	e6 2f       	mov	r30, r22
    70c8:	f0 e0       	ldi	r31, 0x00	; 0
    70ca:	eb 5f       	subi	r30, 0xFB	; 251
    70cc:	fe 4f       	sbci	r31, 0xFE	; 254
    70ce:	20 81       	ld	r18, Z
    70d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <packet_checksum>
    70d4:	89 27       	eor	r24, r25
    packet_buffer[packet_head] = rx;
    70d6:	90 83       	st	Z, r25
    packet_checksum ^= rx;
    70d8:	82 27       	eor	r24, r18
    70da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <packet_checksum>
    packet_head++;
    70de:	6f 5f       	subi	r22, 0xFF	; 255
    if (packet_head >= PACKET_SIZE)
    70e0:	64 38       	cpi	r22, 0x84	; 132
    70e2:	08 f5       	brcc	.+66     	; 0x7126 <__vector_18+0x96>
    uint8_t rx = UDR0;

    packet_checksum ^= packet_buffer[packet_head];
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
    packet_head++;
    70e4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <packet_head>
    70e8:	c6 2f       	mov	r28, r22
    70ea:	d0 e0       	ldi	r29, 0x00	; 0
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;

    if (packet_buffer[packet_head] == PACKET_HEADER) {
    70ec:	fe 01       	movw	r30, r28
    70ee:	eb 5f       	subi	r30, 0xFB	; 251
    70f0:	fe 4f       	sbci	r31, 0xFE	; 254
    70f2:	90 81       	ld	r25, Z
    70f4:	95 35       	cpi	r25, 0x55	; 85
    70f6:	11 f1       	breq	.+68     	; 0x713c <__vector_18+0xac>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
            packet_type = new_packet[1];
        }
    }
}
    70f8:	ff 91       	pop	r31
    70fa:	ef 91       	pop	r30
    70fc:	df 91       	pop	r29
    70fe:	cf 91       	pop	r28
    7100:	bf 91       	pop	r27
    7102:	af 91       	pop	r26
    7104:	9f 91       	pop	r25
    7106:	8f 91       	pop	r24
    7108:	7f 91       	pop	r23
    710a:	6f 91       	pop	r22
    710c:	5f 91       	pop	r21
    710e:	4f 91       	pop	r20
    7110:	3f 91       	pop	r19
    7112:	2f 91       	pop	r18
    7114:	1f 91       	pop	r17
    7116:	0f 91       	pop	r16
    7118:	ff 90       	pop	r15
    711a:	ef 90       	pop	r14
    711c:	0f 90       	pop	r0
    711e:	0f be       	out	0x3f, r0	; 63
    7120:	0f 90       	pop	r0
    7122:	1f 90       	pop	r1
    7124:	18 95       	reti
    packet_checksum ^= packet_buffer[packet_head];
    packet_buffer[packet_head] = rx;
    packet_checksum ^= rx;
    packet_head++;
    if (packet_head >= PACKET_SIZE)
        packet_head = 0;
    7126:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <packet_head>
    712a:	c0 e0       	ldi	r28, 0x00	; 0
    712c:	d0 e0       	ldi	r29, 0x00	; 0
    712e:	60 e0       	ldi	r22, 0x00	; 0

    if (packet_buffer[packet_head] == PACKET_HEADER) {
    7130:	fe 01       	movw	r30, r28
    7132:	eb 5f       	subi	r30, 0xFB	; 251
    7134:	fe 4f       	sbci	r31, 0xFE	; 254
    7136:	90 81       	ld	r25, Z
    7138:	95 35       	cpi	r25, 0x55	; 85
    713a:	f1 f6       	brne	.-68     	; 0x70f8 <__vector_18+0x68>
        if (packet_checksum == 0) {
    713c:	81 11       	cpse	r24, r1
    713e:	dc cf       	rjmp	.-72     	; 0x70f8 <__vector_18+0x68>
            uint16_t i;
            uint16_t num = PACKET_SIZE-packet_head;
    7140:	84 e8       	ldi	r24, 0x84	; 132
    7142:	e8 2e       	mov	r14, r24
    7144:	f1 2c       	mov	r15, r1
    7146:	87 01       	movw	r16, r14
    7148:	0c 1b       	sub	r16, r28
    714a:	1d 0b       	sbc	r17, r29
    714c:	70 e0       	ldi	r23, 0x00	; 0
    714e:	6b 5f       	subi	r22, 0xFB	; 251
    7150:	7e 4f       	sbci	r23, 0xFE	; 254
    7152:	a8 01       	movw	r20, r16
    7154:	88 e9       	ldi	r24, 0x98	; 152
    7156:	91 e0       	ldi	r25, 0x01	; 1
    7158:	0e 94 06 3c 	call	0x780c	; 0x780c <memcpy>
            for (i = 0; i < num; i++)
                new_packet[i] = packet_buffer[i+packet_head];
            for (i = num; i < PACKET_SIZE; i++)
    715c:	04 38       	cpi	r16, 0x84	; 132
    715e:	11 05       	cpc	r17, r1
    7160:	99 f0       	breq	.+38     	; 0x7188 <__vector_18+0xf8>
    7162:	c8 01       	movw	r24, r16
    7164:	88 56       	subi	r24, 0x68	; 104
    7166:	9e 4f       	sbci	r25, 0xFE	; 254
    7168:	98 01       	movw	r18, r16
    716a:	2f 5f       	subi	r18, 0xFF	; 255
    716c:	3f 4f       	sbci	r19, 0xFF	; 255
    716e:	25 38       	cpi	r18, 0x85	; 133
    7170:	31 05       	cpc	r19, r1
    7172:	90 f4       	brcc	.+36     	; 0x7198 <__vector_18+0x108>
    7174:	a7 01       	movw	r20, r14
    7176:	40 1b       	sub	r20, r16
    7178:	51 0b       	sbc	r21, r17
    717a:	c0 0f       	add	r28, r16
    717c:	d1 1f       	adc	r29, r17
    717e:	be 01       	movw	r22, r28
    7180:	6f 57       	subi	r22, 0x7F	; 127
    7182:	7f 4f       	sbci	r23, 0xFF	; 255
    7184:	0e 94 06 3c 	call	0x780c	; 0x780c <memcpy>
                new_packet[i] = packet_buffer[i-num];
            has_new_packet = 1;
    7188:	81 e0       	ldi	r24, 0x01	; 1
    718a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <has_new_packet>
            packet_type = new_packet[1];
    718e:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <new_packet+0x1>
    7192:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <packet_type>
    7196:	b0 cf       	rjmp	.-160    	; 0x70f8 <__vector_18+0x68>
    7198:	41 e0       	ldi	r20, 0x01	; 1
    719a:	50 e0       	ldi	r21, 0x00	; 0
    719c:	ee cf       	rjmp	.-36     	; 0x717a <__vector_18+0xea>

0000719e <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    719e:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    71a0:	80 81       	ld	r24, Z
    71a2:	2f ef       	ldi	r18, 0xFF	; 255
    71a4:	3f ef       	ldi	r19, 0xFF	; 255
    71a6:	28 27       	eor	r18, r24
    71a8:	02 2e       	mov	r0, r18
    71aa:	22 95       	swap	r18
    71ac:	20 7f       	andi	r18, 0xF0	; 240
    71ae:	20 25       	eor	r18, r0
    71b0:	03 2e       	mov	r0, r19
    71b2:	32 2f       	mov	r19, r18
    71b4:	22 95       	swap	r18
    71b6:	2f 70       	andi	r18, 0x0F	; 15
    71b8:	02 26       	eor	r0, r18
    71ba:	26 95       	lsr	r18
    71bc:	32 27       	eor	r19, r18
    71be:	23 27       	eor	r18, r19
    71c0:	22 0f       	add	r18, r18
    71c2:	22 0f       	add	r18, r18
    71c4:	22 0f       	add	r18, r18
    71c6:	20 25       	eor	r18, r0
    71c8:	81 81       	ldd	r24, Z+1	; 0x01
    71ca:	28 27       	eor	r18, r24
    71cc:	02 2e       	mov	r0, r18
    71ce:	22 95       	swap	r18
    71d0:	20 7f       	andi	r18, 0xF0	; 240
    71d2:	20 25       	eor	r18, r0
    71d4:	03 2e       	mov	r0, r19
    71d6:	32 2f       	mov	r19, r18
    71d8:	22 95       	swap	r18
    71da:	2f 70       	andi	r18, 0x0F	; 15
    71dc:	02 26       	eor	r0, r18
    71de:	26 95       	lsr	r18
    71e0:	32 27       	eor	r19, r18
    71e2:	23 27       	eor	r18, r19
    71e4:	22 0f       	add	r18, r18
    71e6:	22 0f       	add	r18, r18
    71e8:	22 0f       	add	r18, r18
    71ea:	20 25       	eor	r18, r0
    71ec:	82 81       	ldd	r24, Z+2	; 0x02
    71ee:	28 27       	eor	r18, r24
    71f0:	02 2e       	mov	r0, r18
    71f2:	22 95       	swap	r18
    71f4:	20 7f       	andi	r18, 0xF0	; 240
    71f6:	20 25       	eor	r18, r0
    71f8:	03 2e       	mov	r0, r19
    71fa:	32 2f       	mov	r19, r18
    71fc:	22 95       	swap	r18
    71fe:	2f 70       	andi	r18, 0x0F	; 15
    7200:	02 26       	eor	r0, r18
    7202:	26 95       	lsr	r18
    7204:	32 27       	eor	r19, r18
    7206:	23 27       	eor	r18, r19
    7208:	22 0f       	add	r18, r18
    720a:	22 0f       	add	r18, r18
    720c:	22 0f       	add	r18, r18
    720e:	20 25       	eor	r18, r0
    7210:	83 81       	ldd	r24, Z+3	; 0x03
    7212:	28 27       	eor	r18, r24
    7214:	02 2e       	mov	r0, r18
    7216:	22 95       	swap	r18
    7218:	20 7f       	andi	r18, 0xF0	; 240
    721a:	20 25       	eor	r18, r0
    721c:	03 2e       	mov	r0, r19
    721e:	32 2f       	mov	r19, r18
    7220:	22 95       	swap	r18
    7222:	2f 70       	andi	r18, 0x0F	; 15
    7224:	02 26       	eor	r0, r18
    7226:	26 95       	lsr	r18
    7228:	32 27       	eor	r19, r18
    722a:	23 27       	eor	r18, r19
    722c:	22 0f       	add	r18, r18
    722e:	22 0f       	add	r18, r18
    7230:	22 0f       	add	r18, r18
    7232:	20 25       	eor	r18, r0
    7234:	84 81       	ldd	r24, Z+4	; 0x04
    7236:	28 27       	eor	r18, r24
    7238:	02 2e       	mov	r0, r18
    723a:	22 95       	swap	r18
    723c:	20 7f       	andi	r18, 0xF0	; 240
    723e:	20 25       	eor	r18, r0
    7240:	03 2e       	mov	r0, r19
    7242:	32 2f       	mov	r19, r18
    7244:	22 95       	swap	r18
    7246:	2f 70       	andi	r18, 0x0F	; 15
    7248:	02 26       	eor	r0, r18
    724a:	26 95       	lsr	r18
    724c:	32 27       	eor	r19, r18
    724e:	23 27       	eor	r18, r19
    7250:	22 0f       	add	r18, r18
    7252:	22 0f       	add	r18, r18
    7254:	22 0f       	add	r18, r18
    7256:	20 25       	eor	r18, r0
    7258:	85 81       	ldd	r24, Z+5	; 0x05
    725a:	28 27       	eor	r18, r24
    725c:	02 2e       	mov	r0, r18
    725e:	22 95       	swap	r18
    7260:	20 7f       	andi	r18, 0xF0	; 240
    7262:	20 25       	eor	r18, r0
    7264:	03 2e       	mov	r0, r19
    7266:	32 2f       	mov	r19, r18
    7268:	22 95       	swap	r18
    726a:	2f 70       	andi	r18, 0x0F	; 15
    726c:	02 26       	eor	r0, r18
    726e:	26 95       	lsr	r18
    7270:	32 27       	eor	r19, r18
    7272:	23 27       	eor	r18, r19
    7274:	22 0f       	add	r18, r18
    7276:	22 0f       	add	r18, r18
    7278:	22 0f       	add	r18, r18
    727a:	20 25       	eor	r18, r0
    727c:	86 81       	ldd	r24, Z+6	; 0x06
    727e:	28 27       	eor	r18, r24
    7280:	02 2e       	mov	r0, r18
    7282:	22 95       	swap	r18
    7284:	20 7f       	andi	r18, 0xF0	; 240
    7286:	20 25       	eor	r18, r0
    7288:	03 2e       	mov	r0, r19
    728a:	32 2f       	mov	r19, r18
    728c:	22 95       	swap	r18
    728e:	2f 70       	andi	r18, 0x0F	; 15
    7290:	02 26       	eor	r0, r18
    7292:	26 95       	lsr	r18
    7294:	32 27       	eor	r19, r18
    7296:	23 27       	eor	r18, r19
    7298:	22 0f       	add	r18, r18
    729a:	22 0f       	add	r18, r18
    729c:	22 0f       	add	r18, r18
    729e:	20 25       	eor	r18, r0
    72a0:	87 81       	ldd	r24, Z+7	; 0x07
    72a2:	28 27       	eor	r18, r24
    72a4:	02 2e       	mov	r0, r18
    72a6:	22 95       	swap	r18
    72a8:	20 7f       	andi	r18, 0xF0	; 240
    72aa:	20 25       	eor	r18, r0
    72ac:	03 2e       	mov	r0, r19
    72ae:	32 2f       	mov	r19, r18
    72b0:	22 95       	swap	r18
    72b2:	2f 70       	andi	r18, 0x0F	; 15
    72b4:	02 26       	eor	r0, r18
    72b6:	26 95       	lsr	r18
    72b8:	32 27       	eor	r19, r18
    72ba:	23 27       	eor	r18, r19
    72bc:	22 0f       	add	r18, r18
    72be:	22 0f       	add	r18, r18
    72c0:	22 0f       	add	r18, r18
    72c2:	20 25       	eor	r18, r0
    72c4:	80 85       	ldd	r24, Z+8	; 0x08
    72c6:	28 27       	eor	r18, r24
    72c8:	02 2e       	mov	r0, r18
    72ca:	22 95       	swap	r18
    72cc:	20 7f       	andi	r18, 0xF0	; 240
    72ce:	20 25       	eor	r18, r0
    72d0:	03 2e       	mov	r0, r19
    72d2:	32 2f       	mov	r19, r18
    72d4:	22 95       	swap	r18
    72d6:	2f 70       	andi	r18, 0x0F	; 15
    72d8:	02 26       	eor	r0, r18
    72da:	26 95       	lsr	r18
    72dc:	32 27       	eor	r19, r18
    72de:	23 27       	eor	r18, r19
    72e0:	22 0f       	add	r18, r18
    72e2:	22 0f       	add	r18, r18
    72e4:	22 0f       	add	r18, r18
    72e6:	20 25       	eor	r18, r0
    72e8:	41 85       	ldd	r20, Z+9	; 0x09
    72ea:	c9 01       	movw	r24, r18
    72ec:	84 27       	eor	r24, r20
    72ee:	08 2e       	mov	r0, r24
    72f0:	82 95       	swap	r24
    72f2:	80 7f       	andi	r24, 0xF0	; 240
    72f4:	80 25       	eor	r24, r0
    72f6:	09 2e       	mov	r0, r25
    72f8:	98 2f       	mov	r25, r24
    72fa:	82 95       	swap	r24
    72fc:	8f 70       	andi	r24, 0x0F	; 15
    72fe:	08 26       	eor	r0, r24
    7300:	86 95       	lsr	r24
    7302:	98 27       	eor	r25, r24
    7304:	89 27       	eor	r24, r25
    7306:	88 0f       	add	r24, r24
    7308:	88 0f       	add	r24, r24
    730a:	88 0f       	add	r24, r24
    730c:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    730e:	08 95       	ret

00007310 <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    7310:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    7312:	aa b1       	in	r26, 0x0a	; 10

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    7314:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tx_mask>
    or tmpreg1, ddrreg
    7318:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    731a:	2a b9       	out	0x0a, r18	; 10

    ldi tmpreg1, 0x01
    731c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    731e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    7322:	20 30       	cpi	r18, 0x00	; 0
    7324:	29 f0       	breq	.+10     	; 0x7330 <message_send+0x20>
    7326:	00 00       	nop
    7328:	2b b1       	in	r18, 0x0b	; 11
    732a:	23 2b       	or	r18, r19
    732c:	2b b9       	out	0x0b, r18	; 11
    732e:	04 c0       	rjmp	.+8      	; 0x7338 <message_send+0x28>
    7330:	00 00       	nop
    7332:	00 00       	nop
    7334:	00 00       	nop
    7336:	00 c0       	rjmp	.+0      	; 0x7338 <message_send+0x28>
    7338:	00 00       	nop
    733a:	00 00       	nop
    733c:	00 00       	nop
    733e:	30 95       	com	r19
    7340:	2b b1       	in	r18, 0x0b	; 11
    7342:	23 23       	and	r18, r19
    7344:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    7346:	2e ea       	ldi	r18, 0xAE	; 174
    7348:	2a 95       	dec	r18
    734a:	f1 f7       	brne	.-4      	; 0x7348 <message_send+0x38>

    ldi tmpreg1, rx_bitcycles*7/8
    734c:	2b ee       	ldi	r18, 0xEB	; 235

0000734e <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    734e:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    7350:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    7352:	0a c0       	rjmp	.+20     	; 0x7368 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    7354:	aa b9       	out	0x0a, r26	; 10
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    7356:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
    735a:	30 95       	com	r19
    in tmpreg1, IR_PORT
    735c:	2b b1       	in	r18, 0x0b	; 11
    and tmpreg1, tmpreg2
    735e:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    7360:	2b b9       	out	0x0b, r18	; 11
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    7362:	0f be       	out	0x3f, r0	; 63
    return 0
    7364:	80 e0       	ldi	r24, 0x00	; 0
    7366:	08 95       	ret

00007368 <nocollision>:
nocollision:
    nop
    7368:	00 00       	nop
    dec tmpreg1
    736a:	2a 95       	dec	r18
    brne checkcollision
    736c:	81 f7       	brne	.-32     	; 0x734e <checkcollision>

    ldi tmpreg1, 0x01
    736e:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    7370:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    7374:	20 30       	cpi	r18, 0x00	; 0
    7376:	29 f0       	breq	.+10     	; 0x7382 <nocollision+0x1a>
    7378:	00 00       	nop
    737a:	2b b1       	in	r18, 0x0b	; 11
    737c:	23 2b       	or	r18, r19
    737e:	2b b9       	out	0x0b, r18	; 11
    7380:	04 c0       	rjmp	.+8      	; 0x738a <nocollision+0x22>
    7382:	00 00       	nop
    7384:	00 00       	nop
    7386:	00 00       	nop
    7388:	00 c0       	rjmp	.+0      	; 0x738a <nocollision+0x22>
    738a:	00 00       	nop
    738c:	00 00       	nop
    738e:	00 00       	nop
    7390:	30 95       	com	r19
    7392:	2b b1       	in	r18, 0x0b	; 11
    7394:	23 23       	and	r18, r19
    7396:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (rx_bitcycles-irsend_cycles)
    7398:	00 00       	nop
    739a:	24 e5       	ldi	r18, 0x54	; 84
    739c:	2a 95       	dec	r18
    739e:	f1 f7       	brne	.-4      	; 0x739c <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    73a0:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    73a2:	8c e0       	ldi	r24, 0x0C	; 12

000073a4 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    73a4:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    73a6:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    73a8:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    73aa:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    73ac:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    73ae:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    73b0:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    73b2:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    73b4:	50 e0       	ldi	r21, 0x00	; 0

000073b6 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    73b6:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    73b8:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    73ba:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    73bc:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    73be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    73c2:	20 30       	cpi	r18, 0x00	; 0
    73c4:	29 f0       	breq	.+10     	; 0x73d0 <sendbit+0x1a>
    73c6:	00 00       	nop
    73c8:	2b b1       	in	r18, 0x0b	; 11
    73ca:	23 2b       	or	r18, r19
    73cc:	2b b9       	out	0x0b, r18	; 11
    73ce:	04 c0       	rjmp	.+8      	; 0x73d8 <sendbit+0x22>
    73d0:	00 00       	nop
    73d2:	00 00       	nop
    73d4:	00 00       	nop
    73d6:	00 c0       	rjmp	.+0      	; 0x73d8 <sendbit+0x22>
    73d8:	00 00       	nop
    73da:	00 00       	nop
    73dc:	00 00       	nop
    73de:	30 95       	com	r19
    73e0:	2b b1       	in	r18, 0x0b	; 11
    73e2:	23 23       	and	r18, r19
    73e4:	2b b9       	out	0x0b, r18	; 11
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    73e6:	00 00       	nop
    73e8:	21 e5       	ldi	r18, 0x51	; 81
    73ea:	2a 95       	dec	r18
    73ec:	f1 f7       	brne	.-4      	; 0x73ea <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    73ee:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    73f0:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    73f2:	9a 95       	dec	r25
    brne sendbit
    73f4:	01 f7       	brne	.-64     	; 0x73b6 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    73f6:	8a 95       	dec	r24
    brne sendbyte
    73f8:	a9 f6       	brne	.-86     	; 0x73a4 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    73fa:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    73fc:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    73fe:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    7400:	aa b9       	out	0x0a, r26	; 10

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    7402:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <tx_mask>
    com tmpreg2
    7406:	30 95       	com	r19
    in tmpreg1, IR_PORT
    7408:	2b b1       	in	r18, 0x0b	; 11
    and tmpreg1, tmpreg2
    740a:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    740c:	2b b9       	out	0x0b, r18	; 11

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    740e:	0f be       	out	0x3f, r0	; 63
    return 1
    7410:	81 e0       	ldi	r24, 0x01	; 1
    7412:	08 95       	ret

00007414 <main>:
#define led_ddr DDRB
#define led_mask (1<<1)
#endif

int main() {
    cli();
    7414:	f8 94       	cli
    // Set port outputs
    ir_ddr |= ir_mask;
    7416:	54 9a       	sbi	0x0a, 4	; 10
    led_ddr |= led_mask;
    7418:	38 9a       	sbi	0x07, 0	; 7
    // Turn off all leds
    led_port &= ~led_mask;
    741a:	40 98       	cbi	0x08, 0	; 8
    ir_port &= ~ir_mask;
    741c:	5c 98       	cbi	0x0b, 4	; 11
    // turn off analog comparator (to avoid detecting collisions)
    ACSR |= (1<<ACD);
    741e:	80 b7       	in	r24, 0x30	; 48
    7420:	80 68       	ori	r24, 0x80	; 128
    7422:	80 bf       	out	0x30, r24	; 48

#ifndef ARDUINO
    //move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    7424:	81 e0       	ldi	r24, 0x01	; 1
    7426:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    7428:	82 e0       	ldi	r24, 0x02	; 2
    742a:	85 bf       	out	0x35, r24	; 53
    CLKPR = 1;
#endif

#define BAUD 38400
#include <util/setbaud.h>
    UBRR0 = UBRR_VALUE;
    742c:	8c e0       	ldi	r24, 0x0C	; 12
    742e:	90 e0       	ldi	r25, 0x00	; 0
    7430:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    7434:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#if USE_2X
    UCSR0A |= (1<<U2X0);
#else
    UCSR0A &= ~(1<<U2X0);
    7438:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    743c:	8d 7f       	andi	r24, 0xFD	; 253
    743e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
#endif
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);              // No parity, 8 bits comm, 1 stop bit
    7442:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    7446:	86 60       	ori	r24, 0x06	; 6
    7448:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);    // Enable reception, transmission, and reception interrupts
    744c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    7450:	88 69       	ori	r24, 0x98	; 152
    7452:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    sei();
    7456:	78 94       	sei

    tx_mask = ir_mask;
    7458:	80 e1       	ldi	r24, 0x10	; 16
    745a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tx_mask>
    bootmsg = (bootmsg_t*)msg.data;
    745e:	3b e8       	ldi	r19, 0x8B	; 139
    7460:	e3 2e       	mov	r14, r19
    7462:	31 e0       	ldi	r19, 0x01	; 1
    7464:	f3 2e       	mov	r15, r19
    7466:	f0 92 8a 01 	sts	0x018A, r15	; 0x80018a <bootmsg+0x1>
    746a:	e0 92 89 01 	sts	0x0189, r14	; 0x800189 <bootmsg>
    gpsmsg = (gpsmsg_t*)msg.data;
    746e:	f0 92 1f 02 	sts	0x021F, r15	; 0x80021f <gpsmsg+0x1>
    7472:	e0 92 1e 02 	sts	0x021E, r14	; 0x80021e <gpsmsg>
    rawmsg = (uint8_t*)&msg;
    7476:	f0 92 1d 02 	sts	0x021D, r15	; 0x80021d <rawmsg+0x1>
    747a:	e0 92 1c 02 	sts	0x021C, r14	; 0x80021c <rawmsg>
    747e:	85 e0       	ldi	r24, 0x05	; 5

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
        led_port |= led_mask;
    7480:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    7482:	2f ef       	ldi	r18, 0xFF	; 255
    7484:	31 ee       	ldi	r19, 0xE1	; 225
    7486:	94 e0       	ldi	r25, 0x04	; 4
    7488:	21 50       	subi	r18, 0x01	; 1
    748a:	30 40       	sbci	r19, 0x00	; 0
    748c:	90 40       	sbci	r25, 0x00	; 0
    748e:	e1 f7       	brne	.-8      	; 0x7488 <main+0x74>
    7490:	00 c0       	rjmp	.+0      	; 0x7492 <main+0x7e>
    7492:	00 00       	nop
        _delay_ms(200);
        led_port &= ~led_mask;
    7494:	40 98       	cbi	0x08, 0	; 8
    7496:	ef ef       	ldi	r30, 0xFF	; 255
    7498:	f1 ee       	ldi	r31, 0xE1	; 225
    749a:	24 e0       	ldi	r18, 0x04	; 4
    749c:	e1 50       	subi	r30, 0x01	; 1
    749e:	f0 40       	sbci	r31, 0x00	; 0
    74a0:	20 40       	sbci	r18, 0x00	; 0
    74a2:	e1 f7       	brne	.-8      	; 0x749c <main+0x88>
    74a4:	00 c0       	rjmp	.+0      	; 0x74a6 <main+0x92>
    74a6:	00 00       	nop
    74a8:	81 50       	subi	r24, 0x01	; 1
    gpsmsg = (gpsmsg_t*)msg.data;
    rawmsg = (uint8_t*)&msg;

    // Use LEDs to flash power on indicator signal.
    uint8_t i;
    for (i=0; i<5; i++) {
    74aa:	51 f7       	brne	.-44     	; 0x7480 <main+0x6c>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    74ac:	9a e0       	ldi	r25, 0x0A	; 10
    74ae:	b9 2e       	mov	r11, r25
                msg.type = GPS;
    74b0:	cc 24       	eor	r12, r12
    74b2:	c3 94       	inc	r12
    74b4:	0a e1       	ldi	r16, 0x1A	; 26
    74b6:	12 e0       	ldi	r17, 0x02	; 2
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
    74b8:	21 e8       	ldi	r18, 0x81	; 129
    74ba:	d2 2e       	mov	r13, r18
        led_port &= ~led_mask;
        _delay_ms(200);
    }

    while(1) {
        if (has_new_packet) {
    74bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    74c0:	88 23       	and	r24, r24
    74c2:	e1 f3       	breq	.-8      	; 0x74bc <main+0xa8>
            has_new_packet = 0;
    74c4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <has_new_packet>
            switch(packet_type) {
    74c8:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <packet_type>
    74cc:	83 30       	cpi	r24, 0x03	; 3
    74ce:	09 f4       	brne	.+2      	; 0x74d2 <main+0xbe>
    74d0:	a1 c0       	rjmp	.+322    	; 0x7614 <main+0x200>
    74d2:	08 f4       	brcc	.+2      	; 0x74d6 <main+0xc2>
    74d4:	4c c0       	rjmp	.+152    	; 0x756e <main+0x15a>
    74d6:	85 30       	cpi	r24, 0x05	; 5
    74d8:	09 f4       	brne	.+2      	; 0x74dc <main+0xc8>
    74da:	56 c1       	rjmp	.+684    	; 0x7788 <main+0x374>
    74dc:	08 f4       	brcc	.+2      	; 0x74e0 <main+0xcc>
    74de:	f0 c0       	rjmp	.+480    	; 0x76c0 <main+0x2ac>
    74e0:	86 30       	cpi	r24, 0x06	; 6
    74e2:	61 f7       	brne	.-40     	; 0x74bc <main+0xa8>
                    _delay_ms(3);
                }
                break;
            case PACKET_FORWARDMSGSINGLE:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    74e4:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    74e8:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    74ec:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
    74f0:	80 83       	st	Z, r24
    74f2:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    74f6:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    74fa:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>
    74fe:	81 83       	std	Z+1, r24	; 0x01
    7500:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7504:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    7508:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>
    750c:	82 83       	std	Z+2, r24	; 0x02
    750e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>
    7512:	83 83       	std	Z+3, r24	; 0x03
    7514:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>
    7518:	84 83       	std	Z+4, r24	; 0x04
    751a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>
    751e:	85 83       	std	Z+5, r24	; 0x05
    7520:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>
    7524:	86 83       	std	Z+6, r24	; 0x06
    7526:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>
    752a:	87 83       	std	Z+7, r24	; 0x07
    752c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>
    7530:	80 87       	std	Z+8, r24	; 0x08
    7532:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>
    7536:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
    7538:	8b e8       	ldi	r24, 0x8B	; 139
    753a:	91 e0       	ldi	r25, 0x01	; 1
    753c:	0e 94 cf 38 	call	0x719e	; 0x719e <message_crc>
    7540:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    7544:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                message_send(&msg);
    7548:	8b e8       	ldi	r24, 0x8B	; 139
    754a:	91 e0       	ldi	r25, 0x01	; 1
    754c:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
                led_port |= led_mask;
    7550:	40 9a       	sbi	0x08, 0	; 8
    7552:	8f e6       	ldi	r24, 0x6F	; 111
    7554:	97 e1       	ldi	r25, 0x17	; 23
    7556:	01 97       	sbiw	r24, 0x01	; 1
    7558:	f1 f7       	brne	.-4      	; 0x7556 <main+0x142>
    755a:	00 c0       	rjmp	.+0      	; 0x755c <main+0x148>
    755c:	00 00       	nop
                _delay_ms(3);
                led_port &= ~led_mask;
    755e:	40 98       	cbi	0x08, 0	; 8
    7560:	ef e6       	ldi	r30, 0x6F	; 111
    7562:	f7 e1       	ldi	r31, 0x17	; 23
    7564:	31 97       	sbiw	r30, 0x01	; 1
    7566:	f1 f7       	brne	.-4      	; 0x7564 <main+0x150>
    7568:	00 c0       	rjmp	.+0      	; 0x756a <main+0x156>
    756a:	00 00       	nop
    756c:	a7 cf       	rjmp	.-178    	; 0x74bc <main+0xa8>
    }

    while(1) {
        if (has_new_packet) {
            has_new_packet = 0;
            switch(packet_type) {
    756e:	81 30       	cpi	r24, 0x01	; 1
    7570:	09 f4       	brne	.+2      	; 0x7574 <main+0x160>
    7572:	9b c0       	rjmp	.+310    	; 0x76aa <main+0x296>
    7574:	82 30       	cpi	r24, 0x02	; 2
    7576:	09 f0       	breq	.+2      	; 0x757a <main+0x166>
    7578:	a1 cf       	rjmp	.-190    	; 0x74bc <main+0xa8>
                    led_port &= ~led_mask;
                }
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
    757a:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    757e:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    7582:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
    7586:	80 83       	st	Z, r24
    7588:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    758c:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    7590:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>
    7594:	81 83       	std	Z+1, r24	; 0x01
    7596:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    759a:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    759e:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>
    75a2:	82 83       	std	Z+2, r24	; 0x02
    75a4:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>
    75a8:	83 83       	std	Z+3, r24	; 0x03
    75aa:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>
    75ae:	84 83       	std	Z+4, r24	; 0x04
    75b0:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>
    75b4:	85 83       	std	Z+5, r24	; 0x05
    75b6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>
    75ba:	86 83       	std	Z+6, r24	; 0x06
    75bc:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>
    75c0:	87 83       	std	Z+7, r24	; 0x07
    75c2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>
    75c6:	80 87       	std	Z+8, r24	; 0x08
    75c8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>
    75cc:	81 87       	std	Z+9, r24	; 0x09
                msg.crc = message_crc(&msg);
    75ce:	8b e8       	ldi	r24, 0x8B	; 139
    75d0:	91 e0       	ldi	r25, 0x01	; 1
    75d2:	0e 94 cf 38 	call	0x719e	; 0x719e <message_crc>
    75d6:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    75da:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                while(!has_new_packet) {
    75de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    75e2:	81 11       	cpse	r24, r1
    75e4:	6b cf       	rjmp	.-298    	; 0x74bc <main+0xa8>
                    message_send(&msg);
    75e6:	8b e8       	ldi	r24, 0x8B	; 139
    75e8:	91 e0       	ldi	r25, 0x01	; 1
    75ea:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
                    led_port |= led_mask;
    75ee:	40 9a       	sbi	0x08, 0	; 8
    75f0:	8f e6       	ldi	r24, 0x6F	; 111
    75f2:	97 e1       	ldi	r25, 0x17	; 23
    75f4:	01 97       	sbiw	r24, 0x01	; 1
    75f6:	f1 f7       	brne	.-4      	; 0x75f4 <main+0x1e0>
    75f8:	00 c0       	rjmp	.+0      	; 0x75fa <main+0x1e6>
    75fa:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
    75fc:	40 98       	cbi	0x08, 0	; 8
    75fe:	ef e6       	ldi	r30, 0x6F	; 111
    7600:	f7 e1       	ldi	r31, 0x17	; 23
    7602:	31 97       	sbiw	r30, 0x01	; 1
    7604:	f1 f7       	brne	.-4      	; 0x7602 <main+0x1ee>
    7606:	00 c0       	rjmp	.+0      	; 0x7608 <main+0x1f4>
    7608:	00 00       	nop
                break;
            case PACKET_FORWARDMSG:
                for (i = 0; i<sizeof(message_t)-sizeof(msg.crc); i++)
                    rawmsg[i] = new_packet[i+2];
                msg.crc = message_crc(&msg);
                while(!has_new_packet) {
    760a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    760e:	88 23       	and	r24, r24
    7610:	51 f3       	breq	.-44     	; 0x75e6 <main+0x1d2>
    7612:	54 cf       	rjmp	.-344    	; 0x74bc <main+0xa8>
                led_port &= ~led_mask;
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
    7614:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7618:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    761c:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
    7620:	80 83       	st	Z, r24
    7622:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7626:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    762a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <new_packet+0x3>
    762e:	81 83       	std	Z+1, r24	; 0x01
    7630:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <rawmsg>
    7634:	f0 91 1d 02 	lds	r31, 0x021D	; 0x80021d <rawmsg+0x1>
    7638:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <new_packet+0x4>
    763c:	82 83       	std	Z+2, r24	; 0x02
    763e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <new_packet+0x5>
    7642:	83 83       	std	Z+3, r24	; 0x03
    7644:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <new_packet+0x6>
    7648:	84 83       	std	Z+4, r24	; 0x04
    764a:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <new_packet+0x7>
    764e:	85 83       	std	Z+5, r24	; 0x05
    7650:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <new_packet+0x8>
    7654:	86 83       	std	Z+6, r24	; 0x06
    7656:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <new_packet+0x9>
    765a:	87 83       	std	Z+7, r24	; 0x07
    765c:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <new_packet+0xa>
    7660:	80 87       	std	Z+8, r24	; 0x08
    7662:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <new_packet+0xb>
    7666:	81 87       	std	Z+9, r24	; 0x09
    7668:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <new_packet+0xc>
    766c:	82 87       	std	Z+10, r24	; 0x0a
    766e:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <new_packet+0xd>
    7672:	83 87       	std	Z+11, r24	; 0x0b
                while(!has_new_packet) {
    7674:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    7678:	81 11       	cpse	r24, r1
    767a:	20 cf       	rjmp	.-448    	; 0x74bc <main+0xa8>
                    message_send(&msg);
    767c:	8b e8       	ldi	r24, 0x8B	; 139
    767e:	91 e0       	ldi	r25, 0x01	; 1
    7680:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
                    led_port |= led_mask;
    7684:	40 9a       	sbi	0x08, 0	; 8
    7686:	8f e6       	ldi	r24, 0x6F	; 111
    7688:	97 e1       	ldi	r25, 0x17	; 23
    768a:	01 97       	sbiw	r24, 0x01	; 1
    768c:	f1 f7       	brne	.-4      	; 0x768a <main+0x276>
    768e:	00 c0       	rjmp	.+0      	; 0x7690 <main+0x27c>
    7690:	00 00       	nop
                    _delay_ms(3);
                    led_port &= ~led_mask;
    7692:	40 98       	cbi	0x08, 0	; 8
    7694:	ef e6       	ldi	r30, 0x6F	; 111
    7696:	f7 e1       	ldi	r31, 0x17	; 23
    7698:	31 97       	sbiw	r30, 0x01	; 1
    769a:	f1 f7       	brne	.-4      	; 0x7698 <main+0x284>
    769c:	00 c0       	rjmp	.+0      	; 0x769e <main+0x28a>
    769e:	00 00       	nop
                _delay_ms(3);
                break;
            case PACKET_FORWARDRAWMSG:
                for (i = 0; i<sizeof(message_t); i++)
                    rawmsg[i] = new_packet[i+2];
                while(!has_new_packet) {
    76a0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    76a4:	88 23       	and	r24, r24
    76a6:	51 f3       	breq	.-44     	; 0x767c <main+0x268>
    76a8:	09 cf       	rjmp	.-494    	; 0x74bc <main+0xa8>
            has_new_packet = 0;
            switch(packet_type) {
            case PACKET_STOP:
                break;
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
    76aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
    76ae:	91 e0       	ldi	r25, 0x01	; 1
    76b0:	81 11       	cpse	r24, r1
    76b2:	90 e0       	ldi	r25, 0x00	; 0
    76b4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
                if (leds_toggle) {
    76b8:	81 11       	cpse	r24, r1
    76ba:	a6 c0       	rjmp	.+332    	; 0x7808 <main+0x3f4>
                    led_port |= led_mask;
    76bc:	40 9a       	sbi	0x08, 0	; 8
    76be:	fe ce       	rjmp	.-516    	; 0x74bc <main+0xa8>
                    led_port &= ~led_mask;
                    _delay_ms(3);
                }
                break;
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
    76c0:	d0 92 94 01 	sts	0x0194, r13	; 0x800194 <msg+0x9>
                bootmsg->page_address = new_packet[2];
    76c4:	e0 91 89 01 	lds	r30, 0x0189	; 0x800189 <bootmsg>
    76c8:	f0 91 8a 01 	lds	r31, 0x018A	; 0x80018a <bootmsg+0x1>
    76cc:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <new_packet+0x2>
    76d0:	80 83       	st	Z, r24
                bootmsg->unused = 0;
    76d2:	10 86       	std	Z+8, r1	; 0x08
                cli();
    76d4:	f8 94       	cli
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    76d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    76da:	81 11       	cpse	r24, r1
    76dc:	45 c0       	rjmp	.+138    	; 0x7768 <main+0x354>
                    bootmsg->page_offset = i/2;
    76de:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
    76e2:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>
    76e6:	11 96       	adiw	r26, 0x01	; 1
    76e8:	1c 92       	st	X, r1
    76ea:	11 97       	sbiw	r26, 0x01	; 1
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
    76ec:	12 96       	adiw	r26, 0x02	; 2
    76ee:	86 e0       	ldi	r24, 0x06	; 6
    76f0:	eb e9       	ldi	r30, 0x9B	; 155
    76f2:	f1 e0       	ldi	r31, 0x01	; 1
    76f4:	01 90       	ld	r0, Z+
    76f6:	0d 92       	st	X+, r0
    76f8:	8a 95       	dec	r24
    76fa:	e1 f7       	brne	.-8      	; 0x76f4 <main+0x2e0>
                    msg.crc = message_crc(&msg);
    76fc:	8b e8       	ldi	r24, 0x8B	; 139
    76fe:	91 e0       	ldi	r25, 0x01	; 1
    7700:	0e 94 cf 38 	call	0x719e	; 0x719e <message_crc>
    7704:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    7708:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
    770c:	8b e8       	ldi	r24, 0x8B	; 139
    770e:	91 e0       	ldi	r25, 0x01	; 1
    7710:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
    7714:	c1 ea       	ldi	r28, 0xA1	; 161
    7716:	d1 e0       	ldi	r29, 0x01	; 1
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
                bootmsg->page_address = new_packet[2];
                bootmsg->unused = 0;
                cli();
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    7718:	86 e0       	ldi	r24, 0x06	; 6
    771a:	a8 2e       	mov	r10, r24
    771c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <has_new_packet>
    7720:	81 11       	cpse	r24, r1
    7722:	22 c0       	rjmp	.+68     	; 0x7768 <main+0x354>
                    bootmsg->page_offset = i/2;
    7724:	a0 91 89 01 	lds	r26, 0x0189	; 0x800189 <bootmsg>
    7728:	b0 91 8a 01 	lds	r27, 0x018A	; 0x80018a <bootmsg+0x1>
    772c:	8a 2d       	mov	r24, r10
    772e:	86 95       	lsr	r24
    7730:	11 96       	adiw	r26, 0x01	; 1
    7732:	8c 93       	st	X, r24
    7734:	11 97       	sbiw	r26, 0x01	; 1
                    memcpy(&(bootmsg->word1), new_packet+3+i, 6);
    7736:	12 96       	adiw	r26, 0x02	; 2
    7738:	86 e0       	ldi	r24, 0x06	; 6
    773a:	fe 01       	movw	r30, r28
    773c:	01 90       	ld	r0, Z+
    773e:	0d 92       	st	X+, r0
    7740:	8a 95       	dec	r24
    7742:	e1 f7       	brne	.-8      	; 0x773c <main+0x328>
                    msg.crc = message_crc(&msg);
    7744:	8b e8       	ldi	r24, 0x8B	; 139
    7746:	91 e0       	ldi	r25, 0x01	; 1
    7748:	0e 94 cf 38 	call	0x719e	; 0x719e <message_crc>
    774c:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    7750:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
    7754:	8b e8       	ldi	r24, 0x8B	; 139
    7756:	91 e0       	ldi	r25, 0x01	; 1
    7758:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
            case PACKET_BOOTPAGE:
                msg.type = BOOTPGM_PAGE;
                bootmsg->page_address = new_packet[2];
                bootmsg->unused = 0;
                cli();
                for (i = 0; i<SPM_PAGESIZE && !has_new_packet; i+=6) {
    775c:	f6 e0       	ldi	r31, 0x06	; 6
    775e:	af 0e       	add	r10, r31
    7760:	26 96       	adiw	r28, 0x06	; 6
    7762:	24 e8       	ldi	r18, 0x84	; 132
    7764:	a2 12       	cpse	r10, r18
    7766:	da cf       	rjmp	.-76     	; 0x771c <main+0x308>
                        break;
                    msg.crc = message_crc(&msg);
                    message_send(&msg);
                    _delay_us(50);
                }
                sei();
    7768:	78 94       	sei
                led_port |= led_mask;
    776a:	40 9a       	sbi	0x08, 0	; 8
    776c:	8f e1       	ldi	r24, 0x1F	; 31
    776e:	9e e4       	ldi	r25, 0x4E	; 78
    7770:	01 97       	sbiw	r24, 0x01	; 1
    7772:	f1 f7       	brne	.-4      	; 0x7770 <main+0x35c>
    7774:	00 c0       	rjmp	.+0      	; 0x7776 <main+0x362>
    7776:	00 00       	nop
                _delay_ms(10);
                led_port &= ~led_mask;
    7778:	40 98       	cbi	0x08, 0	; 8
    777a:	ef e1       	ldi	r30, 0x1F	; 31
    777c:	fe e4       	ldi	r31, 0x4E	; 78
    777e:	31 97       	sbiw	r30, 0x01	; 1
    7780:	f1 f7       	brne	.-4      	; 0x777e <main+0x36a>
    7782:	00 c0       	rjmp	.+0      	; 0x7784 <main+0x370>
    7784:	00 00       	nop
    7786:	9a ce       	rjmp	.-716    	; 0x74bc <main+0xa8>
                led_port &= ~led_mask;
                _delay_ms(10);
                break;
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
    7788:	f7 01       	movw	r30, r14
    778a:	2b 2d       	mov	r18, r11
    778c:	11 92       	st	Z+, r1
    778e:	2a 95       	dec	r18
    7790:	e9 f7       	brne	.-6      	; 0x778c <main+0x378>
                msg.type = GPS;
    7792:	c0 92 94 01 	sts	0x0194, r12	; 0x800194 <msg+0x9>
                cli();
    7796:	f8 94       	cli
    7798:	ca e9       	ldi	r28, 0x9A	; 154
    779a:	d1 e0       	ldi	r29, 0x01	; 1
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
                    memcpy(gpsmsg, new_packet+i, GPS_MSGSIZE);
    779c:	a0 91 1e 02 	lds	r26, 0x021E	; 0x80021e <gpsmsg>
    77a0:	b0 91 1f 02 	lds	r27, 0x021F	; 0x80021f <gpsmsg+0x1>
    77a4:	88 e0       	ldi	r24, 0x08	; 8
    77a6:	fe 01       	movw	r30, r28
    77a8:	01 90       	ld	r0, Z+
    77aa:	0d 92       	st	X+, r0
    77ac:	8a 95       	dec	r24
    77ae:	e1 f7       	brne	.-8      	; 0x77a8 <main+0x394>
                    if (gpsmsg->id == 0 && gpsmsg->x == 0 && gpsmsg->y == 0 && gpsmsg->theta == 0 && gpsmsg->unused == 0)
    77b0:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <gpsmsg>
    77b4:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <gpsmsg+0x1>
    77b8:	80 81       	ld	r24, Z
    77ba:	91 81       	ldd	r25, Z+1	; 0x01
    77bc:	89 2b       	or	r24, r25
    77be:	79 f4       	brne	.+30     	; 0x77de <main+0x3ca>
    77c0:	82 81       	ldd	r24, Z+2	; 0x02
    77c2:	93 81       	ldd	r25, Z+3	; 0x03
    77c4:	89 2b       	or	r24, r25
    77c6:	59 f4       	brne	.+22     	; 0x77de <main+0x3ca>
    77c8:	84 81       	ldd	r24, Z+4	; 0x04
    77ca:	95 81       	ldd	r25, Z+5	; 0x05
    77cc:	89 2b       	or	r24, r25
    77ce:	39 f4       	brne	.+14     	; 0x77de <main+0x3ca>
    77d0:	86 81       	ldd	r24, Z+6	; 0x06
    77d2:	81 11       	cpse	r24, r1
    77d4:	04 c0       	rjmp	.+8      	; 0x77de <main+0x3ca>
    77d6:	87 81       	ldd	r24, Z+7	; 0x07
    77d8:	90 85       	ldd	r25, Z+8	; 0x08
    77da:	89 2b       	or	r24, r25
    77dc:	29 f2       	breq	.-118    	; 0x7768 <main+0x354>
                        break;
                    msg.crc = message_crc(&msg);
    77de:	8b e8       	ldi	r24, 0x8B	; 139
    77e0:	91 e0       	ldi	r25, 0x01	; 1
    77e2:	0e 94 cf 38 	call	0x719e	; 0x719e <message_crc>
    77e6:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <msg+0xb>
    77ea:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <msg+0xa>
                    message_send(&msg);
    77ee:	8b e8       	ldi	r24, 0x8B	; 139
    77f0:	91 e0       	ldi	r25, 0x01	; 1
    77f2:	0e 94 88 39 	call	0x7310	; 0x7310 <message_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    77f6:	f5 e8       	ldi	r31, 0x85	; 133
    77f8:	fa 95       	dec	r31
    77fa:	f1 f7       	brne	.-4      	; 0x77f8 <main+0x3e4>
    77fc:	00 00       	nop
    77fe:	28 96       	adiw	r28, 0x08	; 8
#define GPS_MSGSIZE 8
            case PACKET_GPSFRAME:
                memset(&msg, 0, sizeof(message_t)-sizeof(msg.crc));
                msg.type = GPS;
                cli();
                for (i = 2; i<PACKET_SIZE-GPS_MSGSIZE; i += GPS_MSGSIZE) {
    7800:	0c 17       	cp	r16, r28
    7802:	1d 07       	cpc	r17, r29
    7804:	59 f6       	brne	.-106    	; 0x779c <main+0x388>
    7806:	b0 cf       	rjmp	.-160    	; 0x7768 <main+0x354>
            case PACKET_LEDTOGGLE:
                leds_toggle = !leds_toggle;
                if (leds_toggle) {
                    led_port |= led_mask;
                } else {
                    led_port &= ~led_mask;
    7808:	40 98       	cbi	0x08, 0	; 8
    780a:	58 ce       	rjmp	.-848    	; 0x74bc <main+0xa8>

0000780c <memcpy>:
    780c:	fb 01       	movw	r30, r22
    780e:	dc 01       	movw	r26, r24
    7810:	02 c0       	rjmp	.+4      	; 0x7816 <memcpy+0xa>
    7812:	01 90       	ld	r0, Z+
    7814:	0d 92       	st	X+, r0
    7816:	41 50       	subi	r20, 0x01	; 1
    7818:	50 40       	sbci	r21, 0x00	; 0
    781a:	d8 f7       	brcc	.-10     	; 0x7812 <memcpy+0x6>
    781c:	08 95       	ret

0000781e <_exit>:
    781e:	f8 94       	cli

00007820 <__stop_program>:
    7820:	ff cf       	rjmp	.-2      	; 0x7820 <__stop_program>


build/bootldr.elf:     format de fichier elf32-avr


Déassemblage de la section .text :

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7008:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    700c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7010:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7014:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7018:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    701c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7020:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7024:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7028:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    702c:	0c 94 c3 39 	jmp	0x7386	; 0x7386 <__vector_11>
    7030:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7034:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7038:	0c 94 9e 39 	jmp	0x733c	; 0x733c <__vector_14>
    703c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7040:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7044:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7048:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    704c:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7050:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7054:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7058:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    705c:	0c 94 e5 39 	jmp	0x73ca	; 0x73ca <__vector_23>
    7060:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>
    7064:	0c 94 51 38 	jmp	0x70a2	; 0x70a2 <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_copy_data>:
    7074:	11 e0       	ldi	r17, 0x01	; 1
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	e2 ea       	ldi	r30, 0xA2	; 162
    707c:	f7 e7       	ldi	r31, 0x77	; 119
    707e:	02 c0       	rjmp	.+4      	; 0x7084 <__do_copy_data+0x10>
    7080:	05 90       	lpm	r0, Z+
    7082:	0d 92       	st	X+, r0
    7084:	a8 30       	cpi	r26, 0x08	; 8
    7086:	b1 07       	cpc	r27, r17
    7088:	d9 f7       	brne	.-10     	; 0x7080 <__do_copy_data+0xc>

0000708a <__do_clear_bss>:
    708a:	21 e0       	ldi	r18, 0x01	; 1
    708c:	a8 e0       	ldi	r26, 0x08	; 8
    708e:	b1 e0       	ldi	r27, 0x01	; 1
    7090:	01 c0       	rjmp	.+2      	; 0x7094 <.do_clear_bss_start>

00007092 <.do_clear_bss_loop>:
    7092:	1d 92       	st	X+, r1

00007094 <.do_clear_bss_start>:
    7094:	ab 3c       	cpi	r26, 0xCB	; 203
    7096:	b2 07       	cpc	r27, r18
    7098:	e1 f7       	brne	.-8      	; 0x7092 <.do_clear_bss_loop>
    709a:	0e 94 82 3b 	call	0x7704	; 0x7704 <main>
    709e:	0c 94 cf 3b 	jmp	0x779e	; 0x779e <_exit>

000070a2 <__bad_interrupt>:
    70a2:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

000070a6 <message_rx>:
    MCUCR = (1<<IVCE);
    MCUCR = 0;
    asm volatile ("jmp 0x0000");
}

void message_rx(message_t *msg, distance_measurement_t *dist) {
    70a6:	cf 93       	push	r28
    70a8:	df 93       	push	r29
    70aa:	fc 01       	movw	r30, r24
    if (msg->type == BOOTPGM_PAGE) {
    70ac:	81 85       	ldd	r24, Z+9	; 0x09
    70ae:	81 38       	cpi	r24, 0x81	; 129
    70b0:	91 f0       	breq	.+36     	; 0x70d6 <message_rx+0x30>
            if (page_count == page_total)
                goto_program();
        }
        else
            set_color(RGB(0,0,1));
    } else if (msg->type == BOOTPGM_SIZE) {
    70b2:	82 38       	cpi	r24, 0x82	; 130
    70b4:	09 f4       	brne	.+2      	; 0x70b8 <message_rx+0x12>
    70b6:	42 c0       	rjmp	.+132    	; 0x713c <message_rx+0x96>
        page_total = msg->data[0];
        if (page_count == page_total)
            goto_program();
    } else if (msg->type == BOOT) {
    70b8:	80 38       	cpi	r24, 0x80	; 128
    70ba:	09 f4       	brne	.+2      	; 0x70be <message_rx+0x18>
    70bc:	4a c0       	rjmp	.+148    	; 0x7152 <message_rx+0xac>
            asm volatile ("jmp 0x7000");
    } else {
        if (page_count == 0)
    70be:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <page_count>
    70c2:	81 11       	cpse	r24, r1
    70c4:	05 c0       	rjmp	.+10     	; 0x70d0 <message_rx+0x2a>
uint16_t page_buffer[SPM_PAGESIZE/2+2];
bootmsg_t *bootmsg;
BF_create(page_table, 224);

void goto_program() {
    MCUCR = (1<<IVCE);
    70c6:	81 e0       	ldi	r24, 0x01	; 1
    70c8:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    70ca:	15 be       	out	0x35, r1	; 53
    asm volatile ("jmp 0x0000");
    70cc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
            asm volatile ("jmp 0x7000");
    } else {
        if (page_count == 0)
            goto_program();
    }
}
    70d0:	df 91       	pop	r29
    70d2:	cf 91       	pop	r28
    70d4:	08 95       	ret
    asm volatile ("jmp 0x0000");
}

void message_rx(message_t *msg, distance_measurement_t *dist) {
    if (msg->type == BOOTPGM_PAGE) {
        bootmsg = (bootmsg_t*)msg->data;
    70d6:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <bootmsg+0x1>
    70da:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <bootmsg>
        if (page_address != bootmsg->page_address) {
    70de:	c0 81       	ld	r28, Z
    70e0:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <page_address>
    70e4:	c8 17       	cp	r28, r24
    70e6:	d1 f1       	breq	.+116    	; 0x715c <message_rx+0xb6>
            page_address = bootmsg->page_address;
    70e8:	c0 93 b1 01 	sts	0x01B1, r28	; 0x8001b1 <page_address>
            page_byte_count = 0;
        }
        page_buffer[bootmsg->page_offset] = bootmsg->word1;
    70ec:	81 81       	ldd	r24, Z+1	; 0x01
    70ee:	90 e0       	ldi	r25, 0x00	; 0
    70f0:	22 81       	ldd	r18, Z+2	; 0x02
    70f2:	33 81       	ldd	r19, Z+3	; 0x03
    70f4:	dc 01       	movw	r26, r24
    70f6:	aa 0f       	add	r26, r26
    70f8:	bb 1f       	adc	r27, r27
    70fa:	a3 5d       	subi	r26, 0xD3	; 211
    70fc:	be 4f       	sbci	r27, 0xFE	; 254
    70fe:	2d 93       	st	X+, r18
    7100:	3c 93       	st	X, r19
        page_buffer[bootmsg->page_offset+1] = bootmsg->word2;
    7102:	24 81       	ldd	r18, Z+4	; 0x04
    7104:	35 81       	ldd	r19, Z+5	; 0x05
    7106:	dc 01       	movw	r26, r24
    7108:	aa 0f       	add	r26, r26
    710a:	bb 1f       	adc	r27, r27
    710c:	a1 5d       	subi	r26, 0xD1	; 209
    710e:	be 4f       	sbci	r27, 0xFE	; 254
    7110:	2d 93       	st	X+, r18
    7112:	3c 93       	st	X, r19
        page_buffer[bootmsg->page_offset+2] = bootmsg->word3;
    7114:	26 81       	ldd	r18, Z+6	; 0x06
    7116:	37 81       	ldd	r19, Z+7	; 0x07
    7118:	88 0f       	add	r24, r24
    711a:	99 1f       	adc	r25, r25
    711c:	fc 01       	movw	r30, r24
    711e:	ef 5c       	subi	r30, 0xCF	; 207
    7120:	fe 4f       	sbci	r31, 0xFE	; 254
    7122:	31 83       	std	Z+1, r19	; 0x01
    7124:	20 83       	st	Z, r18
        page_byte_count += 6;
    7126:	86 e0       	ldi	r24, 0x06	; 6
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <page_byte_count+0x1>
    712e:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <page_byte_count>
            page_count++;
            if (page_count == page_total)
                goto_program();
        }
        else
            set_color(RGB(0,0,1));
    7132:	80 e1       	ldi	r24, 0x10	; 16
            asm volatile ("jmp 0x7000");
    } else {
        if (page_count == 0)
            goto_program();
    }
}
    7134:	df 91       	pop	r29
    7136:	cf 91       	pop	r28
            page_count++;
            if (page_count == page_total)
                goto_program();
        }
        else
            set_color(RGB(0,0,1));
    7138:	0c 94 9f 39 	jmp	0x733e	; 0x733e <set_color>
    } else if (msg->type == BOOTPGM_SIZE) {
        page_total = msg->data[0];
    713c:	80 81       	ld	r24, Z
    713e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <page_total>
        if (page_count == page_total)
    7142:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <page_count>
    7146:	89 17       	cp	r24, r25
    7148:	09 f4       	brne	.+2      	; 0x714c <message_rx+0xa6>
    714a:	bd cf       	rjmp	.-134    	; 0x70c6 <message_rx+0x20>
            asm volatile ("jmp 0x7000");
    } else {
        if (page_count == 0)
            goto_program();
    }
}
    714c:	df 91       	pop	r29
    714e:	cf 91       	pop	r28
    7150:	08 95       	ret
    } else if (msg->type == BOOTPGM_SIZE) {
        page_total = msg->data[0];
        if (page_count == page_total)
            goto_program();
    } else if (msg->type == BOOT) {
            asm volatile ("jmp 0x7000");
    7152:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>
    } else {
        if (page_count == 0)
            goto_program();
    }
}
    7156:	df 91       	pop	r29
    7158:	cf 91       	pop	r28
    715a:	08 95       	ret
    715c:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <page_byte_count>
    7160:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <page_byte_count+0x1>
    7164:	2a 5f       	subi	r18, 0xFA	; 250
    7166:	3f 4f       	sbci	r19, 0xFF	; 255
        bootmsg = (bootmsg_t*)msg->data;
        if (page_address != bootmsg->page_address) {
            page_address = bootmsg->page_address;
            page_byte_count = 0;
        }
        page_buffer[bootmsg->page_offset] = bootmsg->word1;
    7168:	81 81       	ldd	r24, Z+1	; 0x01
    716a:	90 e0       	ldi	r25, 0x00	; 0
    716c:	42 81       	ldd	r20, Z+2	; 0x02
    716e:	53 81       	ldd	r21, Z+3	; 0x03
    7170:	dc 01       	movw	r26, r24
    7172:	aa 0f       	add	r26, r26
    7174:	bb 1f       	adc	r27, r27
    7176:	a3 5d       	subi	r26, 0xD3	; 211
    7178:	be 4f       	sbci	r27, 0xFE	; 254
    717a:	4d 93       	st	X+, r20
    717c:	5c 93       	st	X, r21
        page_buffer[bootmsg->page_offset+1] = bootmsg->word2;
    717e:	44 81       	ldd	r20, Z+4	; 0x04
    7180:	55 81       	ldd	r21, Z+5	; 0x05
    7182:	dc 01       	movw	r26, r24
    7184:	aa 0f       	add	r26, r26
    7186:	bb 1f       	adc	r27, r27
    7188:	a1 5d       	subi	r26, 0xD1	; 209
    718a:	be 4f       	sbci	r27, 0xFE	; 254
    718c:	4d 93       	st	X+, r20
    718e:	5c 93       	st	X, r21
        page_buffer[bootmsg->page_offset+2] = bootmsg->word3;
    7190:	46 81       	ldd	r20, Z+6	; 0x06
    7192:	57 81       	ldd	r21, Z+7	; 0x07
    7194:	88 0f       	add	r24, r24
    7196:	99 1f       	adc	r25, r25
    7198:	fc 01       	movw	r30, r24
    719a:	ef 5c       	subi	r30, 0xCF	; 207
    719c:	fe 4f       	sbci	r31, 0xFE	; 254
    719e:	51 83       	std	Z+1, r21	; 0x01
    71a0:	40 83       	st	Z, r20
        page_byte_count += 6;
    71a2:	30 93 2c 01 	sts	0x012C, r19	; 0x80012c <page_byte_count+0x1>
    71a6:	20 93 2b 01 	sts	0x012B, r18	; 0x80012b <page_byte_count>
        if (page_byte_count >= SPM_PAGESIZE && !BF_get(page_table, page_address)) {
    71aa:	20 38       	cpi	r18, 0x80	; 128
    71ac:	31 05       	cpc	r19, r1
    71ae:	08 f2       	brcs	.-126    	; 0x7132 <message_rx+0x8c>
    71b0:	ec 2f       	mov	r30, r28
    71b2:	e6 95       	lsr	r30
    71b4:	e6 95       	lsr	r30
    71b6:	e6 95       	lsr	r30
    71b8:	f0 e0       	ldi	r31, 0x00	; 0
    71ba:	e8 5f       	subi	r30, 0xF8	; 248
    71bc:	fe 4f       	sbci	r31, 0xFE	; 254
    71be:	80 81       	ld	r24, Z
    71c0:	90 e0       	ldi	r25, 0x00	; 0
    71c2:	2c 2f       	mov	r18, r28
    71c4:	27 70       	andi	r18, 0x07	; 7
    71c6:	02 c0       	rjmp	.+4      	; 0x71cc <message_rx+0x126>
    71c8:	95 95       	asr	r25
    71ca:	87 95       	ror	r24
    71cc:	2a 95       	dec	r18
    71ce:	e2 f7       	brpl	.-8      	; 0x71c8 <message_rx+0x122>
    71d0:	80 fd       	sbrc	r24, 0
    71d2:	af cf       	rjmp	.-162    	; 0x7132 <message_rx+0x8c>
             * Write program page to flash.
             *
             * Taken from http://www.nongnu.org/avr-libc/user-manual/group__avr__boot.html
             */

            eeprom_busy_wait ();
    71d4:	f9 99       	sbic	0x1f, 1	; 31
    71d6:	fe cf       	rjmp	.-4      	; 0x71d4 <message_rx+0x12e>

            boot_page_erase(page_address*SPM_PAGESIZE);
    71d8:	80 e8       	ldi	r24, 0x80	; 128
    71da:	c8 9f       	mul	r28, r24
    71dc:	e0 01       	movw	r28, r0
    71de:	11 24       	eor	r1, r1
    71e0:	83 e0       	ldi	r24, 0x03	; 3
    71e2:	fe 01       	movw	r30, r28
    71e4:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    71e8:	e8 95       	spm
            boot_spm_busy_wait();
    71ea:	07 b6       	in	r0, 0x37	; 55
    71ec:	00 fc       	sbrc	r0, 0
    71ee:	fd cf       	rjmp	.-6      	; 0x71ea <message_rx+0x144>
    71f0:	6d ea       	ldi	r22, 0xAD	; 173
    71f2:	71 e0       	ldi	r23, 0x01	; 1
    71f4:	ad e2       	ldi	r26, 0x2D	; 45
    71f6:	b1 e0       	ldi	r27, 0x01	; 1
    71f8:	ae 01       	movw	r20, r28
    71fa:	4d 52       	subi	r20, 0x2D	; 45
    71fc:	51 40       	sbci	r21, 0x01	; 1

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);
    71fe:	21 e0       	ldi	r18, 0x01	; 1
    7200:	fa 01       	movw	r30, r20
    7202:	ea 0f       	add	r30, r26
    7204:	fb 1f       	adc	r31, r27
    7206:	8d 91       	ld	r24, X+
    7208:	9d 91       	ld	r25, X+
    720a:	0c 01       	movw	r0, r24
    720c:	20 93 57 00 	sts	0x0057, r18	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7210:	e8 95       	spm
    7212:	11 24       	eor	r1, r1

            boot_page_erase(page_address*SPM_PAGESIZE);
            boot_spm_busy_wait();

            int i,j;
            for (i=0, j=0; i<SPM_PAGESIZE; i+=2, j++)
    7214:	6a 17       	cp	r22, r26
    7216:	7b 07       	cpc	r23, r27
    7218:	99 f7       	brne	.-26     	; 0x7200 <message_rx+0x15a>
                boot_page_fill(page_address*SPM_PAGESIZE+i, page_buffer[j]);

            boot_page_write(page_address*SPM_PAGESIZE);
    721a:	85 e0       	ldi	r24, 0x05	; 5
    721c:	fe 01       	movw	r30, r28
    721e:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7222:	e8 95       	spm
            boot_spm_busy_wait();
    7224:	07 b6       	in	r0, 0x37	; 55
    7226:	00 fc       	sbrc	r0, 0
    7228:	fd cf       	rjmp	.-6      	; 0x7224 <message_rx+0x17e>

            boot_rww_enable ();
    722a:	81 e1       	ldi	r24, 0x11	; 17
    722c:	80 93 57 00 	sts	0x0057, r24	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
    7230:	e8 95       	spm

            set_color(RGB(0,3,0));
    7232:	8c e0       	ldi	r24, 0x0C	; 12
    7234:	0e 94 9f 39 	call	0x733e	; 0x733e <set_color>
            BF_set(page_table, page_address);
    7238:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <page_address>
    723c:	e8 2f       	mov	r30, r24
    723e:	e6 95       	lsr	r30
    7240:	e6 95       	lsr	r30
    7242:	e6 95       	lsr	r30
    7244:	f0 e0       	ldi	r31, 0x00	; 0
    7246:	e8 5f       	subi	r30, 0xF8	; 248
    7248:	fe 4f       	sbci	r31, 0xFE	; 254
    724a:	28 2f       	mov	r18, r24
    724c:	27 70       	andi	r18, 0x07	; 7
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	01 c0       	rjmp	.+2      	; 0x7256 <message_rx+0x1b0>
    7254:	88 0f       	add	r24, r24
    7256:	2a 95       	dec	r18
    7258:	ea f7       	brpl	.-6      	; 0x7254 <message_rx+0x1ae>
    725a:	90 81       	ld	r25, Z
    725c:	89 2b       	or	r24, r25
    725e:	80 83       	st	Z, r24
            page_count++;
    7260:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <page_count>
    7264:	8f 5f       	subi	r24, 0xFF	; 255
    7266:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <page_count>
            if (page_count == page_total)
    726a:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <page_total>
    726e:	89 13       	cpse	r24, r25
    7270:	2f cf       	rjmp	.-418    	; 0x70d0 <message_rx+0x2a>
    7272:	29 cf       	rjmp	.-430    	; 0x70c6 <message_rx+0x20>

00007274 <goto_program>:
uint16_t page_buffer[SPM_PAGESIZE/2+2];
bootmsg_t *bootmsg;
BF_create(page_table, 224);

void goto_program() {
    MCUCR = (1<<IVCE);
    7274:	81 e0       	ldi	r24, 0x01	; 1
    7276:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    7278:	15 be       	out	0x35, r1	; 53
    asm volatile ("jmp 0x0000");
    727a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>
    727e:	08 95       	ret

00007280 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
    7280:	08 95       	ret

00007282 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
    7282:	80 e0       	ldi	r24, 0x00	; 0
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	08 95       	ret

00007288 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
    7288:	08 95       	ret

0000728a <kilo_init>:
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
    cli();
    728a:	f8 94       	cli

    ports_off();
    728c:	14 b8       	out	0x04, r1	; 4
    728e:	17 b8       	out	0x07, r1	; 7
    7290:	1a b8       	out	0x0a, r1	; 10
    7292:	15 b8       	out	0x05, r1	; 5
    7294:	18 b8       	out	0x08, r1	; 8
    7296:	1b b8       	out	0x0b, r1	; 11
    ports_on();
    7298:	52 9a       	sbi	0x0a, 2	; 10
    729a:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
    729c:	14 bc       	out	0x24, r1	; 36
    729e:	85 e0       	ldi	r24, 0x05	; 5
    72a0:	85 bd       	out	0x25, r24	; 37
    72a2:	8f ef       	ldi	r24, 0xFF	; 255
    72a4:	87 bd       	out	0x27, r24	; 39
    72a6:	82 e0       	ldi	r24, 0x02	; 2
    72a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    rx_timer_setup();
    72ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    72b0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    72b4:	2f e8       	ldi	r18, 0x8F	; 143
    72b6:	3b e0       	ldi	r19, 0x0B	; 11
    72b8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    72bc:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    72c0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    motors_setup();
    72c4:	53 98       	cbi	0x0a, 3	; 10
    72c6:	23 98       	cbi	0x04, 3	; 4
    72c8:	91 ea       	ldi	r25, 0xA1	; 161
    72ca:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    72ce:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
    72d2:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    72d6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    acomp_setup();
    72da:	8b e0       	ldi	r24, 0x0B	; 11
    72dc:	80 bf       	out	0x30, r24	; 48
    72de:	83 e0       	ldi	r24, 0x03	; 3
    72e0:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    adc_setup();
    72e4:	86 e0       	ldi	r24, 0x06	; 6
    72e6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    72ea:	83 e8       	ldi	r24, 0x83	; 131
    72ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    72f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    72f4:	80 64       	ori	r24, 0x40	; 64
    72f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    72fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    72fe:	86 fd       	sbrc	r24, 6
    7300:	fc cf       	rjmp	.-8      	; 0x72fa <kilo_init+0x70>
    adc_trigger_high_gain();
    7302:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    7306:	83 ea       	ldi	r24, 0xA3	; 163
    7308:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    730c:	81 e0       	ldi	r24, 0x01	; 1
    730e:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
    7312:	81 e0       	ldi	r24, 0x01	; 1
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	0e 94 c7 3b 	call	0x778e	; 0x778e <eeprom_read_byte>
    if (osccal != 0xFF)
    731a:	8f 3f       	cpi	r24, 0xFF	; 255
    731c:	11 f0       	breq	.+4      	; 0x7322 <kilo_init+0x98>
        OSCCAL = osccal;
    731e:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

    rx_busy = 0;
    7322:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rx_busy>
    rx_leadingbit = 1;
    7326:	81 e0       	ldi	r24, 0x01	; 1
    7328:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <rx_leadingbit>
    rx_leadingbyte = 1;
    732c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rx_leadingbyte>
    rx_byteindex = 0;
    7330:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <rx_byteindex>
    rx_bytevalue = 0;
    7334:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rx_bytevalue>
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
    7338:	78 94       	sei
    733a:	08 95       	ret

0000733c <__vector_14>:

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
}

EMPTY_INTERRUPT(TIMER0_COMPA_vect)
    733c:	18 95       	reti

0000733e <set_color>:

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
    733e:	80 ff       	sbrs	r24, 0
    7340:	11 c0       	rjmp	.+34     	; 0x7364 <set_color+0x26>
        DDRD |= (1<<5);
    7342:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
    7344:	81 ff       	sbrs	r24, 1
    7346:	11 c0       	rjmp	.+34     	; 0x736a <set_color+0x2c>
        DDRD |= (1<<4);
    7348:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
    734a:	82 ff       	sbrs	r24, 2
    734c:	11 c0       	rjmp	.+34     	; 0x7370 <set_color+0x32>
        DDRC |= (1<<3);
    734e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
    7350:	83 ff       	sbrs	r24, 3
    7352:	11 c0       	rjmp	.+34     	; 0x7376 <set_color+0x38>
        DDRC |= (1<<2);
    7354:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
    7356:	84 ff       	sbrs	r24, 4
    7358:	11 c0       	rjmp	.+34     	; 0x737c <set_color+0x3e>
        DDRC |= (1<<5);
    735a:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
    735c:	85 fd       	sbrc	r24, 5
    735e:	11 c0       	rjmp	.+34     	; 0x7382 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    7360:	3c 98       	cbi	0x07, 4	; 7
    7362:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    7364:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
    7366:	81 fd       	sbrc	r24, 1
    7368:	ef cf       	rjmp	.-34     	; 0x7348 <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    736a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
    736c:	82 fd       	sbrc	r24, 2
    736e:	ef cf       	rjmp	.-34     	; 0x734e <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    7370:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
    7372:	83 fd       	sbrc	r24, 3
    7374:	ef cf       	rjmp	.-34     	; 0x7354 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    7376:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
    7378:	84 fd       	sbrc	r24, 4
    737a:	ef cf       	rjmp	.-34     	; 0x735a <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    737c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
    737e:	85 ff       	sbrs	r24, 5
    7380:	ef cf       	rjmp	.-34     	; 0x7360 <set_color+0x22>
        DDRC |= (1<<4);
    7382:	3c 9a       	sbi	0x07, 4	; 7
    7384:	08 95       	ret

00007386 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
    7386:	1f 92       	push	r1
    7388:	0f 92       	push	r0
    738a:	0f b6       	in	r0, 0x3f	; 63
    738c:	0f 92       	push	r0
    738e:	11 24       	eor	r1, r1
    7390:	8f 93       	push	r24
    7392:	9f 93       	push	r25
    rx_timer_off();
    7394:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    7398:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    739c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
    73a0:	81 e0       	ldi	r24, 0x01	; 1
    73a2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <rx_leadingbit>
    rx_leadingbyte = 1;
    73a6:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rx_leadingbyte>
    rx_busy = 0;
    73aa:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rx_busy>
    adc_trigger_high_gain();
    73ae:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    73b2:	93 ea       	ldi	r25, 0xA3	; 163
    73b4:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    73b8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
    73bc:	9f 91       	pop	r25
    73be:	8f 91       	pop	r24
    73c0:	0f 90       	pop	r0
    73c2:	0f be       	out	0x3f, r0	; 63
    73c4:	0f 90       	pop	r0
    73c6:	1f 90       	pop	r1
    73c8:	18 95       	reti

000073ca <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
    73ca:	1f 92       	push	r1
    73cc:	0f 92       	push	r0
    73ce:	0f b6       	in	r0, 0x3f	; 63
    73d0:	0f 92       	push	r0
    73d2:	11 24       	eor	r1, r1
    73d4:	2f 93       	push	r18
    73d6:	3f 93       	push	r19
    73d8:	4f 93       	push	r20
    73da:	5f 93       	push	r21
    73dc:	6f 93       	push	r22
    73de:	7f 93       	push	r23
    73e0:	8f 93       	push	r24
    73e2:	9f 93       	push	r25
    73e4:	af 93       	push	r26
    73e6:	bf 93       	push	r27
    73e8:	cf 93       	push	r28
    73ea:	df 93       	push	r29
    73ec:	ef 93       	push	r30
    73ee:	ff 93       	push	r31
    uint16_t timer = TCNT1;
    73f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    73f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
    73f8:	41 e0       	ldi	r20, 0x01	; 1
    73fa:	40 93 b9 01 	sts	0x01B9, r20	; 0x8001b9 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
    73fe:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <rx_leadingbit>
    7402:	88 23       	and	r24, r24
    7404:	a9 f1       	breq	.+106    	; 0x7470 <__vector_23+0xa6>
        rx_timer_on();
    7406:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    740a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    740e:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
    7412:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rx_bytevalue>
        rx_leadingbit = 0;
    7416:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <rx_leadingbit>
        if (rx_leadingbyte) {
    741a:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rx_leadingbyte>
    741e:	88 23       	and	r24, r24
    7420:	a1 f0       	breq	.+40     	; 0x744a <__vector_23+0x80>
            adc_finish_conversion();
    7422:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    7426:	86 fd       	sbrc	r24, 6
    7428:	fc cf       	rjmp	.-8      	; 0x7422 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
    742a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    742e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    7432:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <rx_dist+0x3>
    7436:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <rx_dist+0x2>
            adc_trigger_low_gain();
    743a:	81 e0       	ldi	r24, 0x01	; 1
    743c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    7440:	93 ea       	ldi	r25, 0xA3	; 163
    7442:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    7446:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    }
                }
            }
        }
    }
}
    744a:	ff 91       	pop	r31
    744c:	ef 91       	pop	r30
    744e:	df 91       	pop	r29
    7450:	cf 91       	pop	r28
    7452:	bf 91       	pop	r27
    7454:	af 91       	pop	r26
    7456:	9f 91       	pop	r25
    7458:	8f 91       	pop	r24
    745a:	7f 91       	pop	r23
    745c:	6f 91       	pop	r22
    745e:	5f 91       	pop	r21
    7460:	4f 91       	pop	r20
    7462:	3f 91       	pop	r19
    7464:	2f 91       	pop	r18
    7466:	0f 90       	pop	r0
    7468:	0f be       	out	0x3f, r0	; 63
    746a:	0f 90       	pop	r0
    746c:	1f 90       	pop	r1
    746e:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
    7470:	c9 01       	movw	r24, r18
    7472:	87 58       	subi	r24, 0x87	; 135
    7474:	91 09       	sbc	r25, r1
    7476:	84 37       	cpi	r24, 0x74	; 116
    7478:	99 40       	sbci	r25, 0x09	; 9
    747a:	08 f0       	brcs	.+2      	; 0x747e <__vector_23+0xb4>
    747c:	3f c0       	rjmp	.+126    	; 0x74fc <__vector_23+0x132>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
    747e:	26 58       	subi	r18, 0x86	; 134
    7480:	31 09       	sbc	r19, r1
    7482:	a4 ef       	ldi	r26, 0xF4	; 244
    7484:	b0 e0       	ldi	r27, 0x00	; 0
    7486:	0e 94 b8 3b 	call	0x7770	; 0x7770 <__umulhisi3>
    748a:	aa 27       	eor	r26, r26
    748c:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
    748e:	88 30       	cpi	r24, 0x08	; 8
    7490:	08 f4       	brcc	.+2      	; 0x7494 <__vector_23+0xca>
    7492:	6b c0       	rjmp	.+214    	; 0x756a <__vector_23+0x1a0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
    7494:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <rx_leadingbit>
                if (rx_leadingbyte) {
    7498:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <rx_leadingbyte>
    749c:	81 11       	cpse	r24, r1
    749e:	42 c0       	rjmp	.+132    	; 0x7524 <__vector_23+0x15a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
    74a0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <rx_byteindex>
    74a4:	e8 2f       	mov	r30, r24
    74a6:	f0 e0       	ldi	r31, 0x00	; 0
    74a8:	e5 54       	subi	r30, 0x45	; 69
    74aa:	fe 4f       	sbci	r31, 0xFE	; 254
    74ac:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rx_bytevalue>
    74b0:	90 83       	st	Z, r25
                    rx_byteindex++;
    74b2:	8f 5f       	subi	r24, 0xFF	; 255
    74b4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
    74b8:	8c 30       	cpi	r24, 0x0C	; 12
    74ba:	39 f6       	brne	.-114    	; 0x744a <__vector_23+0x80>
                        rx_timer_off();
    74bc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    74c0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    74c4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    74c8:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <rx_leadingbyte>
                        rx_busy = 0;
    74cc:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
    74d0:	c0 91 c5 01 	lds	r28, 0x01C5	; 0x8001c5 <rx_msg+0xa>
    74d4:	d0 91 c6 01 	lds	r29, 0x01C6	; 0x8001c6 <rx_msg+0xb>
    74d8:	8b eb       	ldi	r24, 0xBB	; 187
    74da:	91 e0       	ldi	r25, 0x01	; 1
    74dc:	0e 94 c9 3a 	call	0x7592	; 0x7592 <message_crc>
    74e0:	c8 17       	cp	r28, r24
    74e2:	d9 07       	cpc	r29, r25
    74e4:	09 f0       	breq	.+2      	; 0x74e8 <__vector_23+0x11e>
    74e6:	b1 cf       	rjmp	.-158    	; 0x744a <__vector_23+0x80>
}

#else// BOOTLOADER

static inline void process_message() {
    kilo_message_rx(&rx_msg, &rx_dist);
    74e8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <kilo_message_rx>
    74ec:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <kilo_message_rx+0x1>
    74f0:	65 eb       	ldi	r22, 0xB5	; 181
    74f2:	71 e0       	ldi	r23, 0x01	; 1
    74f4:	8b eb       	ldi	r24, 0xBB	; 187
    74f6:	91 e0       	ldi	r25, 0x01	; 1
    74f8:	09 95       	icall
                    }
                }
            }
        }
    }
}
    74fa:	a7 cf       	rjmp	.-178    	; 0x744a <__vector_23+0x80>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    74fc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    7500:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    7504:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
    7508:	40 93 b2 01 	sts	0x01B2, r20	; 0x8001b2 <rx_leadingbit>
            rx_leadingbyte = 1;
    750c:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <rx_leadingbyte>
            rx_busy = 0;
    7510:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rx_busy>
            adc_trigger_high_gain();
    7514:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    7518:	83 ea       	ldi	r24, 0xA3	; 163
    751a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    751e:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    7522:	93 cf       	rjmp	.-218    	; 0x744a <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    7524:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    7528:	86 fd       	sbrc	r24, 6
    752a:	fc cf       	rjmp	.-8      	; 0x7524 <__vector_23+0x15a>
                    rx_dist.low_gain = ADCW;
    752c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    7530:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    7534:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <rx_dist+0x1>
    7538:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <rx_dist>
                    adc_trigger_high_gain();
    753c:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    7540:	83 ea       	ldi	r24, 0xA3	; 163
    7542:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    7546:	81 e0       	ldi	r24, 0x01	; 1
    7548:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
    754c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rx_bytevalue>
    7550:	99 23       	and	r25, r25
    7552:	d1 f0       	breq	.+52     	; 0x7588 <__vector_23+0x1be>
                        rx_timer_off();
    7554:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    7558:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    755c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    7560:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rx_leadingbyte>
                        rx_busy = 0;
    7564:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rx_busy>
    7568:	70 cf       	rjmp	.-288    	; 0x744a <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    756a:	21 e0       	ldi	r18, 0x01	; 1
    756c:	30 e0       	ldi	r19, 0x00	; 0
    756e:	a9 01       	movw	r20, r18
    7570:	02 c0       	rjmp	.+4      	; 0x7576 <__vector_23+0x1ac>
    7572:	44 0f       	add	r20, r20
    7574:	55 1f       	adc	r21, r21
    7576:	8a 95       	dec	r24
    7578:	e2 f7       	brpl	.-8      	; 0x7572 <__vector_23+0x1a8>
    757a:	ca 01       	movw	r24, r20
    757c:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <rx_bytevalue>
    7580:	89 2b       	or	r24, r25
    7582:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <rx_bytevalue>
    7586:	61 cf       	rjmp	.-318    	; 0x744a <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    7588:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <rx_leadingbyte>
                        rx_byteindex = 0;
    758c:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <rx_byteindex>
    7590:	5c cf       	rjmp	.-328    	; 0x744a <__vector_23+0x80>

00007592 <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    7592:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    7594:	80 81       	ld	r24, Z
    7596:	2f ef       	ldi	r18, 0xFF	; 255
    7598:	3f ef       	ldi	r19, 0xFF	; 255
    759a:	28 27       	eor	r18, r24
    759c:	02 2e       	mov	r0, r18
    759e:	22 95       	swap	r18
    75a0:	20 7f       	andi	r18, 0xF0	; 240
    75a2:	20 25       	eor	r18, r0
    75a4:	03 2e       	mov	r0, r19
    75a6:	32 2f       	mov	r19, r18
    75a8:	22 95       	swap	r18
    75aa:	2f 70       	andi	r18, 0x0F	; 15
    75ac:	02 26       	eor	r0, r18
    75ae:	26 95       	lsr	r18
    75b0:	32 27       	eor	r19, r18
    75b2:	23 27       	eor	r18, r19
    75b4:	22 0f       	add	r18, r18
    75b6:	22 0f       	add	r18, r18
    75b8:	22 0f       	add	r18, r18
    75ba:	20 25       	eor	r18, r0
    75bc:	81 81       	ldd	r24, Z+1	; 0x01
    75be:	28 27       	eor	r18, r24
    75c0:	02 2e       	mov	r0, r18
    75c2:	22 95       	swap	r18
    75c4:	20 7f       	andi	r18, 0xF0	; 240
    75c6:	20 25       	eor	r18, r0
    75c8:	03 2e       	mov	r0, r19
    75ca:	32 2f       	mov	r19, r18
    75cc:	22 95       	swap	r18
    75ce:	2f 70       	andi	r18, 0x0F	; 15
    75d0:	02 26       	eor	r0, r18
    75d2:	26 95       	lsr	r18
    75d4:	32 27       	eor	r19, r18
    75d6:	23 27       	eor	r18, r19
    75d8:	22 0f       	add	r18, r18
    75da:	22 0f       	add	r18, r18
    75dc:	22 0f       	add	r18, r18
    75de:	20 25       	eor	r18, r0
    75e0:	82 81       	ldd	r24, Z+2	; 0x02
    75e2:	28 27       	eor	r18, r24
    75e4:	02 2e       	mov	r0, r18
    75e6:	22 95       	swap	r18
    75e8:	20 7f       	andi	r18, 0xF0	; 240
    75ea:	20 25       	eor	r18, r0
    75ec:	03 2e       	mov	r0, r19
    75ee:	32 2f       	mov	r19, r18
    75f0:	22 95       	swap	r18
    75f2:	2f 70       	andi	r18, 0x0F	; 15
    75f4:	02 26       	eor	r0, r18
    75f6:	26 95       	lsr	r18
    75f8:	32 27       	eor	r19, r18
    75fa:	23 27       	eor	r18, r19
    75fc:	22 0f       	add	r18, r18
    75fe:	22 0f       	add	r18, r18
    7600:	22 0f       	add	r18, r18
    7602:	20 25       	eor	r18, r0
    7604:	83 81       	ldd	r24, Z+3	; 0x03
    7606:	28 27       	eor	r18, r24
    7608:	02 2e       	mov	r0, r18
    760a:	22 95       	swap	r18
    760c:	20 7f       	andi	r18, 0xF0	; 240
    760e:	20 25       	eor	r18, r0
    7610:	03 2e       	mov	r0, r19
    7612:	32 2f       	mov	r19, r18
    7614:	22 95       	swap	r18
    7616:	2f 70       	andi	r18, 0x0F	; 15
    7618:	02 26       	eor	r0, r18
    761a:	26 95       	lsr	r18
    761c:	32 27       	eor	r19, r18
    761e:	23 27       	eor	r18, r19
    7620:	22 0f       	add	r18, r18
    7622:	22 0f       	add	r18, r18
    7624:	22 0f       	add	r18, r18
    7626:	20 25       	eor	r18, r0
    7628:	84 81       	ldd	r24, Z+4	; 0x04
    762a:	28 27       	eor	r18, r24
    762c:	02 2e       	mov	r0, r18
    762e:	22 95       	swap	r18
    7630:	20 7f       	andi	r18, 0xF0	; 240
    7632:	20 25       	eor	r18, r0
    7634:	03 2e       	mov	r0, r19
    7636:	32 2f       	mov	r19, r18
    7638:	22 95       	swap	r18
    763a:	2f 70       	andi	r18, 0x0F	; 15
    763c:	02 26       	eor	r0, r18
    763e:	26 95       	lsr	r18
    7640:	32 27       	eor	r19, r18
    7642:	23 27       	eor	r18, r19
    7644:	22 0f       	add	r18, r18
    7646:	22 0f       	add	r18, r18
    7648:	22 0f       	add	r18, r18
    764a:	20 25       	eor	r18, r0
    764c:	85 81       	ldd	r24, Z+5	; 0x05
    764e:	28 27       	eor	r18, r24
    7650:	02 2e       	mov	r0, r18
    7652:	22 95       	swap	r18
    7654:	20 7f       	andi	r18, 0xF0	; 240
    7656:	20 25       	eor	r18, r0
    7658:	03 2e       	mov	r0, r19
    765a:	32 2f       	mov	r19, r18
    765c:	22 95       	swap	r18
    765e:	2f 70       	andi	r18, 0x0F	; 15
    7660:	02 26       	eor	r0, r18
    7662:	26 95       	lsr	r18
    7664:	32 27       	eor	r19, r18
    7666:	23 27       	eor	r18, r19
    7668:	22 0f       	add	r18, r18
    766a:	22 0f       	add	r18, r18
    766c:	22 0f       	add	r18, r18
    766e:	20 25       	eor	r18, r0
    7670:	86 81       	ldd	r24, Z+6	; 0x06
    7672:	28 27       	eor	r18, r24
    7674:	02 2e       	mov	r0, r18
    7676:	22 95       	swap	r18
    7678:	20 7f       	andi	r18, 0xF0	; 240
    767a:	20 25       	eor	r18, r0
    767c:	03 2e       	mov	r0, r19
    767e:	32 2f       	mov	r19, r18
    7680:	22 95       	swap	r18
    7682:	2f 70       	andi	r18, 0x0F	; 15
    7684:	02 26       	eor	r0, r18
    7686:	26 95       	lsr	r18
    7688:	32 27       	eor	r19, r18
    768a:	23 27       	eor	r18, r19
    768c:	22 0f       	add	r18, r18
    768e:	22 0f       	add	r18, r18
    7690:	22 0f       	add	r18, r18
    7692:	20 25       	eor	r18, r0
    7694:	87 81       	ldd	r24, Z+7	; 0x07
    7696:	28 27       	eor	r18, r24
    7698:	02 2e       	mov	r0, r18
    769a:	22 95       	swap	r18
    769c:	20 7f       	andi	r18, 0xF0	; 240
    769e:	20 25       	eor	r18, r0
    76a0:	03 2e       	mov	r0, r19
    76a2:	32 2f       	mov	r19, r18
    76a4:	22 95       	swap	r18
    76a6:	2f 70       	andi	r18, 0x0F	; 15
    76a8:	02 26       	eor	r0, r18
    76aa:	26 95       	lsr	r18
    76ac:	32 27       	eor	r19, r18
    76ae:	23 27       	eor	r18, r19
    76b0:	22 0f       	add	r18, r18
    76b2:	22 0f       	add	r18, r18
    76b4:	22 0f       	add	r18, r18
    76b6:	20 25       	eor	r18, r0
    76b8:	80 85       	ldd	r24, Z+8	; 0x08
    76ba:	28 27       	eor	r18, r24
    76bc:	02 2e       	mov	r0, r18
    76be:	22 95       	swap	r18
    76c0:	20 7f       	andi	r18, 0xF0	; 240
    76c2:	20 25       	eor	r18, r0
    76c4:	03 2e       	mov	r0, r19
    76c6:	32 2f       	mov	r19, r18
    76c8:	22 95       	swap	r18
    76ca:	2f 70       	andi	r18, 0x0F	; 15
    76cc:	02 26       	eor	r0, r18
    76ce:	26 95       	lsr	r18
    76d0:	32 27       	eor	r19, r18
    76d2:	23 27       	eor	r18, r19
    76d4:	22 0f       	add	r18, r18
    76d6:	22 0f       	add	r18, r18
    76d8:	22 0f       	add	r18, r18
    76da:	20 25       	eor	r18, r0
    76dc:	41 85       	ldd	r20, Z+9	; 0x09
    76de:	c9 01       	movw	r24, r18
    76e0:	84 27       	eor	r24, r20
    76e2:	08 2e       	mov	r0, r24
    76e4:	82 95       	swap	r24
    76e6:	80 7f       	andi	r24, 0xF0	; 240
    76e8:	80 25       	eor	r24, r0
    76ea:	09 2e       	mov	r0, r25
    76ec:	98 2f       	mov	r25, r24
    76ee:	82 95       	swap	r24
    76f0:	8f 70       	andi	r24, 0x0F	; 15
    76f2:	08 26       	eor	r0, r24
    76f4:	86 95       	lsr	r24
    76f6:	98 27       	eor	r25, r24
    76f8:	89 27       	eor	r24, r25
    76fa:	88 0f       	add	r24, r24
    76fc:	88 0f       	add	r24, r24
    76fe:	88 0f       	add	r24, r24
    7700:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    7702:	08 95       	ret

00007704 <main>:
            goto_program();
    }
}

int main() {
    cli();
    7704:	f8 94       	cli
    // move interrupt vectors to bootloader interupts
    MCUCR = (1<<IVCE);
    7706:	81 e0       	ldi	r24, 0x01	; 1
    7708:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    770a:	82 e0       	ldi	r24, 0x02	; 2
    770c:	85 bf       	out	0x35, r24	; 53
    770e:	8c e1       	ldi	r24, 0x1C	; 28
    7710:	e8 e0       	ldi	r30, 0x08	; 8
    7712:	f1 e0       	ldi	r31, 0x01	; 1
    7714:	df 01       	movw	r26, r30
    7716:	1d 92       	st	X+, r1
    7718:	8a 95       	dec	r24
    771a:	e9 f7       	brne	.-6      	; 0x7716 <main+0x12>
    // initalize variables
    BF_init(page_table);
    page_total = 220;
    771c:	8c ed       	ldi	r24, 0xDC	; 220
    771e:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <page_total>
    page_count = 0;
    7722:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <page_count>
    page_address = 0;
    7726:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <page_address>
    page_byte_count = 0;
    772a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <page_byte_count+0x1>
    772e:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <page_byte_count>
    sei();
    7732:	78 94       	sei
    kilo_message_rx = message_rx;
    7734:	83 e5       	ldi	r24, 0x53	; 83
    7736:	98 e3       	ldi	r25, 0x38	; 56
    7738:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <kilo_message_rx+0x1>
    773c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <kilo_message_rx>
    // initialize hardware
    kilo_init();
    7740:	0e 94 45 39 	call	0x728a	; 0x728a <kilo_init>

    // flash blue led
    while(1) {
        set_color(RGB(0,0,3));
    7744:	80 e3       	ldi	r24, 0x30	; 48
    7746:	0e 94 9f 39 	call	0x733e	; 0x733e <set_color>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    774a:	8f e0       	ldi	r24, 0x0F	; 15
    774c:	97 e2       	ldi	r25, 0x27	; 39
    774e:	01 97       	sbiw	r24, 0x01	; 1
    7750:	f1 f7       	brne	.-4      	; 0x774e <main+0x4a>
    7752:	00 c0       	rjmp	.+0      	; 0x7754 <main+0x50>
    7754:	00 00       	nop
        _delay_ms(5);
        set_color(RGB(0,0,0));
    7756:	80 e0       	ldi	r24, 0x00	; 0
    7758:	0e 94 9f 39 	call	0x733e	; 0x733e <set_color>
    775c:	9f ef       	ldi	r25, 0xFF	; 255
    775e:	a9 e6       	ldi	r26, 0x69	; 105
    7760:	b8 e1       	ldi	r27, 0x18	; 24
    7762:	91 50       	subi	r25, 0x01	; 1
    7764:	a0 40       	sbci	r26, 0x00	; 0
    7766:	b0 40       	sbci	r27, 0x00	; 0
    7768:	e1 f7       	brne	.-8      	; 0x7762 <main+0x5e>
    776a:	00 c0       	rjmp	.+0      	; 0x776c <main+0x68>
    776c:	00 00       	nop
    776e:	ea cf       	rjmp	.-44     	; 0x7744 <main+0x40>

00007770 <__umulhisi3>:
    7770:	a2 9f       	mul	r26, r18
    7772:	b0 01       	movw	r22, r0
    7774:	b3 9f       	mul	r27, r19
    7776:	c0 01       	movw	r24, r0
    7778:	a3 9f       	mul	r26, r19
    777a:	70 0d       	add	r23, r0
    777c:	81 1d       	adc	r24, r1
    777e:	11 24       	eor	r1, r1
    7780:	91 1d       	adc	r25, r1
    7782:	b2 9f       	mul	r27, r18
    7784:	70 0d       	add	r23, r0
    7786:	81 1d       	adc	r24, r1
    7788:	11 24       	eor	r1, r1
    778a:	91 1d       	adc	r25, r1
    778c:	08 95       	ret

0000778e <eeprom_read_byte>:
    778e:	f9 99       	sbic	0x1f, 1	; 31
    7790:	fe cf       	rjmp	.-4      	; 0x778e <eeprom_read_byte>
    7792:	92 bd       	out	0x22, r25	; 34
    7794:	81 bd       	out	0x21, r24	; 33
    7796:	f8 9a       	sbi	0x1f, 0	; 31
    7798:	99 27       	eor	r25, r25
    779a:	80 b5       	in	r24, 0x20	; 32
    779c:	08 95       	ret

0000779e <_exit>:
    779e:	f8 94       	cli

000077a0 <__stop_program>:
    77a0:	ff cf       	rjmp	.-2      	; 0x77a0 <__stop_program>

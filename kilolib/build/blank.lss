
build/blank.elf:     format de fichier elf32-avr


Déassemblage de la section .text :

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
       c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      18:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <__vector_6>
      1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      2c:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_11>
      30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      38:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__vector_14>
      3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      5c:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__vector_23>
      60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
      68:	eb 01       	movw	r28, r22
      6a:	cf 01       	movw	r24, r30
      6c:	a3 01       	movw	r20, r6
      6e:	9a 01       	movw	r18, r20
      70:	a0 01       	movw	r20, r0
      72:	49 02       	muls	r20, r25
      74:	3e 02       	muls	r19, r30
      76:	be 08       	sbc	r11, r14
      78:	9e 07       	cpc	r25, r30
      7a:	9e 07       	cpc	r25, r30
      7c:	bb 08       	sbc	r11, r11
      7e:	c7 08       	sbc	r12, r7
      80:	b7 08       	sbc	r11, r7
      82:	ce 08       	sbc	r12, r14
      84:	ca 08       	sbc	r12, r10
      86:	d2 08       	sbc	r13, r2
      88:	8a 08       	sbc	r8, r10
      8a:	5c 08       	sbc	r5, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <wdt_init>:
#ifndef BOOTLOADER
// Ensure that wdt is inactive after system reset.
void wdt_init(void) __attribute__((naked)) __attribute__((section(".init3")));

void wdt_init(void) {
    MCUSR = 0;
      98:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
      9a:	0f b6       	in	r0, 0x3f	; 63
      9c:	f8 94       	cli
      9e:	a8 95       	wdr
      a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      a4:	88 61       	ori	r24, 0x18	; 24
      a6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
      aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
      ae:	0f be       	out	0x3f, r0	; 63

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e2 e8       	ldi	r30, 0x82	; 130
      b8:	fb e1       	ldi	r31, 0x1B	; 27
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0
      c0:	ac 30       	cpi	r26, 0x0C	; 12
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	ac e0       	ldi	r26, 0x0C	; 12
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	ae 36       	cpi	r26, 0x6E	; 110
      d2:	b2 07       	cpc	r27, r18
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	0e 94 a1 0a 	call	0x1542	; 0x1542 <main>
      da:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <_exit>

000000de <__bad_interrupt>:
      de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <setup>:
#include "kilolib.h"

void setup() {
      e2:	08 95       	ret

000000e4 <loop>:
    // put your setup code here, will be run once at the beginning
}

void loop() {
    // put your main code here, will be run repeatedly
    set_color(RGB(1,0,0));
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	0e 94 18 07 	call	0xe30	; 0xe30 <set_color>
    delay(100);
      ea:	84 e6       	ldi	r24, 0x64	; 100
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <delay>
    set_color(RGB(0,1,0));
      f2:	84 e0       	ldi	r24, 0x04	; 4
      f4:	0e 94 18 07 	call	0xe30	; 0xe30 <set_color>
    delay(100);
      f8:	84 e6       	ldi	r24, 0x64	; 100
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0c 94 d8 02 	jmp	0x5b0	; 0x5b0 <delay>

00000100 <message_rx_dummy>:
/* Number of clock cycles for an entire message. */
#define rx_msgcycles (11*rx_bitcycles)

typedef void (*AddressPointer_t)(void) __attribute__ ((noreturn));

void message_rx_dummy(message_t *m, distance_measurement_t *d) { }
     100:	08 95       	ret

00000102 <message_tx_dummy>:
message_t *message_tx_dummy() { return NULL; }
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	08 95       	ret

00000108 <message_tx_success_dummy>:
void message_tx_success_dummy() {}
     108:	08 95       	ret

0000010a <kilo_init>:
    RUNNING,
    CHARGING,
    MOVING
} kilo_state;

void kilo_init() {
     10a:	df 92       	push	r13
     10c:	ef 92       	push	r14
     10e:	ff 92       	push	r15
     110:	0f 93       	push	r16
     112:	1f 93       	push	r17
     114:	cf 93       	push	r28
     116:	df 93       	push	r29
    cli();
     118:	f8 94       	cli

    ports_off();
     11a:	14 b8       	out	0x04, r1	; 4
     11c:	17 b8       	out	0x07, r1	; 7
     11e:	1a b8       	out	0x0a, r1	; 10
     120:	15 b8       	out	0x05, r1	; 5
     122:	18 b8       	out	0x08, r1	; 8
     124:	1b b8       	out	0x0b, r1	; 11
    ports_on();
     126:	52 9a       	sbi	0x0a, 2	; 10
     128:	5a 9a       	sbi	0x0b, 2	; 11
    tx_timer_setup();
     12a:	14 bc       	out	0x24, r1	; 36
     12c:	85 e0       	ldi	r24, 0x05	; 5
     12e:	85 bd       	out	0x25, r24	; 37
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	87 bd       	out	0x27, r24	; 39
     134:	82 e0       	ldi	r24, 0x02	; 2
     136:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    rx_timer_setup();
     13a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     13e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     142:	2f e8       	ldi	r18, 0x8F	; 143
     144:	3b e0       	ldi	r19, 0x0B	; 11
     146:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     14a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     14e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    motors_setup();
     152:	53 98       	cbi	0x0a, 3	; 10
     154:	23 98       	cbi	0x04, 3	; 4
     156:	91 ea       	ldi	r25, 0xA1	; 161
     158:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     15c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     160:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     164:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    acomp_setup();
     168:	8b e0       	ldi	r24, 0x0B	; 11
     16a:	80 bf       	out	0x30, r24	; 48
     16c:	83 e0       	ldi	r24, 0x03	; 3
     16e:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
    adc_setup();
     172:	86 e0       	ldi	r24, 0x06	; 6
     174:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     178:	83 e8       	ldi	r24, 0x83	; 131
     17a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     17e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     182:	80 64       	ori	r24, 0x40	; 64
     184:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     188:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     18c:	86 fd       	sbrc	r24, 6
     18e:	fc cf       	rjmp	.-8      	; 0x188 <kilo_init+0x7e>
    adc_trigger_high_gain();
     190:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     194:	83 ea       	ldi	r24, 0xA3	; 163
     196:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>

    uint8_t osccal = eeprom_read_byte(EEPROM_OSCCAL);
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
    if (osccal != 0xFF)
     1a8:	8f 3f       	cpi	r24, 0xFF	; 255
     1aa:	11 f0       	breq	.+4      	; 0x1b0 <kilo_init+0xa6>
        OSCCAL = osccal;
     1ac:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>

    rx_busy = 0;
     1b0:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    rx_leadingbit = 1;
     1b4:	c1 e0       	ldi	r28, 0x01	; 1
     1b6:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     1ba:	c0 93 54 01 	sts	0x0154, r28	; 0x800154 <rx_leadingbyte>
    rx_byteindex = 0;
     1be:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
    rx_bytevalue = 0;
     1c2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
#ifndef BOOTLOADER
    tx_mask = eeprom_read_byte(EEPROM_TXMASK);
     1c6:	80 e9       	ldi	r24, 0x90	; 144
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     1ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <tx_mask>
    if (tx_mask & ~TX_MASK_MAX)
     1d2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <tx_mask>
     1d6:	88 73       	andi	r24, 0x38	; 56
     1d8:	11 f0       	breq	.+4      	; 0x1de <kilo_init+0xd4>
        tx_mask = TX_MASK_MIN;
     1da:	c0 93 2d 01 	sts	0x012D, r28	; 0x80012d <tx_mask>
    tx_clock = 0;
     1de:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     1e2:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
    tx_increment = 255;
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     1ee:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    kilo_ticks = 0;
     1f2:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <kilo_ticks>
     1f6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <kilo_ticks+0x1>
     1fa:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <kilo_ticks+0x2>
     1fe:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <kilo_ticks+0x3>
    kilo_state = IDLE;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    kilo_tx_period = 3906;
     208:	82 e4       	ldi	r24, 0x42	; 66
     20a:	9f e0       	ldi	r25, 0x0F	; 15
     20c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <kilo_tx_period+0x1>
     210:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <kilo_tx_period>
    kilo_uid = eeprom_read_byte(EEPROM_UID) | eeprom_read_byte(EEPROM_UID+1)<<8;
     214:	80 eb       	ldi	r24, 0xB0	; 176
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     21c:	c8 2f       	mov	r28, r24
     21e:	81 eb       	ldi	r24, 0xB1	; 177
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     226:	2c 2f       	mov	r18, r28
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	38 2b       	or	r19, r24
     22c:	30 93 6a 01 	sts	0x016A, r19	; 0x80016a <kilo_uid+0x1>
     230:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <kilo_uid>
    kilo_turn_left = eeprom_read_byte(EEPROM_LEFT_ROTATE);
     234:	85 e0       	ldi	r24, 0x05	; 5
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     23c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     248:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
     24c:	8c e0       	ldi	r24, 0x0C	; 12
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     254:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_straight_left>
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);
     258:	84 e1       	ldi	r24, 0x14	; 20
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     260:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <kilo_straight_right>
     264:	58 e3       	ldi	r21, 0x38	; 56
     266:	e5 2e       	mov	r14, r21
     268:	51 e0       	ldi	r21, 0x01	; 1
     26a:	f5 2e       	mov	r15, r21
     26c:	01 e1       	ldi	r16, 0x11	; 17
     26e:	11 e0       	ldi	r17, 0x01	; 1
     270:	c0 e2       	ldi	r28, 0x20	; 32
     272:	d0 e0       	ldi	r29, 0x00	; 0

    uint8_t i;
    for (i=0; i<14; i++) {
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
     274:	ce 01       	movw	r24, r28
     276:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     27a:	d8 2e       	mov	r13, r24
     27c:	ce 01       	movw	r24, r28
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     284:	2d 2d       	mov	r18, r13
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	32 2f       	mov	r19, r18
     28a:	22 27       	eor	r18, r18
     28c:	28 2b       	or	r18, r24
     28e:	f7 01       	movw	r30, r14
     290:	21 93       	st	Z+, r18
     292:	31 93       	st	Z+, r19
     294:	7f 01       	movw	r14, r30
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
     296:	ce 01       	movw	r24, r28
     298:	c0 96       	adiw	r24, 0x30	; 48
     29a:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     29e:	d8 2e       	mov	r13, r24
     2a0:	ce 01       	movw	r24, r28
     2a2:	c1 96       	adiw	r24, 0x31	; 49
     2a4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <eeprom_read_byte>
     2a8:	2d 2d       	mov	r18, r13
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	32 2f       	mov	r19, r18
     2ae:	22 27       	eor	r18, r18
     2b0:	28 2b       	or	r18, r24
     2b2:	f8 01       	movw	r30, r16
     2b4:	21 93       	st	Z+, r18
     2b6:	31 93       	st	Z+, r19
     2b8:	8f 01       	movw	r16, r30
     2ba:	22 96       	adiw	r28, 0x02	; 2
    kilo_turn_right = eeprom_read_byte(EEPROM_RIGHT_ROTATE);
    kilo_straight_left = eeprom_read_byte(EEPROM_LEFT_STRAIGHT);
    kilo_straight_right = eeprom_read_byte(EEPROM_RIGHT_STRAIGHT);

    uint8_t i;
    for (i=0; i<14; i++) {
     2bc:	cc 33       	cpi	r28, 0x3C	; 60
     2be:	d1 05       	cpc	r29, r1
     2c0:	c9 f6       	brne	.-78     	; 0x274 <kilo_init+0x16a>
        kilo_irlow[i]=(eeprom_read_byte(EEPROM_IRLOW + i*2) <<8) | eeprom_read_byte(EEPROM_IRLOW + i*2+1);
        kilo_irhigh[i]=(eeprom_read_byte(EEPROM_IRHIGH + i*2) <<8) | eeprom_read_byte(EEPROM_IRHIGH + i*2+1);
    }
#endif
    sei();
     2c2:	78 94       	sei
}
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	08 95       	ret

000002d4 <__vector_6>:

/**
 * Watchdog timer interrupt.
 * Used to wakeup from low power sleep mode.
 */
ISR(WDT_vect) {
     2d4:	1f 92       	push	r1
     2d6:	0f 92       	push	r0
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	0f 92       	push	r0
     2dc:	11 24       	eor	r1, r1
     2de:	8f 93       	push	r24
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	a8 95       	wdr
     2e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2ea:	88 61       	ori	r24, 0x18	; 24
     2ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f0:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f4:	0f be       	out	0x3f, r0	; 63
    wdt_disable();
}
     2f6:	8f 91       	pop	r24
     2f8:	0f 90       	pop	r0
     2fa:	0f be       	out	0x3f, r0	; 63
     2fc:	0f 90       	pop	r0
     2fe:	1f 90       	pop	r1
     300:	18 95       	reti

00000302 <kilo_start>:
    MOVE_STRAIGHT
};

static volatile uint8_t prev_motion = MOVE_STOP, cur_motion = MOVE_STOP;

void kilo_start(void (*setup)(void), void (*loop)(void)) {
     302:	3c 01       	movw	r6, r24
     304:	eb 01       	movw	r28, r22
    int16_t voltage;
    uint8_t has_setup = 0;
     306:	10 e0       	ldi	r17, 0x00	; 0
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
    OCR2B = cw;
     308:	99 24       	eor	r9, r9
     30a:	9a 94       	dec	r9
            case SETUP:
                if (!has_setup) {
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	c8 2e       	mov	r12, r24

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
        cli();                                    // disable interrupts
        adc_setup_conversion(6);
     310:	96 e0       	ldi	r25, 0x06	; 6
     312:	a9 2e       	mov	r10, r25
     314:	23 e8       	ldi	r18, 0x83	; 131
     316:	b2 2e       	mov	r11, r18
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     318:	38 e1       	ldi	r19, 0x18	; 24
     31a:	d3 2e       	mov	r13, r19
     31c:	49 e2       	ldi	r20, 0x29	; 41
     31e:	e4 2e       	mov	r14, r20

void kilo_start(void (*setup)(void), void (*loop)(void)) {
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
     320:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <kilo_state>
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	e7 30       	cpi	r30, 0x07	; 7
     328:	f1 05       	cpc	r31, r1
     32a:	d0 f7       	brcc	.-12     	; 0x320 <kilo_start+0x1e>
     32c:	ec 5c       	subi	r30, 0xCC	; 204
     32e:	ff 4f       	sbci	r31, 0xFF	; 255
     330:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__tablejump2__>
                    _delay_ms(200);
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
     334:	11 23       	and	r17, r17
     336:	09 f4       	brne	.+2      	; 0x33a <kilo_start+0x38>
     338:	05 c1       	rjmp	.+522    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
                    setup();
                    has_setup = 1;
                }
                kilo_state = RUNNING;
     33a:	c0 92 0f 01 	sts	0x010F, r12	; 0x80010f <kilo_state>
     33e:	11 e0       	ldi	r17, 0x01	; 1
            case RUNNING:
                loop();
     340:	fe 01       	movw	r30, r28
     342:	09 95       	icall
                break;
     344:	ed cf       	rjmp	.-38     	; 0x320 <kilo_start+0x1e>
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     346:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     34a:	81 11       	cpse	r24, r1
     34c:	05 c1       	rjmp	.+522    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
        cli();                                    // disable interrupts
     34e:	f8 94       	cli
        adc_setup_conversion(6);
     350:	a0 92 7c 00 	sts	0x007C, r10	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     354:	b0 92 7a 00 	sts	0x007A, r11	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     358:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     35c:	80 64       	ori	r24, 0x40	; 64
     35e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     362:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     366:	86 fd       	sbrc	r24, 6
     368:	fc cf       	rjmp	.-8      	; 0x362 <kilo_start+0x60>
        voltage = ADCW;                           // store AD result
     36a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     36e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     372:	78 94       	sei
                set_color(RGB(0,0,0));
                _delay_ms(200);
                break;
            case BATTERY:
                voltage = get_voltage();
                if(voltage > 682)
     374:	8b 3a       	cpi	r24, 0xAB	; 171
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	9e 07       	cpc	r25, r30
     37a:	0c f0       	brlt	.+2      	; 0x37e <kilo_start+0x7c>
     37c:	e6 c0       	rjmp	.+460    	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
                    set_color(RGB(0,3,0));
                else if(voltage > 648)
     37e:	89 38       	cpi	r24, 0x89	; 137
     380:	f2 e0       	ldi	r31, 0x02	; 2
     382:	9f 07       	cpc	r25, r31
     384:	0c f0       	brlt	.+2      	; 0x388 <kilo_start+0x86>
     386:	ef c0       	rjmp	.+478    	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
                    set_color(RGB(0,0,3));
                else if(voltage > 614)
     388:	87 36       	cpi	r24, 0x67	; 103
     38a:	92 40       	sbci	r25, 0x02	; 2
     38c:	0c f4       	brge	.+2      	; 0x390 <kilo_start+0x8e>
     38e:	e4 c0       	rjmp	.+456    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     390:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     392:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     394:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     396:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     398:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     39a:	3c 98       	cbi	0x07, 4	; 7
     39c:	c1 cf       	rjmp	.-126    	; 0x320 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     39e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     3a0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     3a2:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     3a4:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3a6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3a8:	3c 98       	cbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3aa:	ef ec       	ldi	r30, 0xCF	; 207
     3ac:	f7 e0       	ldi	r31, 0x07	; 7
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <kilo_start+0xac>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <kilo_start+0xb2>
     3b4:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     3b6:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     3b8:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     3ba:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     3bc:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     3be:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     3c0:	3c 98       	cbi	0x07, 4	; 7
     3c2:	ff ef       	ldi	r31, 0xFF	; 255
     3c4:	21 ee       	ldi	r18, 0xE1	; 225
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	f1 50       	subi	r31, 0x01	; 1
     3ca:	20 40       	sbci	r18, 0x00	; 0
     3cc:	80 40       	sbci	r24, 0x00	; 0
     3ce:	e1 f7       	brne	.-8      	; 0x3c8 <kilo_start+0xc6>
     3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <kilo_start+0xd0>
     3d2:	00 00       	nop
     3d4:	a5 cf       	rjmp	.-182    	; 0x320 <kilo_start+0x1e>
    int16_t voltage;
    uint8_t has_setup = 0;
    while (1) {
        switch(kilo_state) {
            case SLEEPING:
                cli();
     3d6:	f8 94       	cli
                acomp_off();
     3d8:	80 b7       	in	r24, 0x30	; 48
     3da:	87 7f       	andi	r24, 0xF7	; 247
     3dc:	80 bf       	out	0x30, r24	; 48
                adc_off();
     3de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     3e2:	8f 77       	andi	r24, 0x7F	; 127
     3e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
                ports_off();
     3e8:	14 b8       	out	0x04, r1	; 4
     3ea:	17 b8       	out	0x07, r1	; 7
     3ec:	1a b8       	out	0x0a, r1	; 10
     3ee:	15 b8       	out	0x05, r1	; 5
     3f0:	18 b8       	out	0x08, r1	; 8
     3f2:	1b b8       	out	0x0b, r1	; 11
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	f8 94       	cli
     3f8:	a8 95       	wdr
     3fa:	d0 92 60 00 	sts	0x0060, r13	; 0x800060 <__DATA_REGION_ORIGIN__>
     3fe:	0f be       	out	0x3f, r0	; 63
     400:	e0 92 60 00 	sts	0x0060, r14	; 0x800060 <__DATA_REGION_ORIGIN__>
                wdt_enable(WDTO_8S);
                WDTCSR |= (1<<WDIE);
     404:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     408:	80 64       	ori	r24, 0x40	; 64
     40a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     40e:	83 b7       	in	r24, 0x33	; 51
     410:	81 7f       	andi	r24, 0xF1	; 241
     412:	84 60       	ori	r24, 0x04	; 4
     414:	83 bf       	out	0x33, r24	; 51
                cli();
     416:	f8 94       	cli
                sleep_enable();
     418:	83 b7       	in	r24, 0x33	; 51
     41a:	81 60       	ori	r24, 0x01	; 1
     41c:	83 bf       	out	0x33, r24	; 51
                sei();
     41e:	78 94       	sei
                sleep_cpu();
     420:	88 95       	sleep
                sleep_disable();
     422:	83 b7       	in	r24, 0x33	; 51
     424:	8e 7f       	andi	r24, 0xFE	; 254
     426:	83 bf       	out	0x33, r24	; 51
                sei();
     428:	78 94       	sei
                rx_busy = 0;
     42a:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
                ports_on();
     42e:	52 9a       	sbi	0x0a, 2	; 10
     430:	5a 9a       	sbi	0x0b, 2	; 11
                adc_on();
     432:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     436:	80 68       	ori	r24, 0x80	; 128
     438:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43c:	87 e5       	ldi	r24, 0x57	; 87
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	01 97       	sbiw	r24, 0x01	; 1
     442:	f1 f7       	brne	.-4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     444:	00 c0       	rjmp	.+0      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     446:	00 00       	nop
                _delay_us(300);
                acomp_on();
     448:	80 b7       	in	r24, 0x30	; 48
     44a:	88 61       	ori	r24, 0x18	; 24
     44c:	80 bf       	out	0x30, r24	; 48

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     44e:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     450:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     452:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     454:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     456:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     458:	3c 9a       	sbi	0x07, 4	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45a:	ef e1       	ldi	r30, 0x1F	; 31
     45c:	fe e4       	ldi	r31, 0x4E	; 78
     45e:	31 97       	sbiw	r30, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     464:	00 00       	nop
                _delay_us(300);
                acomp_on();

                set_color(RGB(3,3,3));
                _delay_ms(10);
                if (rx_busy) {
     466:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     46a:	81 11       	cpse	r24, r1
     46c:	5b c0       	rjmp	.+182    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     46e:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     470:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     472:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     474:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     476:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     478:	3c 98       	cbi	0x07, 4	; 7
     47a:	52 cf       	rjmp	.-348    	; 0x320 <kilo_start+0x1e>
                kilo_state = RUNNING;
            case RUNNING:
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
     47c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     480:	81 11       	cpse	r24, r1
     482:	25 c0       	rjmp	.+74     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     484:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     488:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                loop();
                break;
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
     48c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
     490:	47 cf       	rjmp	.-370    	; 0x320 <kilo_start+0x1e>
                    set_color(RGB(3,3,0));
                else
                    set_color(RGB(3,0,0));
                break;
            case CHARGING:
                if (is_charging()) {
     492:	48 99       	sbic	0x09, 0	; 9
     494:	ec cf       	rjmp	.-40     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     496:	55 9a       	sbi	0x0a, 5	; 10
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     498:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     49a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     49c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     49e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4a0:	3c 98       	cbi	0x07, 4	; 7
     4a2:	8f ec       	ldi	r24, 0xCF	; 207
     4a4:	97 e0       	ldi	r25, 0x07	; 7
     4a6:	01 97       	sbiw	r24, 0x01	; 1
     4a8:	f1 f7       	brne	.-4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4aa:	00 c0       	rjmp	.+0      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4ac:	00 00       	nop

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     4ae:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     4b0:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     4b2:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     4b4:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     4b6:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     4b8:	3c 98       	cbi	0x07, 4	; 7
     4ba:	9f ef       	ldi	r25, 0xFF	; 255
     4bc:	e1 ee       	ldi	r30, 0xE1	; 225
     4be:	f4 e0       	ldi	r31, 0x04	; 4
     4c0:	91 50       	subi	r25, 0x01	; 1
     4c2:	e0 40       	sbci	r30, 0x00	; 0
     4c4:	f0 40       	sbci	r31, 0x00	; 0
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4c8:	00 c0       	rjmp	.+0      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
     4ca:	00 00       	nop
     4cc:	29 cf       	rjmp	.-430    	; 0x320 <kilo_start+0x1e>
            case MOVING:
                if (cur_motion == MOVE_STOP) {
                    set_motors(0,0);
                    prev_motion = MOVE_STOP;
                } else {
                    if (cur_motion != prev_motion) {
     4ce:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <cur_motion>
     4d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <prev_motion>
     4d6:	98 17       	cp	r25, r24
     4d8:	09 f4       	brne	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4da:	22 cf       	rjmp	.-444    	; 0x320 <kilo_start+0x1e>
                        prev_motion = cur_motion;
     4dc:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     4e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <prev_motion>
                        if (cur_motion == MOVE_LEFT) {
     4e4:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ec:	50 c0       	rjmp	.+160    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4ee:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4f2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     4f6:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
     4fa:	82 30       	cpi	r24, 0x02	; 2
     4fc:	d9 f1       	breq	.+118    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     4fe:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     502:	90 92 b4 00 	sts	0x00B4, r9	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     506:	8f e2       	ldi	r24, 0x2F	; 47
     508:	95 e7       	ldi	r25, 0x75	; 117
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	f1 f7       	brne	.-4      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     510:	00 00       	nop
                            set_motors(0, kilo_turn_right);
                        } else {
                            set_motors(0, 0xFF);
                            set_motors(0xFF, 0xFF);
                            _delay_ms(15);
                            set_motors(kilo_straight_left, kilo_straight_right);
     512:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <kilo_straight_right>
     516:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <kilo_straight_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     51a:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     51e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     522:	fe ce       	rjmp	.-516    	; 0x320 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     524:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     526:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     528:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     52a:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     52c:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     52e:	3c 98       	cbi	0x07, 4	; 7
     530:	ff ef       	ldi	r31, 0xFF	; 255
     532:	20 e7       	ldi	r18, 0x70	; 112
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	f1 50       	subi	r31, 0x01	; 1
     538:	20 40       	sbci	r18, 0x00	; 0
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
     540:	00 00       	nop
     542:	95 cf       	rjmp	.-214    	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                } else
                    set_color(RGB(0,0,0));
                break;
            case SETUP:
                if (!has_setup) {
                    setup();
     544:	f3 01       	movw	r30, r6
     546:	09 95       	icall
     548:	f8 ce       	rjmp	.-528    	; 0x33a <kilo_start+0x38>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     54a:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     54c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
     54e:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
        DDRC |= (1<<2);
     550:	3a 9a       	sbi	0x07, 2	; 7
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     552:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     554:	3c 98       	cbi	0x07, 4	; 7
     556:	e4 ce       	rjmp	.-568    	; 0x320 <kilo_start+0x1e>

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
     558:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
        DDRD |= (1<<4);
     55a:	54 9a       	sbi	0x0a, 4	; 10
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     55c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     55e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     560:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     562:	3c 98       	cbi	0x07, 4	; 7
     564:	dd ce       	rjmp	.-582    	; 0x320 <kilo_start+0x1e>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     566:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     568:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     56a:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     56c:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
     56e:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
        DDRC |= (1<<4);
     570:	3c 9a       	sbi	0x07, 4	; 7
     572:	d6 ce       	rjmp	.-596    	; 0x320 <kilo_start+0x1e>
     574:	ef e2       	ldi	r30, 0x2F	; 47
     576:	f5 e7       	ldi	r31, 0x75	; 117
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	f1 f7       	brne	.-4      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
     57c:	00 c0       	rjmp	.+0      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     57e:	00 00       	nop
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
                        } else if (cur_motion == MOVE_RIGHT) {
                            set_motors(0, 0xFF);
                            _delay_ms(15);
                            set_motors(0, kilo_turn_right);
     580:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <kilo_turn_right>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     584:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     588:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     58c:	c9 ce       	rjmp	.-622    	; 0x320 <kilo_start+0x1e>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     58e:	90 92 b3 00 	sts	0x00B3, r9	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     592:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     596:	8f e2       	ldi	r24, 0x2F	; 47
     598:	95 e7       	ldi	r25, 0x75	; 117
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     5a0:	00 00       	nop
                    if (cur_motion != prev_motion) {
                        prev_motion = cur_motion;
                        if (cur_motion == MOVE_LEFT) {
                            set_motors(0xFF, 0);
                            _delay_ms(15);
                            set_motors(kilo_turn_left, 0);
     5a2:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <kilo_turn_left>
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5a6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     5aa:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     5ae:	b8 ce       	rjmp	.-656    	; 0x320 <kilo_start+0x1e>

000005b0 <delay>:
        default:
            break;
    }
}

void delay(uint16_t ms) {
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <delay+0x10>
     5b2:	ef ec       	ldi	r30, 0xCF	; 207
     5b4:	f7 e0       	ldi	r31, 0x07	; 7
     5b6:	31 97       	sbiw	r30, 0x01	; 1
     5b8:	f1 f7       	brne	.-4      	; 0x5b6 <delay+0x6>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <delay+0xc>
     5bc:	00 00       	nop
    while (ms > 0) {
        _delay_ms(1);
        ms--;
     5be:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5c0:	00 97       	sbiw	r24, 0x00	; 0
     5c2:	b9 f7       	brne	.-18     	; 0x5b2 <delay+0x2>
     5c4:	08 95       	ret

000005c6 <set_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5c6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     5ca:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     5ce:	08 95       	ret

000005d0 <spinup_motors>:
        ms--;
    }
}

void set_motors(uint8_t ccw, uint8_t cw) {
    OCR2A = ccw;
     5d0:	8f ef       	ldi	r24, 0xFF	; 255
     5d2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    OCR2B = cw;
     5d6:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     5da:	8f e0       	ldi	r24, 0x0F	; 15
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	ef ec       	ldi	r30, 0xCF	; 207
     5e0:	f7 e0       	ldi	r31, 0x07	; 7
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <spinup_motors+0x12>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <spinup_motors+0x18>
     5e8:	00 00       	nop
     5ea:	01 97       	sbiw	r24, 0x01	; 1
            break;
    }
}

void delay(uint16_t ms) {
    while (ms > 0) {
     5ec:	c1 f7       	brne	.-16     	; 0x5de <spinup_motors+0xe>
}

void spinup_motors() {
    set_motors(255, 255);
    delay(15);
}
     5ee:	08 95       	ret

000005f0 <get_ambientlight>:

int16_t get_ambientlight() {
    int16_t light = -1;
    if (!rx_busy) {
     5f0:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     5f4:	81 11       	cpse	r24, r1
     5f6:	1e c0       	rjmp	.+60     	; 0x634 <get_ambientlight+0x44>
        cli();
     5f8:	f8 94       	cli
        adc_setup_conversion(7);
     5fa:	87 e0       	ldi	r24, 0x07	; 7
     5fc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     600:	83 e8       	ldi	r24, 0x83	; 131
     602:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     606:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     60a:	80 64       	ori	r24, 0x40	; 64
     60c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     610:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     614:	86 fd       	sbrc	r24, 6
     616:	fc cf       	rjmp	.-8      	; 0x610 <get_ambientlight+0x20>
        light = ADCW;                             // store AD result
     618:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     61c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     620:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     624:	23 ea       	ldi	r18, 0xA3	; 163
     626:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     630:	78 94       	sei
     632:	08 95       	ret
    set_motors(255, 255);
    delay(15);
}

int16_t get_ambientlight() {
    int16_t light = -1;
     634:	8f ef       	ldi	r24, 0xFF	; 255
     636:	9f ef       	ldi	r25, 0xFF	; 255
        light = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return light;
}
     638:	08 95       	ret

0000063a <get_temperature>:

int16_t get_temperature() {
    int16_t temp = -1;
    if (!rx_busy) {
     63a:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     63e:	81 11       	cpse	r24, r1
     640:	1e c0       	rjmp	.+60     	; 0x67e <get_temperature+0x44>
        cli();
     642:	f8 94       	cli
        ADMUX = (1<<3)|(1<<6)|(1<<7);
     644:	88 ec       	ldi	r24, 0xC8	; 200
     646:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
        ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     64a:	87 e8       	ldi	r24, 0x87	; 135
     64c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     650:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     654:	80 64       	ori	r24, 0x40	; 64
     656:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     65a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     65e:	86 fd       	sbrc	r24, 6
     660:	fc cf       	rjmp	.-8      	; 0x65a <get_temperature+0x20>
        temp = ADCW;                             // store AD result
     662:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     666:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
     66a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     66e:	23 ea       	ldi	r18, 0xA3	; 163
     670:	20 93 7a 00 	sts	0x007A, r18	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     674:	21 e0       	ldi	r18, 0x01	; 1
     676:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
        sei();                                    // reenable interrupts
     67a:	78 94       	sei
     67c:	08 95       	ret
    }
    return light;
}

int16_t get_temperature() {
    int16_t temp = -1;
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	9f ef       	ldi	r25, 0xFF	; 255
        temp = ADCW;                             // store AD result
        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return temp;
}
     682:	08 95       	ret

00000684 <rand_hard>:

uint8_t rand_hard() {
     684:	0f 93       	push	r16
     686:	1f 93       	push	r17
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	f0 e0       	ldi	r31, 0x00	; 0
    uint8_t num = 0;
     690:	80 e0       	ldi	r24, 0x00	; 0
            adc_finish_conversion();
            a = ADCW&0x1;
            adc_start_conversion();
            adc_finish_conversion();
            b = ADCW&0x1;
            adc_trigger_high_gain();
     692:	03 ea       	ldi	r16, 0xA3	; 163
     694:	11 e0       	ldi	r17, 0x01	; 1
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
            adc_setup_conversion(6);
     696:	d6 e0       	ldi	r29, 0x06	; 6
     698:	c3 e8       	ldi	r28, 0x83	; 131
            adc_trigger_high_gain();
            sei();
            tries++;
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
     69a:	a1 e0       	ldi	r26, 0x01	; 1
     69c:	b0 e0       	ldi	r27, 0x00	; 0
    }
    return temp;
}

uint8_t rand_hard() {
    uint8_t num = 0;
     69e:	60 e8       	ldi	r22, 0x80	; 128
     6a0:	70 e0       	ldi	r23, 0x00	; 0
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
        tries = 0;
        do {
            cli();
     6a2:	f8 94       	cli
            adc_setup_conversion(6);
     6a4:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6a8:	c0 93 7a 00 	sts	0x007A, r28	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_start_conversion();
     6ac:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6b0:	90 64       	ori	r25, 0x40	; 64
     6b2:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     6b6:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6ba:	96 fd       	sbrc	r25, 6
     6bc:	fc cf       	rjmp	.-8      	; 0x6b6 <rand_hard+0x32>
            a = ADCW&0x1;
     6be:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     6c2:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     6c6:	21 70       	andi	r18, 0x01	; 1
            adc_start_conversion();
     6c8:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6cc:	90 64       	ori	r25, 0x40	; 64
     6ce:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
            adc_finish_conversion();
     6d2:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6d6:	96 fd       	sbrc	r25, 6
     6d8:	fc cf       	rjmp	.-8      	; 0x6d2 <rand_hard+0x4e>
            b = ADCW&0x1;
     6da:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     6de:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
            adc_trigger_high_gain();
     6e2:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     6e6:	00 93 7a 00 	sts	0x007A, r16	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     6ea:	10 93 7b 00 	sts	0x007B, r17	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
            sei();
     6ee:	78 94       	sei
            tries++;
        } while (a == b && tries < 128);
     6f0:	41 70       	andi	r20, 0x01	; 1
     6f2:	24 13       	cpse	r18, r20
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <rand_hard+0x78>
     6f6:	61 50       	subi	r22, 0x01	; 1
     6f8:	71 09       	sbc	r23, r1
     6fa:	99 f6       	brne	.-90     	; 0x6a2 <rand_hard+0x1e>
        if (a)
     6fc:	22 23       	and	r18, r18
     6fe:	39 f0       	breq	.+14     	; 0x70e <rand_hard+0x8a>
            num |= (1<<i);
     700:	9d 01       	movw	r18, r26
     702:	0e 2e       	mov	r0, r30
     704:	01 c0       	rjmp	.+2      	; 0x708 <rand_hard+0x84>
     706:	22 0f       	add	r18, r18
     708:	0a 94       	dec	r0
     70a:	ea f7       	brpl	.-6      	; 0x706 <rand_hard+0x82>
     70c:	82 2b       	or	r24, r18
     70e:	31 96       	adiw	r30, 0x01	; 1
}

uint8_t rand_hard() {
    uint8_t num = 0;
    uint8_t a, b, i, tries;
    for (i = 0; i < 8; i++) {
     710:	e8 30       	cpi	r30, 0x08	; 8
     712:	f1 05       	cpc	r31, r1
     714:	09 f0       	breq	.+2      	; 0x718 <rand_hard+0x94>
     716:	c3 cf       	rjmp	.-122    	; 0x69e <rand_hard+0x1a>
        } while (a == b && tries < 128);
        if (a)
            num |= (1<<i);
    }
    return num;
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <rand_soft>:

static uint8_t seed=0xaa, accumulator = 0;

uint8_t rand_soft() {
    seed ^= seed<<3;
     722:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     726:	98 2f       	mov	r25, r24
     728:	99 0f       	add	r25, r25
     72a:	99 0f       	add	r25, r25
     72c:	99 0f       	add	r25, r25
     72e:	89 27       	eor	r24, r25
    seed ^= seed>>5;
    seed ^= accumulator++>>2;
     730:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
     734:	21 e0       	ldi	r18, 0x01	; 1
     736:	29 0f       	add	r18, r25
     738:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__data_end>
     73c:	28 2f       	mov	r18, r24
     73e:	22 95       	swap	r18
     740:	26 95       	lsr	r18
     742:	27 70       	andi	r18, 0x07	; 7
     744:	82 27       	eor	r24, r18
     746:	96 95       	lsr	r25
     748:	96 95       	lsr	r25
     74a:	89 27       	eor	r24, r25
     74c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    return seed;
}
     750:	08 95       	ret

00000752 <rand_seed>:

void rand_seed(uint8_t s) {
    seed = s;
     752:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     756:	08 95       	ret

00000758 <get_voltage>:
}

int16_t get_voltage() {
    int16_t voltage=-1;
    if (!rx_busy) {
     758:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     75c:	81 11       	cpse	r24, r1
     75e:	16 c0       	rjmp	.+44     	; 0x78c <get_voltage+0x34>
        cli();                                    // disable interrupts
     760:	f8 94       	cli
        adc_setup_conversion(6);
     762:	86 e0       	ldi	r24, 0x06	; 6
     764:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     768:	83 e8       	ldi	r24, 0x83	; 131
     76a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_start_conversion();
     76e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     772:	80 64       	ori	r24, 0x40	; 64
     774:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
        adc_finish_conversion();
     778:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     77c:	86 fd       	sbrc	r24, 6
     77e:	fc cf       	rjmp	.-8      	; 0x778 <get_voltage+0x20>
        voltage = ADCW;                           // store AD result
     780:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     784:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
     788:	78 94       	sei
     78a:	08 95       	ret
void rand_seed(uint8_t s) {
    seed = s;
}

int16_t get_voltage() {
    int16_t voltage=-1;
     78c:	8f ef       	ldi	r24, 0xFF	; 255
     78e:	9f ef       	ldi	r25, 0xFF	; 255
        voltage = ADCW;                           // store AD result
//        adc_trigger_high_gain();                     // set AD to measure high gain (for distance sensing)
        sei();                                    // reenable interrupts
    }
    return voltage;
}
     790:	08 95       	ret

00000792 <estimate_distance>:

uint8_t estimate_distance(const distance_measurement_t *dist) {
     792:	2f 92       	push	r2
     794:	3f 92       	push	r3
     796:	4f 92       	push	r4
     798:	5f 92       	push	r5
     79a:	6f 92       	push	r6
     79c:	7f 92       	push	r7
     79e:	8f 92       	push	r8
     7a0:	9f 92       	push	r9
     7a2:	af 92       	push	r10
     7a4:	bf 92       	push	r11
     7a6:	cf 92       	push	r12
     7a8:	df 92       	push	r13
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
     7b0:	1f 93       	push	r17
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <estimate_distance+0x26>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <estimate_distance+0x28>
     7ba:	00 d0       	rcall	.+0      	; 0x7bc <estimate_distance+0x2a>
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	1c 01       	movw	r2, r24
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
     7c2:	dc 01       	movw	r26, r24
     7c4:	12 96       	adiw	r26, 0x02	; 2
     7c6:	0d 90       	ld	r0, X+
     7c8:	bc 91       	ld	r27, X
     7ca:	a0 2d       	mov	r26, r0
     7cc:	be 83       	std	Y+6, r27	; 0x06
     7ce:	ad 83       	std	Y+5, r26	; 0x05
     7d0:	a4 38       	cpi	r26, 0x84	; 132
     7d2:	e3 e0       	ldi	r30, 0x03	; 3
     7d4:	be 07       	cpc	r27, r30
     7d6:	0c f0       	brlt	.+2      	; 0x7da <estimate_distance+0x48>
     7d8:	cb c0       	rjmp	.+406    	; 0x970 <__stack+0x71>
        if (dist->high_gain > kilo_irhigh[0]) {
     7da:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <kilo_irhigh>
     7de:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <kilo_irhigh+0x1>
     7e2:	8a 17       	cp	r24, r26
     7e4:	9b 07       	cpc	r25, r27
     7e6:	08 f4       	brcc	.+2      	; 0x7ea <estimate_distance+0x58>
     7e8:	8c c1       	rjmp	.+792    	; 0xb02 <__stack+0x203>
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
                if (dist->high_gain > kilo_irhigh[i]) {
     7ea:	00 91 13 01 	lds	r16, 0x0113	; 0x800113 <kilo_irhigh+0x2>
     7ee:	10 91 14 01 	lds	r17, 0x0114	; 0x800114 <kilo_irhigh+0x3>
     7f2:	0a 17       	cp	r16, r26
     7f4:	1b 07       	cpc	r17, r27
     7f6:	08 f4       	brcc	.+2      	; 0x7fa <estimate_distance+0x68>
     7f8:	22 c2       	rjmp	.+1092   	; 0xc3e <__stack+0x33f>
     7fa:	00 91 15 01 	lds	r16, 0x0115	; 0x800115 <kilo_irhigh+0x4>
     7fe:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <kilo_irhigh+0x5>
     802:	0a 17       	cp	r16, r26
     804:	1b 07       	cpc	r17, r27
     806:	08 f4       	brcc	.+2      	; 0x80a <estimate_distance+0x78>
     808:	28 c2       	rjmp	.+1104   	; 0xc5a <__stack+0x35b>
     80a:	00 91 17 01 	lds	r16, 0x0117	; 0x800117 <kilo_irhigh+0x6>
     80e:	10 91 18 01 	lds	r17, 0x0118	; 0x800118 <kilo_irhigh+0x7>
     812:	0a 17       	cp	r16, r26
     814:	1b 07       	cpc	r17, r27
     816:	08 f4       	brcc	.+2      	; 0x81a <estimate_distance+0x88>
     818:	24 c2       	rjmp	.+1096   	; 0xc62 <__stack+0x363>
     81a:	00 91 19 01 	lds	r16, 0x0119	; 0x800119 <kilo_irhigh+0x8>
     81e:	10 91 1a 01 	lds	r17, 0x011A	; 0x80011a <kilo_irhigh+0x9>
     822:	0a 17       	cp	r16, r26
     824:	1b 07       	cpc	r17, r27
     826:	08 f4       	brcc	.+2      	; 0x82a <estimate_distance+0x98>
     828:	25 c2       	rjmp	.+1098   	; 0xc74 <__stack+0x375>
     82a:	00 91 1b 01 	lds	r16, 0x011B	; 0x80011b <kilo_irhigh+0xa>
     82e:	10 91 1c 01 	lds	r17, 0x011C	; 0x80011c <kilo_irhigh+0xb>
     832:	0a 17       	cp	r16, r26
     834:	1b 07       	cpc	r17, r27
     836:	08 f4       	brcc	.+2      	; 0x83a <estimate_distance+0xa8>
     838:	e6 c1       	rjmp	.+972    	; 0xc06 <__stack+0x307>
     83a:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <kilo_irhigh+0xc>
     83e:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <kilo_irhigh+0xd>
     842:	0a 17       	cp	r16, r26
     844:	1b 07       	cpc	r17, r27
     846:	08 f4       	brcc	.+2      	; 0x84a <estimate_distance+0xb8>
     848:	1e c2       	rjmp	.+1084   	; 0xc86 <__stack+0x387>
     84a:	00 91 1f 01 	lds	r16, 0x011F	; 0x80011f <kilo_irhigh+0xe>
     84e:	10 91 20 01 	lds	r17, 0x0120	; 0x800120 <kilo_irhigh+0xf>
     852:	0a 17       	cp	r16, r26
     854:	1b 07       	cpc	r17, r27
     856:	08 f4       	brcc	.+2      	; 0x85a <estimate_distance+0xc8>
     858:	1f c2       	rjmp	.+1086   	; 0xc98 <__stack+0x399>
     85a:	00 91 21 01 	lds	r16, 0x0121	; 0x800121 <kilo_irhigh+0x10>
     85e:	10 91 22 01 	lds	r17, 0x0122	; 0x800122 <kilo_irhigh+0x11>
     862:	0a 17       	cp	r16, r26
     864:	1b 07       	cpc	r17, r27
     866:	08 f4       	brcc	.+2      	; 0x86a <estimate_distance+0xd8>
     868:	25 c2       	rjmp	.+1098   	; 0xcb4 <__stack+0x3b5>
     86a:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <kilo_irhigh+0x12>
     86e:	10 91 24 01 	lds	r17, 0x0124	; 0x800124 <kilo_irhigh+0x13>
     872:	0a 17       	cp	r16, r26
     874:	1b 07       	cpc	r17, r27
     876:	08 f4       	brcc	.+2      	; 0x87a <estimate_distance+0xe8>
     878:	26 c2       	rjmp	.+1100   	; 0xcc6 <__stack+0x3c7>
     87a:	00 91 25 01 	lds	r16, 0x0125	; 0x800125 <kilo_irhigh+0x14>
     87e:	10 91 26 01 	lds	r17, 0x0126	; 0x800126 <kilo_irhigh+0x15>
     882:	0a 17       	cp	r16, r26
     884:	1b 07       	cpc	r17, r27
     886:	08 f4       	brcc	.+2      	; 0x88a <estimate_distance+0xf8>
     888:	22 c2       	rjmp	.+1092   	; 0xcce <__stack+0x3cf>
     88a:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <kilo_irhigh+0x16>
     88e:	10 91 28 01 	lds	r17, 0x0128	; 0x800128 <kilo_irhigh+0x17>
     892:	0a 17       	cp	r16, r26
     894:	1b 07       	cpc	r17, r27
     896:	08 f4       	brcc	.+2      	; 0x89a <estimate_distance+0x108>
     898:	23 c2       	rjmp	.+1094   	; 0xce0 <__stack+0x3e1>
     89a:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <kilo_irhigh+0x18>
     89e:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <kilo_irhigh+0x19>
     8a2:	0a 17       	cp	r16, r26
     8a4:	1b 07       	cpc	r17, r27
     8a6:	08 f4       	brcc	.+2      	; 0x8aa <estimate_distance+0x118>
     8a8:	24 c2       	rjmp	.+1096   	; 0xcf2 <__stack+0x3f3>
     8aa:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <kilo_irhigh+0x1a>
     8ae:	10 91 2c 01 	lds	r17, 0x012C	; 0x80012c <kilo_irhigh+0x1b>
     8b2:	0a 17       	cp	r16, r26
     8b4:	1b 07       	cpc	r17, r27
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <estimate_distance+0x128>
     8b8:	25 c2       	rjmp	.+1098   	; 0xd04 <__stack+0x405>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a0 ed       	ldi	r26, 0xD0	; 208
     8c0:	b0 e4       	ldi	r27, 0x40	; 64
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	ab 83       	std	Y+3, r26	; 0x03
     8c8:	bc 83       	std	Y+4, r27	; 0x04
     8ca:	2c e0       	ldi	r18, 0x0C	; 12
     8cc:	e2 2e       	mov	r14, r18
     8ce:	f1 2c       	mov	r15, r1
                    index_high = i;
                    break;
                }
            }

            double slope=(kilo_irhigh[index_high]-kilo_irhigh[index_high-1])/0.5;
     8d0:	f7 01       	movw	r30, r14
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	ef 5e       	subi	r30, 0xEF	; 239
     8d8:	fe 4f       	sbci	r31, 0xFE	; 254
     8da:	80 81       	ld	r24, Z
     8dc:	91 81       	ldd	r25, Z+1	; 0x01
     8de:	b8 01       	movw	r22, r16
     8e0:	68 1b       	sub	r22, r24
     8e2:	79 0b       	sbc	r23, r25
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
     8f0:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     8f4:	6b 01       	movw	r12, r22
     8f6:	7c 01       	movw	r14, r24
            double b=(double)kilo_irhigh[index_high]-(double)slope*((double)index_high*(double)0.5+(double)0.0);
            b=(((((double)dist->high_gain-(double)b)*(double)10)));
     8f8:	ad 81       	ldd	r26, Y+5	; 0x05
     8fa:	be 81       	ldd	r27, Y+6	; 0x06
     8fc:	bd 01       	movw	r22, r26
     8fe:	bb 0f       	add	r27, r27
     900:	88 0b       	sbc	r24, r24
     902:	99 0b       	sbc	r25, r25
     904:	0e 94 00 0c 	call	0x1800	; 0x1800 <__floatsisf>
     908:	4b 01       	movw	r8, r22
     90a:	5c 01       	movw	r10, r24
     90c:	b8 01       	movw	r22, r16
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     916:	2b 01       	movw	r4, r22
     918:	3c 01       	movw	r6, r24
     91a:	29 81       	ldd	r18, Y+1	; 0x01
     91c:	3a 81       	ldd	r19, Y+2	; 0x02
     91e:	4b 81       	ldd	r20, Y+3	; 0x03
     920:	5c 81       	ldd	r21, Y+4	; 0x04
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
     92e:	c3 01       	movw	r24, r6
     930:	b2 01       	movw	r22, r4
     932:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c5 01       	movw	r24, r10
     93c:	b4 01       	movw	r22, r8
     93e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
            b=((int)((int)b/(int)slope));
            dist_high=b;
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     94e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     952:	8b 01       	movw	r16, r22
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     95c:	ab 01       	movw	r20, r22
     95e:	bc 01       	movw	r22, r24
     960:	c8 01       	movw	r24, r16
     962:	ba 01       	movw	r22, r20
     964:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
     968:	69 83       	std	Y+1, r22	; 0x01
     96a:	ed 81       	ldd	r30, Y+5	; 0x05
     96c:	fe 81       	ldd	r31, Y+6	; 0x06
     96e:	cb c0       	rjmp	.+406    	; 0xb06 <__stack+0x207>
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     970:	dc 01       	movw	r26, r24
     972:	cd 90       	ld	r12, X+
     974:	dc 90       	ld	r13, X
     976:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <kilo_irlow>
     97a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <kilo_irlow+0x1>
     97e:	8c 15       	cp	r24, r12
     980:	9d 05       	cpc	r25, r13
     982:	08 f4       	brcc	.+2      	; 0x986 <__stack+0x87>
     984:	df c0       	rjmp	.+446    	; 0xb44 <__stack+0x245>

uint8_t estimate_distance(const distance_measurement_t *dist) {
    uint8_t i;
    uint8_t index_high=13;
    uint8_t index_low=255;
    uint8_t dist_high=255;
     986:	bf ef       	ldi	r27, 0xFF	; 255
     988:	b9 83       	std	Y+1, r27	; 0x01
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     98a:	00 91 3a 01 	lds	r16, 0x013A	; 0x80013a <kilo_irlow+0x2>
     98e:	10 91 3b 01 	lds	r17, 0x013B	; 0x80013b <kilo_irlow+0x3>
     992:	0c 15       	cp	r16, r12
     994:	1d 05       	cpc	r17, r13
     996:	08 f4       	brcc	.+2      	; 0x99a <__stack+0x9b>
     998:	56 c1       	rjmp	.+684    	; 0xc46 <__stack+0x347>
     99a:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <kilo_irlow+0x4>
     99e:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <kilo_irlow+0x5>
     9a2:	0c 15       	cp	r16, r12
     9a4:	1d 05       	cpc	r17, r13
     9a6:	08 f4       	brcc	.+2      	; 0x9aa <__stack+0xab>
     9a8:	53 c1       	rjmp	.+678    	; 0xc50 <__stack+0x351>
     9aa:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <kilo_irlow+0x6>
     9ae:	10 91 3f 01 	lds	r17, 0x013F	; 0x80013f <kilo_irlow+0x7>
     9b2:	0c 15       	cp	r16, r12
     9b4:	1d 05       	cpc	r17, r13
     9b6:	08 f4       	brcc	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	58 c1       	rjmp	.+688    	; 0xc6a <__stack+0x36b>
     9ba:	00 91 40 01 	lds	r16, 0x0140	; 0x800140 <kilo_irlow+0x8>
     9be:	10 91 41 01 	lds	r17, 0x0141	; 0x800141 <kilo_irlow+0x9>
     9c2:	0c 15       	cp	r16, r12
     9c4:	1d 05       	cpc	r17, r13
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <__stack+0xcb>
     9c8:	59 c1       	rjmp	.+690    	; 0xc7c <__stack+0x37d>
     9ca:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <kilo_irlow+0xa>
     9ce:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <kilo_irlow+0xb>
     9d2:	0c 15       	cp	r16, r12
     9d4:	1d 05       	cpc	r17, r13
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0xdb>
     9d8:	b7 c0       	rjmp	.+366    	; 0xb48 <__stack+0x249>
     9da:	00 91 44 01 	lds	r16, 0x0144	; 0x800144 <kilo_irlow+0xc>
     9de:	10 91 45 01 	lds	r17, 0x0145	; 0x800145 <kilo_irlow+0xd>
     9e2:	0c 15       	cp	r16, r12
     9e4:	1d 05       	cpc	r17, r13
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	52 c1       	rjmp	.+676    	; 0xc8e <__stack+0x38f>
     9ea:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <kilo_irlow+0xe>
     9ee:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <kilo_irlow+0xf>
     9f2:	0c 15       	cp	r16, r12
     9f4:	1d 05       	cpc	r17, r13
     9f6:	08 f4       	brcc	.+2      	; 0x9fa <__stack+0xfb>
     9f8:	53 c1       	rjmp	.+678    	; 0xca0 <__stack+0x3a1>
     9fa:	00 91 48 01 	lds	r16, 0x0148	; 0x800148 <kilo_irlow+0x10>
     9fe:	10 91 49 01 	lds	r17, 0x0149	; 0x800149 <kilo_irlow+0x11>
     a02:	0c 15       	cp	r16, r12
     a04:	1d 05       	cpc	r17, r13
     a06:	08 f4       	brcc	.+2      	; 0xa0a <__stack+0x10b>
     a08:	50 c1       	rjmp	.+672    	; 0xcaa <__stack+0x3ab>
     a0a:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <kilo_irlow+0x12>
     a0e:	10 91 4b 01 	lds	r17, 0x014B	; 0x80014b <kilo_irlow+0x13>
     a12:	0c 15       	cp	r16, r12
     a14:	1d 05       	cpc	r17, r13
     a16:	08 f4       	brcc	.+2      	; 0xa1a <__stack+0x11b>
     a18:	51 c1       	rjmp	.+674    	; 0xcbc <__stack+0x3bd>
     a1a:	00 91 4c 01 	lds	r16, 0x014C	; 0x80014c <kilo_irlow+0x14>
     a1e:	10 91 4d 01 	lds	r17, 0x014D	; 0x80014d <kilo_irlow+0x15>
     a22:	0c 15       	cp	r16, r12
     a24:	1d 05       	cpc	r17, r13
     a26:	08 f4       	brcc	.+2      	; 0xa2a <__stack+0x12b>
     a28:	56 c1       	rjmp	.+684    	; 0xcd6 <__stack+0x3d7>
     a2a:	00 91 4e 01 	lds	r16, 0x014E	; 0x80014e <kilo_irlow+0x16>
     a2e:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <kilo_irlow+0x17>
     a32:	0c 15       	cp	r16, r12
     a34:	1d 05       	cpc	r17, r13
     a36:	08 f4       	brcc	.+2      	; 0xa3a <__stack+0x13b>
     a38:	57 c1       	rjmp	.+686    	; 0xce8 <__stack+0x3e9>
     a3a:	00 91 50 01 	lds	r16, 0x0150	; 0x800150 <kilo_irlow+0x18>
     a3e:	10 91 51 01 	lds	r17, 0x0151	; 0x800151 <kilo_irlow+0x19>
     a42:	0c 15       	cp	r16, r12
     a44:	1d 05       	cpc	r17, r13
     a46:	08 f4       	brcc	.+2      	; 0xa4a <__stack+0x14b>
     a48:	58 c1       	rjmp	.+688    	; 0xcfa <__stack+0x3fb>
     a4a:	00 91 52 01 	lds	r16, 0x0152	; 0x800152 <kilo_irlow+0x1a>
     a4e:	10 91 53 01 	lds	r17, 0x0153	; 0x800153 <kilo_irlow+0x1b>
     a52:	0c 15       	cp	r16, r12
     a54:	1d 05       	cpc	r17, r13
     a56:	08 f4       	brcc	.+2      	; 0xa5a <__stack+0x15b>
     a58:	59 c1       	rjmp	.+690    	; 0xd0c <__stack+0x40d>
                    break;
                }
            }

            if(index_low == 255) {
                dist_low=90;
     a5a:	1a e5       	ldi	r17, 0x5A	; 90
            }
        }
    }

    if (dist_low != 255) {
        if (dist_high != 255) {
     a5c:	b9 81       	ldd	r27, Y+1	; 0x01
     a5e:	bf 3f       	cpi	r27, 0xFF	; 255
     a60:	09 f4       	brne	.+2      	; 0xa64 <__stack+0x165>
     a62:	59 c1       	rjmp	.+690    	; 0xd16 <__stack+0x417>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
     a64:	ed 81       	ldd	r30, Y+5	; 0x05
     a66:	fe 81       	ldd	r31, Y+6	; 0x06
     a68:	bf 01       	movw	r22, r30
     a6a:	ff 0f       	add	r31, r31
     a6c:	88 0b       	sbc	r24, r24
     a6e:	99 0b       	sbc	r25, r25
     a70:	0e 94 00 0c 	call	0x1800	; 0x1800 <__floatsisf>
     a74:	4b 01       	movw	r8, r22
     a76:	5c 01       	movw	r10, r24
     a78:	f9 81       	ldd	r31, Y+1	; 0x01
     a7a:	6f 2f       	mov	r22, r31
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24
     a8a:	a5 01       	movw	r20, r10
     a8c:	94 01       	movw	r18, r8
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	81 e6       	ldi	r24, 0x61	; 97
     a94:	94 e4       	ldi	r25, 0x44	; 68
     a96:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     a9a:	9b 01       	movw	r18, r22
     a9c:	ac 01       	movw	r20, r24
     a9e:	c7 01       	movw	r24, r14
     aa0:	b6 01       	movw	r22, r12
     aa2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     aa6:	6b 01       	movw	r12, r22
     aa8:	7c 01       	movw	r14, r24
     aaa:	61 2f       	mov	r22, r17
     aac:	70 e0       	ldi	r23, 0x00	; 0
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     ab6:	2b 01       	movw	r4, r22
     ab8:	3c 01       	movw	r6, r24
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	4f e2       	ldi	r20, 0x2F	; 47
     ac0:	54 e4       	ldi	r21, 0x44	; 68
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     aca:	9b 01       	movw	r18, r22
     acc:	ac 01       	movw	r20, r24
     ace:	c3 01       	movw	r24, r6
     ad0:	b2 01       	movw	r22, r4
     ad2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	c7 01       	movw	r24, r14
     adc:	b6 01       	movw	r22, r12
     ade:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	48 e4       	ldi	r20, 0x48	; 72
     ae8:	53 e4       	ldi	r21, 0x43	; 67
     aea:	0e 94 56 0b 	call	0x16ac	; 0x16ac <__divsf3>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	44 e0       	ldi	r20, 0x04	; 4
     af4:	52 e4       	ldi	r21, 0x42	; 66
     af6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     afa:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixunssfsi>
     afe:	86 2f       	mov	r24, r22
     b00:	08 c0       	rjmp	.+16     	; 0xb12 <__stack+0x213>
    uint8_t dist_high=255;
    uint8_t dist_low=255;

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
     b02:	19 82       	std	Y+1, r1	; 0x01
     b04:	fd 01       	movw	r30, r26
            b=((int)((int)b/(int)slope));
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
     b06:	ed 3b       	cpi	r30, 0xBD	; 189
     b08:	f2 40       	sbci	r31, 0x02	; 2
     b0a:	0c f0       	brlt	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	07 c1       	rjmp	.+526    	; 0xd1c <__stack+0x41d>
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
        }
    } else {
        return 33 + dist_high;
     b0e:	89 81       	ldd	r24, Y+1	; 0x01
     b10:	8f 5d       	subi	r24, 0xDF	; 223
    }
}
     b12:	26 96       	adiw	r28, 0x06	; 6
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	9f 90       	pop	r9
     b34:	8f 90       	pop	r8
     b36:	7f 90       	pop	r7
     b38:	6f 90       	pop	r6
     b3a:	5f 90       	pop	r5
     b3c:	4f 90       	pop	r4
     b3e:	3f 90       	pop	r3
     b40:	2f 90       	pop	r2
     b42:	08 95       	ret
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     b44:	81 e2       	ldi	r24, 0x21	; 33

    if (dist_low != 255) {
        if (dist_high != 255) {
            return 33 + ((double)dist_high*(900.0-dist->high_gain)+(double)dist_low*(dist->high_gain-700.0))/200.0;
        } else {
            return 33 + dist_low;
     b46:	e5 cf       	rjmp	.-54     	; 0xb12 <__stack+0x213>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	3f 2e       	mov	r3, r31
                if(dist->low_gain > kilo_irlow[i]) {
     b4c:	e5 e0       	ldi	r30, 0x05	; 5
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
            }

            if(index_low == 255) {
                dist_low=90;
            } else {
                double slope=(kilo_irlow[index_low]-kilo_irlow[index_low-1])/0.5;
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ea 5c       	subi	r30, 0xCA	; 202
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	80 81       	ld	r24, Z
     b5a:	91 81       	ldd	r25, Z+1	; 0x01
     b5c:	b8 01       	movw	r22, r16
     b5e:	68 1b       	sub	r22, r24
     b60:	79 0b       	sbc	r23, r25
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     b6a:	9b 01       	movw	r18, r22
     b6c:	ac 01       	movw	r20, r24
     b6e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     b72:	4b 01       	movw	r8, r22
     b74:	5c 01       	movw	r10, r24
                double b=(double)kilo_irlow[index_low]-(double)slope*((double)index_low*(double)0.5+(double)0.0);
                b=(((((double)dist->low_gain-(double)b)*(double)10)));
     b76:	b6 01       	movw	r22, r12
     b78:	dd 0c       	add	r13, r13
     b7a:	88 0b       	sbc	r24, r24
     b7c:	99 0b       	sbc	r25, r25
     b7e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__floatsisf>
     b82:	2b 01       	movw	r4, r22
     b84:	3c 01       	movw	r6, r24
     b86:	b8 01       	movw	r22, r16
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     b90:	6b 01       	movw	r12, r22
     b92:	7c 01       	movw	r14, r24
     b94:	63 2d       	mov	r22, r3
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	a9 01       	movw	r20, r18
     bb2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     bb6:	a5 01       	movw	r20, r10
     bb8:	94 01       	movw	r18, r8
     bba:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
     bc2:	c7 01       	movw	r24, r14
     bc4:	b6 01       	movw	r22, r12
     bc6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c3 01       	movw	r24, r6
     bd0:	b2 01       	movw	r22, r4
     bd2:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__subsf3>
                b=((int)((int)b/(int)slope));
                dist_low=b;
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e2       	ldi	r20, 0x20	; 32
     bdc:	51 e4       	ldi	r21, 0x41	; 65
     bde:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     be2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     be6:	8b 01       	movw	r16, r22
     be8:	c5 01       	movw	r24, r10
     bea:	b4 01       	movw	r22, r8
     bec:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     bf0:	ab 01       	movw	r20, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	c8 01       	movw	r24, r16
     bf6:	ba 01       	movw	r22, r20
     bf8:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__divmodhi4>
     bfc:	16 2f       	mov	r17, r22
            }
        }
    }

    if (dist_low != 255) {
     bfe:	6f 3f       	cpi	r22, 0xFF	; 255
     c00:	09 f0       	breq	.+2      	; 0xc04 <__stack+0x305>
     c02:	2c cf       	rjmp	.-424    	; 0xa5c <__stack+0x15d>
     c04:	84 cf       	rjmp	.-248    	; 0xb0e <__stack+0x20f>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c06:	65 e0       	ldi	r22, 0x05	; 5
                if (dist->high_gain > kilo_irhigh[i]) {
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	7c 01       	movw	r14, r24
     c0e:	f1 e0       	ldi	r31, 0x01	; 1
     c10:	ef 1a       	sub	r14, r31
     c12:	f1 08       	sbc	r15, r1
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <__floatunsisf>
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	5f e3       	ldi	r21, 0x3F	; 63
     c26:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__mulsf3>
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	a9 01       	movw	r20, r18
     c30:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__addsf3>
     c34:	69 83       	std	Y+1, r22	; 0x01
     c36:	7a 83       	std	Y+2, r23	; 0x02
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	9c 83       	std	Y+4, r25	; 0x04
     c3c:	49 ce       	rjmp	.-878    	; 0x8d0 <estimate_distance+0x13e>
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	e3 cf       	rjmp	.-58     	; 0xc0c <__stack+0x30d>
    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
                if(dist->low_gain > kilo_irlow[i]) {
     c46:	33 24       	eor	r3, r3
     c48:	33 94       	inc	r3
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 cf       	rjmp	.-256    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c50:	82 e0       	ldi	r24, 0x02	; 2
     c52:	38 2e       	mov	r3, r24
                if(dist->low_gain > kilo_irlow[i]) {
     c54:	e2 e0       	ldi	r30, 0x02	; 2
     c56:	f0 e0       	ldi	r31, 0x00	; 0
     c58:	7b cf       	rjmp	.-266    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c5a:	62 e0       	ldi	r22, 0x02	; 2
                if (dist->high_gain > kilo_irhigh[i]) {
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	d5 cf       	rjmp	.-86     	; 0xc0c <__stack+0x30d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c62:	63 e0       	ldi	r22, 0x03	; 3
                if (dist->high_gain > kilo_irhigh[i]) {
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	d1 cf       	rjmp	.-94     	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c6a:	b3 e0       	ldi	r27, 0x03	; 3
     c6c:	3b 2e       	mov	r3, r27
                if(dist->low_gain > kilo_irlow[i]) {
     c6e:	e3 e0       	ldi	r30, 0x03	; 3
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	6e cf       	rjmp	.-292    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c74:	64 e0       	ldi	r22, 0x04	; 4
                if (dist->high_gain > kilo_irhigh[i]) {
     c76:	84 e0       	ldi	r24, 0x04	; 4
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	c8 cf       	rjmp	.-112    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c7c:	a4 e0       	ldi	r26, 0x04	; 4
     c7e:	3a 2e       	mov	r3, r26
                if(dist->low_gain > kilo_irlow[i]) {
     c80:	e4 e0       	ldi	r30, 0x04	; 4
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	65 cf       	rjmp	.-310    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c86:	66 e0       	ldi	r22, 0x06	; 6
                if (dist->high_gain > kilo_irhigh[i]) {
     c88:	86 e0       	ldi	r24, 0x06	; 6
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	bf cf       	rjmp	.-130    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     c8e:	e6 e0       	ldi	r30, 0x06	; 6
     c90:	3e 2e       	mov	r3, r30
                if(dist->low_gain > kilo_irlow[i]) {
     c92:	e6 e0       	ldi	r30, 0x06	; 6
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	5c cf       	rjmp	.-328    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     c98:	67 e0       	ldi	r22, 0x07	; 7
                if (dist->high_gain > kilo_irhigh[i]) {
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	b6 cf       	rjmp	.-148    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ca0:	77 e0       	ldi	r23, 0x07	; 7
     ca2:	37 2e       	mov	r3, r23
                if(dist->low_gain > kilo_irlow[i]) {
     ca4:	e7 e0       	ldi	r30, 0x07	; 7
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	53 cf       	rjmp	.-346    	; 0xb50 <__stack+0x251>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     caa:	68 e0       	ldi	r22, 0x08	; 8
     cac:	36 2e       	mov	r3, r22
                if(dist->low_gain > kilo_irlow[i]) {
     cae:	e8 e0       	ldi	r30, 0x08	; 8
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	4e cf       	rjmp	.-356    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cb4:	68 e0       	ldi	r22, 0x08	; 8
                if (dist->high_gain > kilo_irhigh[i]) {
     cb6:	88 e0       	ldi	r24, 0x08	; 8
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a8 cf       	rjmp	.-176    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cbc:	59 e0       	ldi	r21, 0x09	; 9
     cbe:	35 2e       	mov	r3, r21
                if(dist->low_gain > kilo_irlow[i]) {
     cc0:	e9 e0       	ldi	r30, 0x09	; 9
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	45 cf       	rjmp	.-374    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cc6:	69 e0       	ldi	r22, 0x09	; 9
                if (dist->high_gain > kilo_irhigh[i]) {
     cc8:	89 e0       	ldi	r24, 0x09	; 9
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	9f cf       	rjmp	.-194    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cce:	6a e0       	ldi	r22, 0x0A	; 10
                if (dist->high_gain > kilo_irhigh[i]) {
     cd0:	8a e0       	ldi	r24, 0x0A	; 10
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9b cf       	rjmp	.-202    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cd6:	4a e0       	ldi	r20, 0x0A	; 10
     cd8:	34 2e       	mov	r3, r20
                if(dist->low_gain > kilo_irlow[i]) {
     cda:	ea e0       	ldi	r30, 0x0A	; 10
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	38 cf       	rjmp	.-400    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     ce0:	6b e0       	ldi	r22, 0x0B	; 11
                if (dist->high_gain > kilo_irhigh[i]) {
     ce2:	8b e0       	ldi	r24, 0x0B	; 11
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	92 cf       	rjmp	.-220    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     ce8:	3b e0       	ldi	r19, 0x0B	; 11
     cea:	33 2e       	mov	r3, r19
                if(dist->low_gain > kilo_irlow[i]) {
     cec:	eb e0       	ldi	r30, 0x0B	; 11
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	2f cf       	rjmp	.-418    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     cf2:	6c e0       	ldi	r22, 0x0C	; 12
                if (dist->high_gain > kilo_irhigh[i]) {
     cf4:	8c e0       	ldi	r24, 0x0C	; 12
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	89 cf       	rjmp	.-238    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     cfa:	2c e0       	ldi	r18, 0x0C	; 12
     cfc:	32 2e       	mov	r3, r18
                if(dist->low_gain > kilo_irlow[i]) {
     cfe:	ec e0       	ldi	r30, 0x0C	; 12
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	26 cf       	rjmp	.-436    	; 0xb50 <__stack+0x251>

    if (dist->high_gain < 900) {
        if (dist->high_gain > kilo_irhigh[0]) {
            dist_high=0;
        } else {
            for (i=1; i<14; i++) {
     d04:	6d e0       	ldi	r22, 0x0D	; 13
                if (dist->high_gain > kilo_irhigh[i]) {
     d06:	8d e0       	ldi	r24, 0x0D	; 13
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	80 cf       	rjmp	.-256    	; 0xc0c <__stack+0x30d>

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
            dist_low=0;
        } else {
            for(i=1; i<14; i++) {
     d0c:	9d e0       	ldi	r25, 0x0D	; 13
     d0e:	39 2e       	mov	r3, r25
                if(dist->low_gain > kilo_irlow[i]) {
     d10:	ed e0       	ldi	r30, 0x0D	; 13
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	1d cf       	rjmp	.-454    	; 0xb50 <__stack+0x251>
     d16:	81 e2       	ldi	r24, 0x21	; 33
     d18:	81 0f       	add	r24, r17
     d1a:	fb ce       	rjmp	.-522    	; 0xb12 <__stack+0x213>
            dist_high=b;
        }
    }

    if (dist->high_gain > 700) {
        if (dist->low_gain > kilo_irlow[0]) {
     d1c:	d1 01       	movw	r26, r2
     d1e:	cd 90       	ld	r12, X+
     d20:	dc 90       	ld	r13, X
     d22:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <kilo_irlow>
     d26:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <kilo_irlow+0x1>
     d2a:	8c 15       	cp	r24, r12
     d2c:	9d 05       	cpc	r25, r13
     d2e:	08 f0       	brcs	.+2      	; 0xd32 <__stack+0x433>
     d30:	2c ce       	rjmp	.-936    	; 0x98a <__stack+0x8b>
            dist_low=0;
     d32:	10 e0       	ldi	r17, 0x00	; 0
     d34:	93 ce       	rjmp	.-730    	; 0xa5c <__stack+0x15d>

00000d36 <__vector_14>:

/**
 * Timer0 interrupt.
 * Used to send messages every kilo_tx_period ticks.
 */
ISR(TIMER0_COMPA_vect) {
     d36:	1f 92       	push	r1
     d38:	0f 92       	push	r0
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	0f 92       	push	r0
     d3e:	11 24       	eor	r1, r1
     d40:	2f 93       	push	r18
     d42:	3f 93       	push	r19
     d44:	4f 93       	push	r20
     d46:	5f 93       	push	r21
     d48:	6f 93       	push	r22
     d4a:	7f 93       	push	r23
     d4c:	8f 93       	push	r24
     d4e:	9f 93       	push	r25
     d50:	af 93       	push	r26
     d52:	bf 93       	push	r27
     d54:	ef 93       	push	r30
     d56:	ff 93       	push	r31
    tx_clock += tx_increment;
     d58:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     d5c:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     d60:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <tx_increment>
     d64:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <tx_increment+0x1>
     d68:	82 0f       	add	r24, r18
     d6a:	93 1f       	adc	r25, r19
     d6c:	90 93 58 01 	sts	0x0158, r25	; 0x800158 <tx_clock+0x1>
     d70:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <tx_clock>
    tx_increment = 0xFF;
     d74:	8f ef       	ldi	r24, 0xFF	; 255
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	90 93 56 01 	sts	0x0156, r25	; 0x800156 <tx_increment+0x1>
     d7c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <tx_increment>
    OCR0A = tx_increment;
     d80:	8f ef       	ldi	r24, 0xFF	; 255
     d82:	87 bd       	out	0x27, r24	; 39
    kilo_ticks++;
     d84:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <kilo_ticks>
     d88:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <kilo_ticks+0x1>
     d8c:	a0 91 35 01 	lds	r26, 0x0135	; 0x800135 <kilo_ticks+0x2>
     d90:	b0 91 36 01 	lds	r27, 0x0136	; 0x800136 <kilo_ticks+0x3>
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	a1 1d       	adc	r26, r1
     d98:	b1 1d       	adc	r27, r1
     d9a:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <kilo_ticks>
     d9e:	90 93 34 01 	sts	0x0134, r25	; 0x800134 <kilo_ticks+0x1>
     da2:	a0 93 35 01 	sts	0x0135, r26	; 0x800135 <kilo_ticks+0x2>
     da6:	b0 93 36 01 	sts	0x0136, r27	; 0x800136 <kilo_ticks+0x3>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
     daa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <rx_busy>
     dae:	81 11       	cpse	r24, r1
     db0:	0f c0       	rjmp	.+30     	; 0xdd0 <__vector_14+0x9a>
     db2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <kilo_tx_period>
     db6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <kilo_tx_period+0x1>
     dba:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <tx_clock>
     dbe:	30 91 58 01 	lds	r19, 0x0158	; 0x800158 <tx_clock+0x1>
     dc2:	82 17       	cp	r24, r18
     dc4:	93 07       	cpc	r25, r19
     dc6:	20 f4       	brcc	.+8      	; 0xdd0 <__vector_14+0x9a>
     dc8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
     dcc:	84 30       	cpi	r24, 0x04	; 4
     dce:	89 f0       	breq	.+34     	; 0xdf2 <__vector_14+0xbc>
                tx_increment = rand()&0xFF;
                OCR0A = tx_increment;
            }
        }
    }
}
     dd0:	ff 91       	pop	r31
     dd2:	ef 91       	pop	r30
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	7f 91       	pop	r23
     dde:	6f 91       	pop	r22
     de0:	5f 91       	pop	r21
     de2:	4f 91       	pop	r20
     de4:	3f 91       	pop	r19
     de6:	2f 91       	pop	r18
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	0f 90       	pop	r0
     dee:	1f 90       	pop	r1
     df0:	18 95       	reti
    tx_increment = 0xFF;
    OCR0A = tx_increment;
    kilo_ticks++;

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
     df2:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <kilo_message_tx>
     df6:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <kilo_message_tx+0x1>
     dfa:	09 95       	icall
        if (msg) {
     dfc:	00 97       	sbiw	r24, 0x00	; 0
     dfe:	41 f3       	breq	.-48     	; 0xdd0 <__vector_14+0x9a>
            if (message_send(msg)) {
     e00:	0e 94 1e 0a 	call	0x143c	; 0x143c <message_send>
     e04:	81 11       	cpse	r24, r1
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <__vector_14+0xe6>
                kilo_message_tx_success();
                tx_clock = 0;
            } else {
                tx_increment = rand()&0xFF;
     e08:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <rand>
     e0c:	9c 01       	movw	r18, r24
     e0e:	33 27       	eor	r19, r19
     e10:	30 93 56 01 	sts	0x0156, r19	; 0x800156 <tx_increment+0x1>
     e14:	20 93 55 01 	sts	0x0155, r18	; 0x800155 <tx_increment>
                OCR0A = tx_increment;
     e18:	87 bd       	out	0x27, r24	; 39
            }
        }
    }
}
     e1a:	da cf       	rjmp	.-76     	; 0xdd0 <__vector_14+0x9a>

    if(!rx_busy && tx_clock>kilo_tx_period && kilo_state == RUNNING) {
        message_t *msg = kilo_message_tx();
        if (msg) {
            if (message_send(msg)) {
                kilo_message_tx_success();
     e1c:	e0 91 01 01 	lds	r30, 0x0101	; 0x800101 <kilo_message_tx_success>
     e20:	f0 91 02 01 	lds	r31, 0x0102	; 0x800102 <kilo_message_tx_success+0x1>
     e24:	09 95       	icall
                tx_clock = 0;
     e26:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <tx_clock+0x1>
     e2a:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <tx_clock>
     e2e:	d0 cf       	rjmp	.-96     	; 0xdd0 <__vector_14+0x9a>

00000e30 <set_color>:
EMPTY_INTERRUPT(TIMER0_COMPA_vect)

#endif

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
     e30:	80 ff       	sbrs	r24, 0
     e32:	11 c0       	rjmp	.+34     	; 0xe56 <set_color+0x26>
        DDRD |= (1<<5);
     e34:	55 9a       	sbi	0x0a, 5	; 10
    else
        DDRD &= ~(1<<5);

    if (rgb&(1<<1))
     e36:	81 ff       	sbrs	r24, 1
     e38:	11 c0       	rjmp	.+34     	; 0xe5c <set_color+0x2c>
        DDRD |= (1<<4);
     e3a:	54 9a       	sbi	0x0a, 4	; 10
    else
        DDRD &= ~(1<<4);

    if (rgb&(1<<2))
     e3c:	82 ff       	sbrs	r24, 2
     e3e:	11 c0       	rjmp	.+34     	; 0xe62 <set_color+0x32>
        DDRC |= (1<<3);
     e40:	3b 9a       	sbi	0x07, 3	; 7
    else
        DDRC &= ~(1<<3);

    if (rgb&(1<<3))
     e42:	83 ff       	sbrs	r24, 3
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <set_color+0x38>
        DDRC |= (1<<2);
     e46:	3a 9a       	sbi	0x07, 2	; 7
    else
        DDRC &= ~(1<<2);

    if (rgb&(1<<4))
     e48:	84 ff       	sbrs	r24, 4
     e4a:	11 c0       	rjmp	.+34     	; 0xe6e <set_color+0x3e>
        DDRC |= (1<<5);
     e4c:	3d 9a       	sbi	0x07, 5	; 7
    else
        DDRC &= ~(1<<5);

    if (rgb&(1<<5))
     e4e:	85 fd       	sbrc	r24, 5
     e50:	11 c0       	rjmp	.+34     	; 0xe74 <set_color+0x44>
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
     e52:	3c 98       	cbi	0x07, 4	; 7
     e54:	08 95       	ret

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
     e56:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
     e58:	81 fd       	sbrc	r24, 1
     e5a:	ef cf       	rjmp	.-34     	; 0xe3a <set_color+0xa>
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
     e5c:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
     e5e:	82 fd       	sbrc	r24, 2
     e60:	ef cf       	rjmp	.-34     	; 0xe40 <set_color+0x10>
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
     e62:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
     e64:	83 fd       	sbrc	r24, 3
     e66:	ef cf       	rjmp	.-34     	; 0xe46 <set_color+0x16>
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
     e68:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
     e6a:	84 fd       	sbrc	r24, 4
     e6c:	ef cf       	rjmp	.-34     	; 0xe4c <set_color+0x1c>
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
     e6e:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
     e70:	85 ff       	sbrs	r24, 5
     e72:	ef cf       	rjmp	.-34     	; 0xe52 <set_color+0x22>
        DDRC |= (1<<4);
     e74:	3c 9a       	sbi	0x07, 4	; 7
     e76:	08 95       	ret

00000e78 <__vector_11>:

/**
 * Timer1 interrupt.
 * Timeout which is trigerred if stop bit is not received.
 */
ISR(TIMER1_COMPA_vect) {
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
    rx_timer_off();
     e86:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     e8a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e8e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    rx_leadingbit = 1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <rx_leadingbit>
    rx_leadingbyte = 1;
     e98:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
    rx_busy = 0;
     e9c:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    adc_trigger_high_gain();
     ea0:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     ea4:	93 ea       	ldi	r25, 0xA3	; 163
     ea6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     eaa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
}
     eae:	9f 91       	pop	r25
     eb0:	8f 91       	pop	r24
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	0f 90       	pop	r0
     eb8:	1f 90       	pop	r1
     eba:	18 95       	reti

00000ebc <__vector_23>:

/**
 * Analog comparator trigger interrupt.
 * Triggerred for incoming IR pulses (i.e. individual bits).
 */
ISR(ANALOG_COMP_vect) {
     ebc:	1f 92       	push	r1
     ebe:	0f 92       	push	r0
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	0f 92       	push	r0
     ec4:	11 24       	eor	r1, r1
     ec6:	2f 93       	push	r18
     ec8:	3f 93       	push	r19
     eca:	4f 93       	push	r20
     ecc:	5f 93       	push	r21
     ece:	6f 93       	push	r22
     ed0:	7f 93       	push	r23
     ed2:	8f 93       	push	r24
     ed4:	9f 93       	push	r25
     ed6:	af 93       	push	r26
     ed8:	bf 93       	push	r27
     eda:	cf 93       	push	r28
     edc:	df 93       	push	r29
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
    uint16_t timer = TCNT1;
     ee2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ee6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>

    rx_busy = 1;
     eea:	41 e0       	ldi	r20, 0x01	; 1
     eec:	40 93 37 01 	sts	0x0137, r20	; 0x800137 <rx_busy>
    /* adc_trigger_stop(); */

    if(rx_leadingbit) {       // Start bit received.
     ef0:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <rx_leadingbit>
     ef4:	88 23       	and	r24, r24
     ef6:	a9 f1       	breq	.+106    	; 0xf62 <__vector_23+0xa6>
        rx_timer_on();
     ef8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     efc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f00:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
        rx_bytevalue = 0;
     f04:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <rx_bytevalue>
        rx_leadingbit = 0;
     f08:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <rx_leadingbit>
        if (rx_leadingbyte) {
     f0c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     f10:	88 23       	and	r24, r24
     f12:	a1 f0       	breq	.+40     	; 0xf3c <__vector_23+0x80>
            adc_finish_conversion();
     f14:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f18:	86 fd       	sbrc	r24, 6
     f1a:	fc cf       	rjmp	.-8      	; 0xf14 <__vector_23+0x58>
            rx_dist.high_gain = ADCW;
     f1c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     f20:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     f24:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <rx_dist+0x3>
     f28:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <rx_dist+0x2>
            adc_trigger_low_gain();
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
     f32:	93 ea       	ldi	r25, 0xA3	; 163
     f34:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
     f38:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    }
                }
            }
        }
    }
}
     f3c:	ff 91       	pop	r31
     f3e:	ef 91       	pop	r30
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	bf 91       	pop	r27
     f46:	af 91       	pop	r26
     f48:	9f 91       	pop	r25
     f4a:	8f 91       	pop	r24
     f4c:	7f 91       	pop	r23
     f4e:	6f 91       	pop	r22
     f50:	5f 91       	pop	r21
     f52:	4f 91       	pop	r20
     f54:	3f 91       	pop	r19
     f56:	2f 91       	pop	r18
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	0f 90       	pop	r0
     f5e:	1f 90       	pop	r1
     f60:	18 95       	reti
            rx_dist.high_gain = ADCW;
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
     f62:	c9 01       	movw	r24, r18
     f64:	87 58       	subi	r24, 0x87	; 135
     f66:	91 09       	sbc	r25, r1
     f68:	84 37       	cpi	r24, 0x74	; 116
     f6a:	99 40       	sbci	r25, 0x09	; 9
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <__vector_23+0xb4>
     f6e:	4f c0       	rjmp	.+158    	; 0x100e <__vector_23+0x152>
            adc_trigger_high_gain();
        } else {
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
     f70:	26 58       	subi	r18, 0x86	; 134
     f72:	31 09       	sbc	r19, r1
     f74:	a4 ef       	ldi	r26, 0xF4	; 244
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	0e 94 c6 0a 	call	0x158c	; 0x158c <__umulhisi3>
     f7c:	aa 27       	eor	r26, r26
     f7e:	bb 27       	eor	r27, r27
            if (bitindex <= 7) { // Data bit received.
     f80:	88 30       	cpi	r24, 0x08	; 8
     f82:	08 f4       	brcc	.+2      	; 0xf86 <__vector_23+0xca>
     f84:	7b c0       	rjmp	.+246    	; 0x107c <__vector_23+0x1c0>
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
     f86:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
                if (rx_leadingbyte) {
     f8a:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rx_leadingbyte>
     f8e:	81 11       	cpse	r24, r1
     f90:	52 c0       	rjmp	.+164    	; 0x1036 <__vector_23+0x17a>
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
                        rx_byteindex = 0;
                    }
                } else {
                    rawmsg[rx_byteindex] = rx_bytevalue;
     f92:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <rx_byteindex>
     f96:	e8 2f       	mov	r30, r24
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	e6 5a       	subi	r30, 0xA6	; 166
     f9c:	fe 4f       	sbci	r31, 0xFE	; 254
     f9e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
     fa2:	90 83       	st	Z, r25
                    rx_byteindex++;
     fa4:	8f 5f       	subi	r24, 0xFF	; 255
     fa6:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <rx_byteindex>
                    if (rx_byteindex == sizeof(message_t)) {
     faa:	8c 30       	cpi	r24, 0x0C	; 12
     fac:	39 f6       	brne	.-114    	; 0xf3c <__vector_23+0x80>
                        rx_timer_off();
     fae:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     fb2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fb6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
     fba:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
     fbe:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>

                        if (rx_msg.crc == message_crc(&rx_msg))
     fc2:	c0 91 64 01 	lds	r28, 0x0164	; 0x800164 <rx_msg+0xa>
     fc6:	d0 91 65 01 	lds	r29, 0x0165	; 0x800165 <rx_msg+0xb>
     fca:	8a e5       	ldi	r24, 0x5A	; 90
     fcc:	91 e0       	ldi	r25, 0x01	; 1
     fce:	0e 94 65 09 	call	0x12ca	; 0x12ca <message_crc>
     fd2:	c8 17       	cp	r28, r24
     fd4:	d9 07       	cpc	r29, r25
     fd6:	09 f0       	breq	.+2      	; 0xfda <__vector_23+0x11e>
     fd8:	b1 cf       	rjmp	.-158    	; 0xf3c <__vector_23+0x80>
}

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
     fda:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <rx_msg+0x9>
     fde:	87 ff       	sbrs	r24, 7
     fe0:	61 c0       	rjmp	.+194    	; 0x10a4 <__vector_23+0x1e8>
        kilo_message_rx(&rx_msg, &rx_dist);
        return;
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
     fe2:	98 e7       	ldi	r25, 0x78	; 120
     fe4:	98 0f       	add	r25, r24
     fe6:	93 30       	cpi	r25, 0x03	; 3
     fe8:	30 f0       	brcs	.+12     	; 0xff6 <__vector_23+0x13a>
        motors_off();
     fea:	53 98       	cbi	0x0a, 3	; 10
     fec:	23 98       	cbi	0x04, 3	; 4
     fee:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
     ff2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
    switch (rx_msg.type) {
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	fc 01       	movw	r30, r24
     ffa:	e0 58       	subi	r30, 0x80	; 128
     ffc:	f1 09       	sbc	r31, r1
     ffe:	eb 30       	cpi	r30, 0x0B	; 11
    1000:	f1 05       	cpc	r31, r1
    1002:	08 f0       	brcs	.+2      	; 0x1006 <__vector_23+0x14a>
    1004:	9b cf       	rjmp	.-202    	; 0xf3c <__vector_23+0x80>
    1006:	e5 5c       	subi	r30, 0xC5	; 197
    1008:	ff 4f       	sbci	r31, 0xFF	; 255
    100a:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__tablejump2__>
            adc_trigger_low_gain();
        }
    } else {
        // Stray bit received
        if (timer <= rx_bitcycles/2 || timer >= rx_bitcycles*9+rx_bitcycles/2) {
            rx_timer_off();
    100e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    1012:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1016:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
            rx_leadingbit = 1;
    101a:	40 93 10 01 	sts	0x0110, r20	; 0x800110 <rx_leadingbit>
            rx_leadingbyte = 1;
    101e:	40 93 54 01 	sts	0x0154, r20	; 0x800154 <rx_leadingbyte>
            rx_busy = 0;
    1022:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
            adc_trigger_high_gain();
    1026:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    102a:	83 ea       	ldi	r24, 0xA3	; 163
    102c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1030:	40 93 7b 00 	sts	0x007B, r20	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    1034:	83 cf       	rjmp	.-250    	; 0xf3c <__vector_23+0x80>
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
            } else {             // Stop bit received.
                rx_leadingbit = 1;
                if (rx_leadingbyte) {
                    adc_finish_conversion();
    1036:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    103a:	86 fd       	sbrc	r24, 6
    103c:	fc cf       	rjmp	.-8      	; 0x1036 <__vector_23+0x17a>
                    rx_dist.low_gain = ADCW;
    103e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
    1042:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
    1046:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <rx_dist+0x1>
    104a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rx_dist>
                    adc_trigger_high_gain();
    104e:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
    1052:	83 ea       	ldi	r24, 0xA3	; 163
    1054:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
                    if (rx_bytevalue != 0) { // Collision detected.
    105e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
    1062:	99 23       	and	r25, r25
    1064:	d1 f0       	breq	.+52     	; 0x109a <__vector_23+0x1de>
                        rx_timer_off();
    1066:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
    106a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    106e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
                        rx_leadingbyte = 1;
    1072:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rx_leadingbyte>
                        rx_busy = 0;
    1076:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <rx_busy>
    107a:	60 cf       	rjmp	.-320    	; 0xf3c <__vector_23+0x80>
            // NOTE: The following code avoids a division which takes
            // too many clock cycles and throws off the interrupt.
            const uint16_t M = ((1L<<16)+rx_bitcycles-1)/rx_bitcycles;
            uint8_t bitindex = ((uint32_t)(timer-rx_bitcycles/2)*M)>>16;
            if (bitindex <= 7) { // Data bit received.
                rx_bytevalue |= (1<<bitindex);
    107c:	21 e0       	ldi	r18, 0x01	; 1
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	f9 01       	movw	r30, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <__vector_23+0x1cc>
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	8a 95       	dec	r24
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <__vector_23+0x1c8>
    108c:	cf 01       	movw	r24, r30
    108e:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <rx_bytevalue>
    1092:	89 2b       	or	r24, r25
    1094:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <rx_bytevalue>
    1098:	51 cf       	rjmp	.-350    	; 0xf3c <__vector_23+0x80>
                    if (rx_bytevalue != 0) { // Collision detected.
                        rx_timer_off();
                        rx_leadingbyte = 1;
                        rx_busy = 0;
                    } else {                // Leading byte received.
                        rx_leadingbyte = 0;
    109a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rx_leadingbyte>
                        rx_byteindex = 0;
    109e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <rx_byteindex>
    10a2:	4c cf       	rjmp	.-360    	; 0xf3c <__vector_23+0x80>

static inline void process_message() {
    AddressPointer_t reset = (AddressPointer_t)0x0000, bootload = (AddressPointer_t)0x7000;
    calibmsg_t *calibmsg = (calibmsg_t*)&rx_msg.data;
    if (rx_msg.type < BOOT) {
        kilo_message_rx(&rx_msg, &rx_dist);
    10a4:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <kilo_message_rx>
    10a8:	f0 91 06 01 	lds	r31, 0x0106	; 0x800106 <kilo_message_rx+0x1>
    10ac:	6f e2       	ldi	r22, 0x2F	; 47
    10ae:	71 e0       	ldi	r23, 0x01	; 1
    10b0:	8a e5       	ldi	r24, 0x5A	; 90
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	09 95       	icall
    10b6:	42 cf       	rjmp	.-380    	; 0xf3c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    10b8:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	09 f4       	brne	.+2      	; 0x10c2 <__vector_23+0x206>
    10c0:	dd c0       	rjmp	.+442    	; 0x127c <__vector_23+0x3c0>
    10c2:	08 f4       	brcc	.+2      	; 0x10c6 <__vector_23+0x20a>
    10c4:	ba c0       	rjmp	.+372    	; 0x123a <__vector_23+0x37e>
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	09 f4       	brne	.+2      	; 0x10cc <__vector_23+0x210>
    10ca:	c6 c0       	rjmp	.+396    	; 0x1258 <__vector_23+0x39c>
    10cc:	84 30       	cpi	r24, 0x04	; 4
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__vector_23+0x216>
    10d0:	b1 c0       	rjmp	.+354    	; 0x1234 <__vector_23+0x378>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    10d2:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
    10d6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <rx_msg+0x6>
    10da:	83 30       	cpi	r24, 0x03	; 3
    10dc:	09 f4       	brne	.+2      	; 0x10e0 <__vector_23+0x224>
    10de:	e3 c0       	rjmp	.+454    	; 0x12a6 <__vector_23+0x3ea>
    10e0:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x5>
                        prev_motion = MOVE_STOP;
    10e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_STRAIGHT;
    10e8:	23 e0       	ldi	r18, 0x03	; 3
    10ea:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <cur_motion>
                        kilo_straight_left = calibmsg->straight_left;
    10ee:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <kilo_straight_left>
                        kilo_straight_right = calibmsg->straight_right;
    10f2:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <kilo_straight_right>
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    10f6:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    10fa:	86 30       	cpi	r24, 0x06	; 6
    10fc:	09 f4       	brne	.+2      	; 0x1100 <__vector_23+0x244>
    10fe:	1e cf       	rjmp	.-452    	; 0xf3c <__vector_23+0x80>
                motors_on();
    1100:	53 9a       	sbi	0x0a, 3	; 10
    1102:	23 9a       	sbi	0x04, 3	; 4
    1104:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1108:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = MOVING;
    110c:	86 e0       	ldi	r24, 0x06	; 6
    110e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    1112:	14 cf       	rjmp	.-472    	; 0xf3c <__vector_23+0x80>
            }
            break;
        case READUID:
            if (kilo_state != MOVING) {
    1114:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    1118:	86 30       	cpi	r24, 0x06	; 6
    111a:	99 f0       	breq	.+38     	; 0x1142 <__vector_23+0x286>
                motors_on();
    111c:	53 9a       	sbi	0x0a, 3	; 10
    111e:	23 9a       	sbi	0x04, 3	; 4
    1120:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1124:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>

void set_color(uint8_t rgb) {
    if (rgb&(1<<0))
        DDRD |= (1<<5);
    else
        DDRD &= ~(1<<5);
    1128:	55 98       	cbi	0x0a, 5	; 10

    if (rgb&(1<<1))
        DDRD |= (1<<4);
    else
        DDRD &= ~(1<<4);
    112a:	54 98       	cbi	0x0a, 4	; 10

    if (rgb&(1<<2))
        DDRC |= (1<<3);
    else
        DDRC &= ~(1<<3);
    112c:	3b 98       	cbi	0x07, 3	; 7

    if (rgb&(1<<3))
        DDRC |= (1<<2);
    else
        DDRC &= ~(1<<2);
    112e:	3a 98       	cbi	0x07, 2	; 7

    if (rgb&(1<<4))
        DDRC |= (1<<5);
    else
        DDRC &= ~(1<<5);
    1130:	3d 98       	cbi	0x07, 5	; 7

    if (rgb&(1<<5))
        DDRC |= (1<<4);
    else
        DDRC &= ~(1<<4);
    1132:	3c 98       	cbi	0x07, 4	; 7
            break;
        case READUID:
            if (kilo_state != MOVING) {
                motors_on();
                set_color(RGB(0,0,0));
                prev_motion = cur_motion = MOVE_STOP;
    1134:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
    1138:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                kilo_state = MOVING;
    113c:	86 e0       	ldi	r24, 0x06	; 6
    113e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c 01       	movw	r18, r24
    1148:	00 90 5a 01 	lds	r0, 0x015A	; 0x80015a <rx_msg>
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <__vector_23+0x296>
    114e:	22 0f       	add	r18, r18
    1150:	33 1f       	adc	r19, r19
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <__vector_23+0x292>
    1156:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <kilo_uid>
    115a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <kilo_uid+0x1>
    115e:	82 23       	and	r24, r18
    1160:	93 23       	and	r25, r19
    1162:	89 2b       	or	r24, r25
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_23+0x2ac>
    1166:	86 c0       	rjmp	.+268    	; 0x1274 <__vector_23+0x3b8>
                cur_motion = MOVE_LEFT;
            else
                cur_motion = MOVE_STOP;
    1168:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
                    }
                }
            }
        }
    }
}
    116c:	e7 ce       	rjmp	.-562    	; 0xf3c <__vector_23+0x80>
            break;
        case SLEEP:
            kilo_state = SLEEPING;
            break;
        case WAKEUP:
            kilo_state = IDLE;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    1174:	e3 ce       	rjmp	.-570    	; 0xf3c <__vector_23+0x80>
        case BOOT:
            tx_timer_off();
            bootload();
            break;
        case RESET:
            reset();
    1176:	e0 e0       	ldi	r30, 0x00	; 0
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	09 95       	icall
    }
    if (rx_msg.type != READUID && rx_msg.type != RUN && rx_msg.type != CALIB)
        motors_off();
    switch (rx_msg.type) {
        case BOOT:
            tx_timer_off();
    117c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    1186:	16 bc       	out	0x26, r1	; 38
            bootload();
    1188:	e0 e0       	ldi	r30, 0x00	; 0
    118a:	f0 e7       	ldi	r31, 0x70	; 112
    118c:	09 95       	icall
            break;
        case RESET:
            reset();
            break;
        case SLEEP:
            kilo_state = SLEEPING;
    118e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <kilo_state>
    1192:	d4 ce       	rjmp	.-600    	; 0xf3c <__vector_23+0x80>
            break;
        case CHARGE:
            kilo_state = CHARGING;
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    119a:	d0 ce       	rjmp	.-608    	; 0xf3c <__vector_23+0x80>
            break;
        case WAKEUP:
            kilo_state = IDLE;
            break;
        case CHARGE:
            kilo_state = CHARGING;
    119c:	85 e0       	ldi	r24, 0x05	; 5
    119e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    11a2:	cc ce       	rjmp	.-616    	; 0xf3c <__vector_23+0x80>
            break;
        case VOLTAGE:
            kilo_state = BATTERY;
            break;
        case RUN:
            if (kilo_state != SETUP && kilo_state != RUNNING) {
    11a4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	09 f4       	brne	.+2      	; 0x11ae <__vector_23+0x2f2>
    11ac:	c7 ce       	rjmp	.-626    	; 0xf3c <__vector_23+0x80>
    11ae:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	09 f4       	brne	.+2      	; 0x11b8 <__vector_23+0x2fc>
    11b6:	c2 ce       	rjmp	.-636    	; 0xf3c <__vector_23+0x80>
                motors_on();
    11b8:	53 9a       	sbi	0x0a, 3	; 10
    11ba:	23 9a       	sbi	0x04, 3	; 4
    11bc:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    11c0:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                kilo_state = SETUP;
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    11ca:	b8 ce       	rjmp	.-656    	; 0xf3c <__vector_23+0x80>
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
                case CALIB_SAVE:
                    if (kilo_state == MOVING) {
    11cc:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <kilo_state>
    11d0:	86 30       	cpi	r24, 0x06	; 6
    11d2:	09 f0       	breq	.+2      	; 0x11d6 <__vector_23+0x31a>
    11d4:	b3 ce       	rjmp	.-666    	; 0xf3c <__vector_23+0x80>
                        eeprom_write_byte(EEPROM_UID, kilo_uid&0xFF);
    11d6:	60 91 69 01 	lds	r22, 0x0169	; 0x800169 <kilo_uid>
    11da:	80 eb       	ldi	r24, 0xB0	; 176
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_UID+1, (kilo_uid>>8)&0xFF);
    11e2:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <kilo_uid+0x1>
    11e6:	81 eb       	ldi	r24, 0xB1	; 177
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_ROTATE, kilo_turn_left);
    11ee:	60 91 6d 01 	lds	r22, 0x016D	; 0x80016d <kilo_turn_left>
    11f2:	85 e0       	ldi	r24, 0x05	; 5
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_ROTATE, kilo_turn_right);
    11fa:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <kilo_turn_right>
    11fe:	89 e0       	ldi	r24, 0x09	; 9
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_LEFT_STRAIGHT, kilo_straight_left);
    1206:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <kilo_straight_left>
    120a:	8c e0       	ldi	r24, 0x0C	; 12
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        eeprom_write_byte(EEPROM_RIGHT_STRAIGHT, kilo_straight_right);
    1212:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <kilo_straight_right>
    1216:	84 e1       	ldi	r24, 0x14	; 20
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <eeprom_write_byte>
                        motors_off();
    121e:	53 98       	cbi	0x0a, 3	; 10
    1220:	23 98       	cbi	0x04, 3	; 4
    1222:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
    1226:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
                        kilo_state = IDLE;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <kilo_state>
    1230:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <rx_msg>
                        kilo_straight_left = calibmsg->straight_left;
                        kilo_straight_right = calibmsg->straight_right;
                    }
                    break;
            }
            if (calibmsg->mode != CALIB_SAVE && kilo_state != MOVING) {
    1234:	81 11       	cpse	r24, r1
    1236:	5f cf       	rjmp	.-322    	; 0x10f6 <__vector_23+0x23a>
    1238:	81 ce       	rjmp	.-766    	; 0xf3c <__vector_23+0x80>
                motors_on();
                kilo_state = SETUP;
            }
            break;
        case CALIB:
            switch(calibmsg->mode) {
    123a:	88 23       	and	r24, r24
    123c:	39 f2       	breq	.-114    	; 0x11cc <__vector_23+0x310>
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	c9 f7       	brne	.-14     	; 0x1234 <__vector_23+0x378>
                        motors_off();
                        kilo_state = IDLE;
                    }
                    break;
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
    1242:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <rx_msg+0x1>
    1246:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <rx_msg+0x2>
    124a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <kilo_uid+0x1>
    124e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <kilo_uid>
                    cur_motion = MOVE_STOP;
    1252:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <cur_motion>
    1256:	4f cf       	rjmp	.-354    	; 0x10f6 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    1258:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
    125c:	82 30       	cpi	r24, 0x02	; 2
    125e:	71 f1       	breq	.+92     	; 0x12bc <__vector_23+0x400>
    1260:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg+0x4>
                        prev_motion = MOVE_STOP;
    1264:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_RIGHT;
    1268:	92 e0       	ldi	r25, 0x02	; 2
    126a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_right = calibmsg->turn_right;
    126e:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <kilo_turn_right>
    1272:	41 cf       	rjmp	.-382    	; 0x10f6 <__vector_23+0x23a>
                prev_motion = cur_motion = MOVE_STOP;
                kilo_state = MOVING;
            }

            if (kilo_uid&(1<<rx_msg.data[0]))
                cur_motion = MOVE_LEFT;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <cur_motion>
    127a:	60 ce       	rjmp	.-832    	; 0xf3c <__vector_23+0x80>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    127c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <cur_motion>
    1280:	81 30       	cpi	r24, 0x01	; 1
    1282:	51 f0       	breq	.+20     	; 0x1298 <__vector_23+0x3dc>
    1284:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x3>
                        prev_motion = MOVE_STOP;
    1288:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <prev_motion>
                        cur_motion = MOVE_LEFT;
    128c:	91 e0       	ldi	r25, 0x01	; 1
    128e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <cur_motion>
                        kilo_turn_left = calibmsg->turn_left;
    1292:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <kilo_turn_left>
    1296:	2f cf       	rjmp	.-418    	; 0x10f6 <__vector_23+0x23a>
                case CALIB_UID:
                    kilo_uid = calibmsg->uid;
                    cur_motion = MOVE_STOP;
                    break;
                case CALIB_TURN_LEFT:
                    if (cur_motion != MOVE_LEFT || kilo_turn_left != calibmsg->turn_left) {
    1298:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <rx_msg+0x3>
    129c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <kilo_turn_left>
    12a0:	89 13       	cpse	r24, r25
    12a2:	f2 cf       	rjmp	.-28     	; 0x1288 <__vector_23+0x3cc>
    12a4:	28 cf       	rjmp	.-432    	; 0x10f6 <__vector_23+0x23a>
                        cur_motion = MOVE_RIGHT;
                        kilo_turn_right = calibmsg->turn_right;
                    }
                    break;
                case CALIB_STRAIGHT:
                    if (cur_motion != MOVE_STRAIGHT || kilo_straight_right != calibmsg->straight_right || kilo_straight_left != calibmsg->straight_left) {
    12a6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <kilo_straight_right>
    12aa:	98 13       	cpse	r25, r24
    12ac:	19 cf       	rjmp	.-462    	; 0x10e0 <__vector_23+0x224>
    12ae:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <rx_msg+0x5>
    12b2:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <kilo_straight_left>
    12b6:	82 13       	cpse	r24, r18
    12b8:	15 cf       	rjmp	.-470    	; 0x10e4 <__vector_23+0x228>
    12ba:	1d cf       	rjmp	.-454    	; 0x10f6 <__vector_23+0x23a>
                        cur_motion = MOVE_LEFT;
                        kilo_turn_left = calibmsg->turn_left;
                    }
                    break;
                case CALIB_TURN_RIGHT:
                    if (cur_motion != MOVE_RIGHT || kilo_turn_right != calibmsg->turn_right) {
    12bc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <rx_msg+0x4>
    12c0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <kilo_turn_right>
    12c4:	89 13       	cpse	r24, r25
    12c6:	ce cf       	rjmp	.-100    	; 0x1264 <__vector_23+0x3a8>
    12c8:	16 cf       	rjmp	.-468    	; 0x10f6 <__vector_23+0x23a>

000012ca <message_crc>:
#include "message.h"
#include <util/crc16.h>  // for optimized crc routines

uint16_t message_crc(const message_t *msg) {
    12ca:	fc 01       	movw	r30, r24
static __inline__ uint16_t
_crc_ccitt_update (uint16_t __crc, uint8_t __data)
{
    uint16_t __ret;

    __asm__ __volatile__ (
    12cc:	80 81       	ld	r24, Z
    12ce:	2f ef       	ldi	r18, 0xFF	; 255
    12d0:	3f ef       	ldi	r19, 0xFF	; 255
    12d2:	28 27       	eor	r18, r24
    12d4:	02 2e       	mov	r0, r18
    12d6:	22 95       	swap	r18
    12d8:	20 7f       	andi	r18, 0xF0	; 240
    12da:	20 25       	eor	r18, r0
    12dc:	03 2e       	mov	r0, r19
    12de:	32 2f       	mov	r19, r18
    12e0:	22 95       	swap	r18
    12e2:	2f 70       	andi	r18, 0x0F	; 15
    12e4:	02 26       	eor	r0, r18
    12e6:	26 95       	lsr	r18
    12e8:	32 27       	eor	r19, r18
    12ea:	23 27       	eor	r18, r19
    12ec:	22 0f       	add	r18, r18
    12ee:	22 0f       	add	r18, r18
    12f0:	22 0f       	add	r18, r18
    12f2:	20 25       	eor	r18, r0
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	28 27       	eor	r18, r24
    12f8:	02 2e       	mov	r0, r18
    12fa:	22 95       	swap	r18
    12fc:	20 7f       	andi	r18, 0xF0	; 240
    12fe:	20 25       	eor	r18, r0
    1300:	03 2e       	mov	r0, r19
    1302:	32 2f       	mov	r19, r18
    1304:	22 95       	swap	r18
    1306:	2f 70       	andi	r18, 0x0F	; 15
    1308:	02 26       	eor	r0, r18
    130a:	26 95       	lsr	r18
    130c:	32 27       	eor	r19, r18
    130e:	23 27       	eor	r18, r19
    1310:	22 0f       	add	r18, r18
    1312:	22 0f       	add	r18, r18
    1314:	22 0f       	add	r18, r18
    1316:	20 25       	eor	r18, r0
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	28 27       	eor	r18, r24
    131c:	02 2e       	mov	r0, r18
    131e:	22 95       	swap	r18
    1320:	20 7f       	andi	r18, 0xF0	; 240
    1322:	20 25       	eor	r18, r0
    1324:	03 2e       	mov	r0, r19
    1326:	32 2f       	mov	r19, r18
    1328:	22 95       	swap	r18
    132a:	2f 70       	andi	r18, 0x0F	; 15
    132c:	02 26       	eor	r0, r18
    132e:	26 95       	lsr	r18
    1330:	32 27       	eor	r19, r18
    1332:	23 27       	eor	r18, r19
    1334:	22 0f       	add	r18, r18
    1336:	22 0f       	add	r18, r18
    1338:	22 0f       	add	r18, r18
    133a:	20 25       	eor	r18, r0
    133c:	83 81       	ldd	r24, Z+3	; 0x03
    133e:	28 27       	eor	r18, r24
    1340:	02 2e       	mov	r0, r18
    1342:	22 95       	swap	r18
    1344:	20 7f       	andi	r18, 0xF0	; 240
    1346:	20 25       	eor	r18, r0
    1348:	03 2e       	mov	r0, r19
    134a:	32 2f       	mov	r19, r18
    134c:	22 95       	swap	r18
    134e:	2f 70       	andi	r18, 0x0F	; 15
    1350:	02 26       	eor	r0, r18
    1352:	26 95       	lsr	r18
    1354:	32 27       	eor	r19, r18
    1356:	23 27       	eor	r18, r19
    1358:	22 0f       	add	r18, r18
    135a:	22 0f       	add	r18, r18
    135c:	22 0f       	add	r18, r18
    135e:	20 25       	eor	r18, r0
    1360:	84 81       	ldd	r24, Z+4	; 0x04
    1362:	28 27       	eor	r18, r24
    1364:	02 2e       	mov	r0, r18
    1366:	22 95       	swap	r18
    1368:	20 7f       	andi	r18, 0xF0	; 240
    136a:	20 25       	eor	r18, r0
    136c:	03 2e       	mov	r0, r19
    136e:	32 2f       	mov	r19, r18
    1370:	22 95       	swap	r18
    1372:	2f 70       	andi	r18, 0x0F	; 15
    1374:	02 26       	eor	r0, r18
    1376:	26 95       	lsr	r18
    1378:	32 27       	eor	r19, r18
    137a:	23 27       	eor	r18, r19
    137c:	22 0f       	add	r18, r18
    137e:	22 0f       	add	r18, r18
    1380:	22 0f       	add	r18, r18
    1382:	20 25       	eor	r18, r0
    1384:	85 81       	ldd	r24, Z+5	; 0x05
    1386:	28 27       	eor	r18, r24
    1388:	02 2e       	mov	r0, r18
    138a:	22 95       	swap	r18
    138c:	20 7f       	andi	r18, 0xF0	; 240
    138e:	20 25       	eor	r18, r0
    1390:	03 2e       	mov	r0, r19
    1392:	32 2f       	mov	r19, r18
    1394:	22 95       	swap	r18
    1396:	2f 70       	andi	r18, 0x0F	; 15
    1398:	02 26       	eor	r0, r18
    139a:	26 95       	lsr	r18
    139c:	32 27       	eor	r19, r18
    139e:	23 27       	eor	r18, r19
    13a0:	22 0f       	add	r18, r18
    13a2:	22 0f       	add	r18, r18
    13a4:	22 0f       	add	r18, r18
    13a6:	20 25       	eor	r18, r0
    13a8:	86 81       	ldd	r24, Z+6	; 0x06
    13aa:	28 27       	eor	r18, r24
    13ac:	02 2e       	mov	r0, r18
    13ae:	22 95       	swap	r18
    13b0:	20 7f       	andi	r18, 0xF0	; 240
    13b2:	20 25       	eor	r18, r0
    13b4:	03 2e       	mov	r0, r19
    13b6:	32 2f       	mov	r19, r18
    13b8:	22 95       	swap	r18
    13ba:	2f 70       	andi	r18, 0x0F	; 15
    13bc:	02 26       	eor	r0, r18
    13be:	26 95       	lsr	r18
    13c0:	32 27       	eor	r19, r18
    13c2:	23 27       	eor	r18, r19
    13c4:	22 0f       	add	r18, r18
    13c6:	22 0f       	add	r18, r18
    13c8:	22 0f       	add	r18, r18
    13ca:	20 25       	eor	r18, r0
    13cc:	87 81       	ldd	r24, Z+7	; 0x07
    13ce:	28 27       	eor	r18, r24
    13d0:	02 2e       	mov	r0, r18
    13d2:	22 95       	swap	r18
    13d4:	20 7f       	andi	r18, 0xF0	; 240
    13d6:	20 25       	eor	r18, r0
    13d8:	03 2e       	mov	r0, r19
    13da:	32 2f       	mov	r19, r18
    13dc:	22 95       	swap	r18
    13de:	2f 70       	andi	r18, 0x0F	; 15
    13e0:	02 26       	eor	r0, r18
    13e2:	26 95       	lsr	r18
    13e4:	32 27       	eor	r19, r18
    13e6:	23 27       	eor	r18, r19
    13e8:	22 0f       	add	r18, r18
    13ea:	22 0f       	add	r18, r18
    13ec:	22 0f       	add	r18, r18
    13ee:	20 25       	eor	r18, r0
    13f0:	80 85       	ldd	r24, Z+8	; 0x08
    13f2:	28 27       	eor	r18, r24
    13f4:	02 2e       	mov	r0, r18
    13f6:	22 95       	swap	r18
    13f8:	20 7f       	andi	r18, 0xF0	; 240
    13fa:	20 25       	eor	r18, r0
    13fc:	03 2e       	mov	r0, r19
    13fe:	32 2f       	mov	r19, r18
    1400:	22 95       	swap	r18
    1402:	2f 70       	andi	r18, 0x0F	; 15
    1404:	02 26       	eor	r0, r18
    1406:	26 95       	lsr	r18
    1408:	32 27       	eor	r19, r18
    140a:	23 27       	eor	r18, r19
    140c:	22 0f       	add	r18, r18
    140e:	22 0f       	add	r18, r18
    1410:	22 0f       	add	r18, r18
    1412:	20 25       	eor	r18, r0
    1414:	41 85       	ldd	r20, Z+9	; 0x09
    1416:	c9 01       	movw	r24, r18
    1418:	84 27       	eor	r24, r20
    141a:	08 2e       	mov	r0, r24
    141c:	82 95       	swap	r24
    141e:	80 7f       	andi	r24, 0xF0	; 240
    1420:	80 25       	eor	r24, r0
    1422:	09 2e       	mov	r0, r25
    1424:	98 2f       	mov	r25, r24
    1426:	82 95       	swap	r24
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	08 26       	eor	r0, r24
    142c:	86 95       	lsr	r24
    142e:	98 27       	eor	r25, r24
    1430:	89 27       	eor	r24, r25
    1432:	88 0f       	add	r24, r24
    1434:	88 0f       	add	r24, r24
    1436:	88 0f       	add	r24, r24
    1438:	80 25       	eor	r24, r0
    const uint8_t *rawmsg = (const uint8_t*)msg;
    uint16_t crc = 0xFFFF;
    for (i = 0; i<sizeof(message_t)-sizeof(msg->crc); i++)
        crc = _crc_ccitt_update(crc, rawmsg[i]);
    return crc;
}
    143a:	08 95       	ret

0000143c <message_send>:
.global message_send

message_send:
    ; save interrupt state
    ; sreg = SREG
    in sreg, SREG
    143c:	0f b6       	in	r0, 0x3f	; 63
#ifndef OHC
    cli
    143e:	f8 94       	cli
#endif
    ; ddreg = IR_DDR
    in  ddrreg,  IR_DDR
    1440:	a4 b1       	in	r26, 0x04	; 4

    ; IR_DDR |= tx_mask
    lds tmpreg1, tx_mask
    1442:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <tx_mask>
    or tmpreg1, ddrreg
    1446:	2a 2b       	or	r18, r26
    out IR_DDR, tmpreg1
    1448:	24 b9       	out	0x04, r18	; 4

    ldi tmpreg1, 0x01
    144a:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    144c:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    1450:	20 30       	cpi	r18, 0x00	; 0
    1452:	29 f0       	breq	.+10     	; 0x145e <message_send+0x22>
    1454:	00 00       	nop
    1456:	25 b1       	in	r18, 0x05	; 5
    1458:	23 2b       	or	r18, r19
    145a:	25 b9       	out	0x05, r18	; 5
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <message_send+0x2a>
    145e:	00 00       	nop
    1460:	00 00       	nop
    1462:	00 00       	nop
    1464:	00 c0       	rjmp	.+0      	; 0x1466 <message_send+0x2a>
    1466:	00 00       	nop
    1468:	00 00       	nop
    146a:	00 00       	nop
    146c:	30 95       	com	r19
    146e:	25 b1       	in	r18, 0x05	; 5
    1470:	23 23       	and	r18, r19
    1472:	25 b9       	out	0x05, r18	; 5
    delay_cycles (2*rx_bitcycles-irsend_cycles)
    1474:	2e ea       	ldi	r18, 0xAE	; 174
    1476:	2a 95       	dec	r18
    1478:	f1 f7       	brne	.-4      	; 0x1476 <message_send+0x3a>

    ldi tmpreg1, rx_bitcycles*7/8
    147a:	2b ee       	ldi	r18, 0xEB	; 235

0000147c <checkcollision>:
checkcollision:
    ; if (ACSR&(1<<ACO)) == 0 goto nocollision
    in tmpreg2, ACSR
    147c:	30 b7       	in	r19, 0x30	; 48
    sbrs tmpreg2, ACO
    147e:	35 ff       	sbrs	r19, 5
    rjmp nocollision
    1480:	0a c0       	rjmp	.+20     	; 0x1496 <nocollision>
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    1482:	a4 b9       	out	0x04, r26	; 4
    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1484:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
    1488:	30 95       	com	r19
    in tmpreg1, IR_PORT
    148a:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    148c:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    148e:	25 b9       	out	0x05, r18	; 5
    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    1490:	0f be       	out	0x3f, r0	; 63
    return 0
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	08 95       	ret

00001496 <nocollision>:
nocollision:
    nop
    1496:	00 00       	nop
    dec tmpreg1
    1498:	2a 95       	dec	r18
    brne checkcollision
    149a:	81 f7       	brne	.-32     	; 0x147c <checkcollision>

    ldi tmpreg1, 0x01
    149c:	21 e0       	ldi	r18, 0x01	; 1
    irsend
    149e:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    14a2:	20 30       	cpi	r18, 0x00	; 0
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <nocollision+0x1a>
    14a6:	00 00       	nop
    14a8:	25 b1       	in	r18, 0x05	; 5
    14aa:	23 2b       	or	r18, r19
    14ac:	25 b9       	out	0x05, r18	; 5
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <nocollision+0x22>
    14b0:	00 00       	nop
    14b2:	00 00       	nop
    14b4:	00 00       	nop
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <nocollision+0x22>
    14b8:	00 00       	nop
    14ba:	00 00       	nop
    14bc:	00 00       	nop
    14be:	30 95       	com	r19
    14c0:	25 b1       	in	r18, 0x05	; 5
    14c2:	23 23       	and	r18, r19
    14c4:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles)
    14c6:	00 00       	nop
    14c8:	24 e5       	ldi	r18, 0x54	; 84
    14ca:	2a 95       	dec	r18
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <nocollision+0x34>

    movw r30, r24     ; // copy msg pointer in r24:r25 to r30:r31
    14ce:	fc 01       	movw	r30, r24
    ldi byteidx, 12
    14d0:	8c e0       	ldi	r24, 0x0C	; 12

000014d2 <sendbyte>:

sendbyte:
    ; byteval = msg[i++]<<1 | (1<<0) | (1<<9)
    ld bytevalL, Z+
    14d2:	61 91       	ld	r22, Z+
    ldi bytevalH, 0x00
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    add bytevalL, bytevalL
    14d6:	66 0f       	add	r22, r22
    adc bytevalH, bytevalH
    14d8:	77 1f       	adc	r23, r23
    ori bytevalL, 0x01
    14da:	61 60       	ori	r22, 0x01	; 1
    ori bytevalH, 0x02
    14dc:	72 60       	ori	r23, 0x02	; 2
    ; bitidex = 10
    ldi bitidx, 10
    14de:	9a e0       	ldi	r25, 0x0A	; 10
    ; bitmask = 0x00001
    ldi bitmaskL, 0x01
    14e0:	41 e0       	ldi	r20, 0x01	; 1
    ldi bitmaskH, 0x00
    14e2:	50 e0       	ldi	r21, 0x00	; 0

000014e4 <sendbit>:

    ; 9 cycles per iteration + irsend
sendbit:
    ; tmpreg = (byteval&bytemask)
    movw tmpreg1, bitmaskL
    14e4:	9a 01       	movw	r18, r20
    and tmpreg1, bytevalL
    14e6:	26 23       	and	r18, r22
    and tmpreg2, bytevalH
    14e8:	37 23       	and	r19, r23
    or  tmpreg1, tmpreg2
    14ea:	23 2b       	or	r18, r19

    ; irsend tmpreg
    irsend
    14ec:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    14f0:	20 30       	cpi	r18, 0x00	; 0
    14f2:	29 f0       	breq	.+10     	; 0x14fe <sendbit+0x1a>
    14f4:	00 00       	nop
    14f6:	25 b1       	in	r18, 0x05	; 5
    14f8:	23 2b       	or	r18, r19
    14fa:	25 b9       	out	0x05, r18	; 5
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <sendbit+0x22>
    14fe:	00 00       	nop
    1500:	00 00       	nop
    1502:	00 00       	nop
    1504:	00 c0       	rjmp	.+0      	; 0x1506 <sendbit+0x22>
    1506:	00 00       	nop
    1508:	00 00       	nop
    150a:	00 00       	nop
    150c:	30 95       	com	r19
    150e:	25 b1       	in	r18, 0x05	; 5
    1510:	23 23       	and	r18, r19
    1512:	25 b9       	out	0x05, r18	; 5
    delay_cycles (rx_bitcycles-irsend_cycles-9)
    1514:	00 00       	nop
    1516:	21 e5       	ldi	r18, 0x51	; 81
    1518:	2a 95       	dec	r18
    151a:	f1 f7       	brne	.-4      	; 0x1518 <sendbit+0x34>

    ; bitmask <<= 1
    add bitmaskL, bitmaskL
    151c:	44 0f       	add	r20, r20
    adc bitmaskH, bitmaskH
    151e:	55 1f       	adc	r21, r21

    ; if (bitidex--) goto sendbit
    dec bitidx
    1520:	9a 95       	dec	r25
    brne sendbit
    1522:	01 f7       	brne	.-64     	; 0x14e4 <sendbit>

    ; if (byteidx--) goto sendbyte
    dec byteidx
    1524:	8a 95       	dec	r24
    brne sendbyte
    1526:	a9 f6       	brne	.-86     	; 0x14d2 <sendbyte>

    ; ACSR |= (1<<ACI)
    in tmpreg1, ACSR
    1528:	20 b7       	in	r18, 0x30	; 48
    ori tmpreg1, (1<<ACI)
    152a:	20 61       	ori	r18, 0x10	; 16
    out ACSR, tmpreg1
    152c:	20 bf       	out	0x30, r18	; 48
    ; IR_DDR = ddrreg
    out IR_DDR, ddrreg
    152e:	a4 b9       	out	0x04, r26	; 4

    ; IR_PORT &= ~(tx_mask)
    lds tmpreg2, tx_mask
    1530:	30 91 2d 01 	lds	r19, 0x012D	; 0x80012d <tx_mask>
    com tmpreg2
    1534:	30 95       	com	r19
    in tmpreg1, IR_PORT
    1536:	25 b1       	in	r18, 0x05	; 5
    and tmpreg1, tmpreg2
    1538:	23 23       	and	r18, r19
    out IR_PORT, tmpreg1
    153a:	25 b9       	out	0x05, r18	; 5

    ; restore interrupt state
    ; SREG = sreg
    out SREG, sreg
    153c:	0f be       	out	0x3f, r0	; 63
    return 1
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	08 95       	ret

00001542 <main>:
}

int main() {
    kilo_init();
    1542:	0e 94 85 00 	call	0x10a	; 0x10a <kilo_init>
    kilo_start(setup, loop);
    1546:	62 e7       	ldi	r22, 0x72	; 114
    1548:	70 e0       	ldi	r23, 0x00	; 0
    154a:	81 e7       	ldi	r24, 0x71	; 113
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	0e 94 81 01 	call	0x302	; 0x302 <kilo_start>

    return 0;
}
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	08 95       	ret

00001558 <__divmodhi4>:
    1558:	97 fb       	bst	r25, 7
    155a:	07 2e       	mov	r0, r23
    155c:	16 f4       	brtc	.+4      	; 0x1562 <__divmodhi4+0xa>
    155e:	00 94       	com	r0
    1560:	07 d0       	rcall	.+14     	; 0x1570 <__divmodhi4_neg1>
    1562:	77 fd       	sbrc	r23, 7
    1564:	09 d0       	rcall	.+18     	; 0x1578 <__divmodhi4_neg2>
    1566:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <__udivmodhi4>
    156a:	07 fc       	sbrc	r0, 7
    156c:	05 d0       	rcall	.+10     	; 0x1578 <__divmodhi4_neg2>
    156e:	3e f4       	brtc	.+14     	; 0x157e <__divmodhi4_exit>

00001570 <__divmodhi4_neg1>:
    1570:	90 95       	com	r25
    1572:	81 95       	neg	r24
    1574:	9f 4f       	sbci	r25, 0xFF	; 255
    1576:	08 95       	ret

00001578 <__divmodhi4_neg2>:
    1578:	70 95       	com	r23
    157a:	61 95       	neg	r22
    157c:	7f 4f       	sbci	r23, 0xFF	; 255

0000157e <__divmodhi4_exit>:
    157e:	08 95       	ret

00001580 <__tablejump2__>:
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	05 90       	lpm	r0, Z+
    1586:	f4 91       	lpm	r31, Z
    1588:	e0 2d       	mov	r30, r0
    158a:	09 94       	ijmp

0000158c <__umulhisi3>:
    158c:	a2 9f       	mul	r26, r18
    158e:	b0 01       	movw	r22, r0
    1590:	b3 9f       	mul	r27, r19
    1592:	c0 01       	movw	r24, r0
    1594:	a3 9f       	mul	r26, r19
    1596:	70 0d       	add	r23, r0
    1598:	81 1d       	adc	r24, r1
    159a:	11 24       	eor	r1, r1
    159c:	91 1d       	adc	r25, r1
    159e:	b2 9f       	mul	r27, r18
    15a0:	70 0d       	add	r23, r0
    15a2:	81 1d       	adc	r24, r1
    15a4:	11 24       	eor	r1, r1
    15a6:	91 1d       	adc	r25, r1
    15a8:	08 95       	ret

000015aa <__udivmodhi4>:
    15aa:	aa 1b       	sub	r26, r26
    15ac:	bb 1b       	sub	r27, r27
    15ae:	51 e1       	ldi	r21, 0x11	; 17
    15b0:	07 c0       	rjmp	.+14     	; 0x15c0 <__udivmodhi4_ep>

000015b2 <__udivmodhi4_loop>:
    15b2:	aa 1f       	adc	r26, r26
    15b4:	bb 1f       	adc	r27, r27
    15b6:	a6 17       	cp	r26, r22
    15b8:	b7 07       	cpc	r27, r23
    15ba:	10 f0       	brcs	.+4      	; 0x15c0 <__udivmodhi4_ep>
    15bc:	a6 1b       	sub	r26, r22
    15be:	b7 0b       	sbc	r27, r23

000015c0 <__udivmodhi4_ep>:
    15c0:	88 1f       	adc	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	5a 95       	dec	r21
    15c6:	a9 f7       	brne	.-22     	; 0x15b2 <__udivmodhi4_loop>
    15c8:	80 95       	com	r24
    15ca:	90 95       	com	r25
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	08 95       	ret

000015d2 <__subsf3>:
    15d2:	50 58       	subi	r21, 0x80	; 128

000015d4 <__addsf3>:
    15d4:	bb 27       	eor	r27, r27
    15d6:	aa 27       	eor	r26, r26
    15d8:	0e 94 01 0b 	call	0x1602	; 0x1602 <__addsf3x>
    15dc:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    15e0:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    15e4:	38 f0       	brcs	.+14     	; 0x15f4 <__addsf3+0x20>
    15e6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    15ea:	20 f0       	brcs	.+8      	; 0x15f4 <__addsf3+0x20>
    15ec:	39 f4       	brne	.+14     	; 0x15fc <__addsf3+0x28>
    15ee:	9f 3f       	cpi	r25, 0xFF	; 255
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <__addsf3+0x24>
    15f2:	26 f4       	brtc	.+8      	; 0x15fc <__addsf3+0x28>
    15f4:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_nan>
    15f8:	0e f4       	brtc	.+2      	; 0x15fc <__addsf3+0x28>
    15fa:	e0 95       	com	r30
    15fc:	e7 fb       	bst	r30, 7
    15fe:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_inf>

00001602 <__addsf3x>:
    1602:	e9 2f       	mov	r30, r25
    1604:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    1608:	58 f3       	brcs	.-42     	; 0x15e0 <__addsf3+0xc>
    160a:	ba 17       	cp	r27, r26
    160c:	62 07       	cpc	r22, r18
    160e:	73 07       	cpc	r23, r19
    1610:	84 07       	cpc	r24, r20
    1612:	95 07       	cpc	r25, r21
    1614:	20 f0       	brcs	.+8      	; 0x161e <__addsf3x+0x1c>
    1616:	79 f4       	brne	.+30     	; 0x1636 <__addsf3x+0x34>
    1618:	a6 f5       	brtc	.+104    	; 0x1682 <__addsf3x+0x80>
    161a:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_zero>
    161e:	0e f4       	brtc	.+2      	; 0x1622 <__addsf3x+0x20>
    1620:	e0 95       	com	r30
    1622:	0b 2e       	mov	r0, r27
    1624:	ba 2f       	mov	r27, r26
    1626:	a0 2d       	mov	r26, r0
    1628:	0b 01       	movw	r0, r22
    162a:	b9 01       	movw	r22, r18
    162c:	90 01       	movw	r18, r0
    162e:	0c 01       	movw	r0, r24
    1630:	ca 01       	movw	r24, r20
    1632:	a0 01       	movw	r20, r0
    1634:	11 24       	eor	r1, r1
    1636:	ff 27       	eor	r31, r31
    1638:	59 1b       	sub	r21, r25
    163a:	99 f0       	breq	.+38     	; 0x1662 <__addsf3x+0x60>
    163c:	59 3f       	cpi	r21, 0xF9	; 249
    163e:	50 f4       	brcc	.+20     	; 0x1654 <__addsf3x+0x52>
    1640:	50 3e       	cpi	r21, 0xE0	; 224
    1642:	68 f1       	brcs	.+90     	; 0x169e <__addsf3x+0x9c>
    1644:	1a 16       	cp	r1, r26
    1646:	f0 40       	sbci	r31, 0x00	; 0
    1648:	a2 2f       	mov	r26, r18
    164a:	23 2f       	mov	r18, r19
    164c:	34 2f       	mov	r19, r20
    164e:	44 27       	eor	r20, r20
    1650:	58 5f       	subi	r21, 0xF8	; 248
    1652:	f3 cf       	rjmp	.-26     	; 0x163a <__addsf3x+0x38>
    1654:	46 95       	lsr	r20
    1656:	37 95       	ror	r19
    1658:	27 95       	ror	r18
    165a:	a7 95       	ror	r26
    165c:	f0 40       	sbci	r31, 0x00	; 0
    165e:	53 95       	inc	r21
    1660:	c9 f7       	brne	.-14     	; 0x1654 <__addsf3x+0x52>
    1662:	7e f4       	brtc	.+30     	; 0x1682 <__addsf3x+0x80>
    1664:	1f 16       	cp	r1, r31
    1666:	ba 0b       	sbc	r27, r26
    1668:	62 0b       	sbc	r22, r18
    166a:	73 0b       	sbc	r23, r19
    166c:	84 0b       	sbc	r24, r20
    166e:	ba f0       	brmi	.+46     	; 0x169e <__addsf3x+0x9c>
    1670:	91 50       	subi	r25, 0x01	; 1
    1672:	a1 f0       	breq	.+40     	; 0x169c <__addsf3x+0x9a>
    1674:	ff 0f       	add	r31, r31
    1676:	bb 1f       	adc	r27, r27
    1678:	66 1f       	adc	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	c2 f7       	brpl	.-16     	; 0x1670 <__addsf3x+0x6e>
    1680:	0e c0       	rjmp	.+28     	; 0x169e <__addsf3x+0x9c>
    1682:	ba 0f       	add	r27, r26
    1684:	62 1f       	adc	r22, r18
    1686:	73 1f       	adc	r23, r19
    1688:	84 1f       	adc	r24, r20
    168a:	48 f4       	brcc	.+18     	; 0x169e <__addsf3x+0x9c>
    168c:	87 95       	ror	r24
    168e:	77 95       	ror	r23
    1690:	67 95       	ror	r22
    1692:	b7 95       	ror	r27
    1694:	f7 95       	ror	r31
    1696:	9e 3f       	cpi	r25, 0xFE	; 254
    1698:	08 f0       	brcs	.+2      	; 0x169c <__addsf3x+0x9a>
    169a:	b0 cf       	rjmp	.-160    	; 0x15fc <__addsf3+0x28>
    169c:	93 95       	inc	r25
    169e:	88 0f       	add	r24, r24
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <__addsf3x+0xa2>
    16a2:	99 27       	eor	r25, r25
    16a4:	ee 0f       	add	r30, r30
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	08 95       	ret

000016ac <__divsf3>:
    16ac:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__divsf3x>
    16b0:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    16b4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    16b8:	58 f0       	brcs	.+22     	; 0x16d0 <__divsf3+0x24>
    16ba:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    16be:	40 f0       	brcs	.+16     	; 0x16d0 <__divsf3+0x24>
    16c0:	29 f4       	brne	.+10     	; 0x16cc <__divsf3+0x20>
    16c2:	5f 3f       	cpi	r21, 0xFF	; 255
    16c4:	29 f0       	breq	.+10     	; 0x16d0 <__divsf3+0x24>
    16c6:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_inf>
    16ca:	51 11       	cpse	r21, r1
    16cc:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    16d0:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_nan>

000016d4 <__divsf3x>:
    16d4:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    16d8:	68 f3       	brcs	.-38     	; 0x16b4 <__divsf3+0x8>

000016da <__divsf3_pse>:
    16da:	99 23       	and	r25, r25
    16dc:	b1 f3       	breq	.-20     	; 0x16ca <__divsf3+0x1e>
    16de:	55 23       	and	r21, r21
    16e0:	91 f3       	breq	.-28     	; 0x16c6 <__divsf3+0x1a>
    16e2:	95 1b       	sub	r25, r21
    16e4:	55 0b       	sbc	r21, r21
    16e6:	bb 27       	eor	r27, r27
    16e8:	aa 27       	eor	r26, r26
    16ea:	62 17       	cp	r22, r18
    16ec:	73 07       	cpc	r23, r19
    16ee:	84 07       	cpc	r24, r20
    16f0:	38 f0       	brcs	.+14     	; 0x1700 <__divsf3_pse+0x26>
    16f2:	9f 5f       	subi	r25, 0xFF	; 255
    16f4:	5f 4f       	sbci	r21, 0xFF	; 255
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	44 1f       	adc	r20, r20
    16fc:	aa 1f       	adc	r26, r26
    16fe:	a9 f3       	breq	.-22     	; 0x16ea <__divsf3_pse+0x10>
    1700:	35 d0       	rcall	.+106    	; 0x176c <__divsf3_pse+0x92>
    1702:	0e 2e       	mov	r0, r30
    1704:	3a f0       	brmi	.+14     	; 0x1714 <__divsf3_pse+0x3a>
    1706:	e0 e8       	ldi	r30, 0x80	; 128
    1708:	32 d0       	rcall	.+100    	; 0x176e <__divsf3_pse+0x94>
    170a:	91 50       	subi	r25, 0x01	; 1
    170c:	50 40       	sbci	r21, 0x00	; 0
    170e:	e6 95       	lsr	r30
    1710:	00 1c       	adc	r0, r0
    1712:	ca f7       	brpl	.-14     	; 0x1706 <__divsf3_pse+0x2c>
    1714:	2b d0       	rcall	.+86     	; 0x176c <__divsf3_pse+0x92>
    1716:	fe 2f       	mov	r31, r30
    1718:	29 d0       	rcall	.+82     	; 0x176c <__divsf3_pse+0x92>
    171a:	66 0f       	add	r22, r22
    171c:	77 1f       	adc	r23, r23
    171e:	88 1f       	adc	r24, r24
    1720:	bb 1f       	adc	r27, r27
    1722:	26 17       	cp	r18, r22
    1724:	37 07       	cpc	r19, r23
    1726:	48 07       	cpc	r20, r24
    1728:	ab 07       	cpc	r26, r27
    172a:	b0 e8       	ldi	r27, 0x80	; 128
    172c:	09 f0       	breq	.+2      	; 0x1730 <__divsf3_pse+0x56>
    172e:	bb 0b       	sbc	r27, r27
    1730:	80 2d       	mov	r24, r0
    1732:	bf 01       	movw	r22, r30
    1734:	ff 27       	eor	r31, r31
    1736:	93 58       	subi	r25, 0x83	; 131
    1738:	5f 4f       	sbci	r21, 0xFF	; 255
    173a:	3a f0       	brmi	.+14     	; 0x174a <__divsf3_pse+0x70>
    173c:	9e 3f       	cpi	r25, 0xFE	; 254
    173e:	51 05       	cpc	r21, r1
    1740:	78 f0       	brcs	.+30     	; 0x1760 <__divsf3_pse+0x86>
    1742:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_inf>
    1746:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    174a:	5f 3f       	cpi	r21, 0xFF	; 255
    174c:	e4 f3       	brlt	.-8      	; 0x1746 <__divsf3_pse+0x6c>
    174e:	98 3e       	cpi	r25, 0xE8	; 232
    1750:	d4 f3       	brlt	.-12     	; 0x1746 <__divsf3_pse+0x6c>
    1752:	86 95       	lsr	r24
    1754:	77 95       	ror	r23
    1756:	67 95       	ror	r22
    1758:	b7 95       	ror	r27
    175a:	f7 95       	ror	r31
    175c:	9f 5f       	subi	r25, 0xFF	; 255
    175e:	c9 f7       	brne	.-14     	; 0x1752 <__divsf3_pse+0x78>
    1760:	88 0f       	add	r24, r24
    1762:	91 1d       	adc	r25, r1
    1764:	96 95       	lsr	r25
    1766:	87 95       	ror	r24
    1768:	97 f9       	bld	r25, 7
    176a:	08 95       	ret
    176c:	e1 e0       	ldi	r30, 0x01	; 1
    176e:	66 0f       	add	r22, r22
    1770:	77 1f       	adc	r23, r23
    1772:	88 1f       	adc	r24, r24
    1774:	bb 1f       	adc	r27, r27
    1776:	62 17       	cp	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	84 07       	cpc	r24, r20
    177c:	ba 07       	cpc	r27, r26
    177e:	20 f0       	brcs	.+8      	; 0x1788 <__divsf3_pse+0xae>
    1780:	62 1b       	sub	r22, r18
    1782:	73 0b       	sbc	r23, r19
    1784:	84 0b       	sbc	r24, r20
    1786:	ba 0b       	sbc	r27, r26
    1788:	ee 1f       	adc	r30, r30
    178a:	88 f7       	brcc	.-30     	; 0x176e <__divsf3_pse+0x94>
    178c:	e0 95       	com	r30
    178e:	08 95       	ret

00001790 <__fixsfsi>:
    1790:	0e 94 cf 0b 	call	0x179e	; 0x179e <__fixunssfsi>
    1794:	68 94       	set
    1796:	b1 11       	cpse	r27, r1
    1798:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    179c:	08 95       	ret

0000179e <__fixunssfsi>:
    179e:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <__fp_splitA>
    17a2:	88 f0       	brcs	.+34     	; 0x17c6 <__fixunssfsi+0x28>
    17a4:	9f 57       	subi	r25, 0x7F	; 127
    17a6:	98 f0       	brcs	.+38     	; 0x17ce <__fixunssfsi+0x30>
    17a8:	b9 2f       	mov	r27, r25
    17aa:	99 27       	eor	r25, r25
    17ac:	b7 51       	subi	r27, 0x17	; 23
    17ae:	b0 f0       	brcs	.+44     	; 0x17dc <__fixunssfsi+0x3e>
    17b0:	e1 f0       	breq	.+56     	; 0x17ea <__fixunssfsi+0x4c>
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	88 1f       	adc	r24, r24
    17b8:	99 1f       	adc	r25, r25
    17ba:	1a f0       	brmi	.+6      	; 0x17c2 <__fixunssfsi+0x24>
    17bc:	ba 95       	dec	r27
    17be:	c9 f7       	brne	.-14     	; 0x17b2 <__fixunssfsi+0x14>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <__fixunssfsi+0x4c>
    17c2:	b1 30       	cpi	r27, 0x01	; 1
    17c4:	91 f0       	breq	.+36     	; 0x17ea <__fixunssfsi+0x4c>
    17c6:	0e 94 85 0c 	call	0x190a	; 0x190a <__fp_zero>
    17ca:	b1 e0       	ldi	r27, 0x01	; 1
    17cc:	08 95       	ret
    17ce:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__fp_zero>
    17d2:	67 2f       	mov	r22, r23
    17d4:	78 2f       	mov	r23, r24
    17d6:	88 27       	eor	r24, r24
    17d8:	b8 5f       	subi	r27, 0xF8	; 248
    17da:	39 f0       	breq	.+14     	; 0x17ea <__fixunssfsi+0x4c>
    17dc:	b9 3f       	cpi	r27, 0xF9	; 249
    17de:	cc f3       	brlt	.-14     	; 0x17d2 <__fixunssfsi+0x34>
    17e0:	86 95       	lsr	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	b3 95       	inc	r27
    17e8:	d9 f7       	brne	.-10     	; 0x17e0 <__fixunssfsi+0x42>
    17ea:	3e f4       	brtc	.+14     	; 0x17fa <__fixunssfsi+0x5c>
    17ec:	90 95       	com	r25
    17ee:	80 95       	com	r24
    17f0:	70 95       	com	r23
    17f2:	61 95       	neg	r22
    17f4:	7f 4f       	sbci	r23, 0xFF	; 255
    17f6:	8f 4f       	sbci	r24, 0xFF	; 255
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	08 95       	ret

000017fc <__floatunsisf>:
    17fc:	e8 94       	clt
    17fe:	09 c0       	rjmp	.+18     	; 0x1812 <__floatsisf+0x12>

00001800 <__floatsisf>:
    1800:	97 fb       	bst	r25, 7
    1802:	3e f4       	brtc	.+14     	; 0x1812 <__floatsisf+0x12>
    1804:	90 95       	com	r25
    1806:	80 95       	com	r24
    1808:	70 95       	com	r23
    180a:	61 95       	neg	r22
    180c:	7f 4f       	sbci	r23, 0xFF	; 255
    180e:	8f 4f       	sbci	r24, 0xFF	; 255
    1810:	9f 4f       	sbci	r25, 0xFF	; 255
    1812:	99 23       	and	r25, r25
    1814:	a9 f0       	breq	.+42     	; 0x1840 <__floatsisf+0x40>
    1816:	f9 2f       	mov	r31, r25
    1818:	96 e9       	ldi	r25, 0x96	; 150
    181a:	bb 27       	eor	r27, r27
    181c:	93 95       	inc	r25
    181e:	f6 95       	lsr	r31
    1820:	87 95       	ror	r24
    1822:	77 95       	ror	r23
    1824:	67 95       	ror	r22
    1826:	b7 95       	ror	r27
    1828:	f1 11       	cpse	r31, r1
    182a:	f8 cf       	rjmp	.-16     	; 0x181c <__floatsisf+0x1c>
    182c:	fa f4       	brpl	.+62     	; 0x186c <__floatsisf+0x6c>
    182e:	bb 0f       	add	r27, r27
    1830:	11 f4       	brne	.+4      	; 0x1836 <__floatsisf+0x36>
    1832:	60 ff       	sbrs	r22, 0
    1834:	1b c0       	rjmp	.+54     	; 0x186c <__floatsisf+0x6c>
    1836:	6f 5f       	subi	r22, 0xFF	; 255
    1838:	7f 4f       	sbci	r23, 0xFF	; 255
    183a:	8f 4f       	sbci	r24, 0xFF	; 255
    183c:	9f 4f       	sbci	r25, 0xFF	; 255
    183e:	16 c0       	rjmp	.+44     	; 0x186c <__floatsisf+0x6c>
    1840:	88 23       	and	r24, r24
    1842:	11 f0       	breq	.+4      	; 0x1848 <__floatsisf+0x48>
    1844:	96 e9       	ldi	r25, 0x96	; 150
    1846:	11 c0       	rjmp	.+34     	; 0x186a <__floatsisf+0x6a>
    1848:	77 23       	and	r23, r23
    184a:	21 f0       	breq	.+8      	; 0x1854 <__floatsisf+0x54>
    184c:	9e e8       	ldi	r25, 0x8E	; 142
    184e:	87 2f       	mov	r24, r23
    1850:	76 2f       	mov	r23, r22
    1852:	05 c0       	rjmp	.+10     	; 0x185e <__floatsisf+0x5e>
    1854:	66 23       	and	r22, r22
    1856:	71 f0       	breq	.+28     	; 0x1874 <__floatsisf+0x74>
    1858:	96 e8       	ldi	r25, 0x86	; 134
    185a:	86 2f       	mov	r24, r22
    185c:	70 e0       	ldi	r23, 0x00	; 0
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	2a f0       	brmi	.+10     	; 0x186c <__floatsisf+0x6c>
    1862:	9a 95       	dec	r25
    1864:	66 0f       	add	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	88 1f       	adc	r24, r24
    186a:	da f7       	brpl	.-10     	; 0x1862 <__floatsisf+0x62>
    186c:	88 0f       	add	r24, r24
    186e:	96 95       	lsr	r25
    1870:	87 95       	ror	r24
    1872:	97 f9       	bld	r25, 7
    1874:	08 95       	ret

00001876 <__fp_inf>:
    1876:	97 f9       	bld	r25, 7
    1878:	9f 67       	ori	r25, 0x7F	; 127
    187a:	80 e8       	ldi	r24, 0x80	; 128
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	60 e0       	ldi	r22, 0x00	; 0
    1880:	08 95       	ret

00001882 <__fp_nan>:
    1882:	9f ef       	ldi	r25, 0xFF	; 255
    1884:	80 ec       	ldi	r24, 0xC0	; 192
    1886:	08 95       	ret

00001888 <__fp_pscA>:
    1888:	00 24       	eor	r0, r0
    188a:	0a 94       	dec	r0
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	18 06       	cpc	r1, r24
    1892:	09 06       	cpc	r0, r25
    1894:	08 95       	ret

00001896 <__fp_pscB>:
    1896:	00 24       	eor	r0, r0
    1898:	0a 94       	dec	r0
    189a:	12 16       	cp	r1, r18
    189c:	13 06       	cpc	r1, r19
    189e:	14 06       	cpc	r1, r20
    18a0:	05 06       	cpc	r0, r21
    18a2:	08 95       	ret

000018a4 <__fp_round>:
    18a4:	09 2e       	mov	r0, r25
    18a6:	03 94       	inc	r0
    18a8:	00 0c       	add	r0, r0
    18aa:	11 f4       	brne	.+4      	; 0x18b0 <__fp_round+0xc>
    18ac:	88 23       	and	r24, r24
    18ae:	52 f0       	brmi	.+20     	; 0x18c4 <__fp_round+0x20>
    18b0:	bb 0f       	add	r27, r27
    18b2:	40 f4       	brcc	.+16     	; 0x18c4 <__fp_round+0x20>
    18b4:	bf 2b       	or	r27, r31
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__fp_round+0x18>
    18b8:	60 ff       	sbrs	r22, 0
    18ba:	04 c0       	rjmp	.+8      	; 0x18c4 <__fp_round+0x20>
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	08 95       	ret

000018c6 <__fp_split3>:
    18c6:	57 fd       	sbrc	r21, 7
    18c8:	90 58       	subi	r25, 0x80	; 128
    18ca:	44 0f       	add	r20, r20
    18cc:	55 1f       	adc	r21, r21
    18ce:	59 f0       	breq	.+22     	; 0x18e6 <__fp_splitA+0x10>
    18d0:	5f 3f       	cpi	r21, 0xFF	; 255
    18d2:	71 f0       	breq	.+28     	; 0x18f0 <__fp_splitA+0x1a>
    18d4:	47 95       	ror	r20

000018d6 <__fp_splitA>:
    18d6:	88 0f       	add	r24, r24
    18d8:	97 fb       	bst	r25, 7
    18da:	99 1f       	adc	r25, r25
    18dc:	61 f0       	breq	.+24     	; 0x18f6 <__fp_splitA+0x20>
    18de:	9f 3f       	cpi	r25, 0xFF	; 255
    18e0:	79 f0       	breq	.+30     	; 0x1900 <__fp_splitA+0x2a>
    18e2:	87 95       	ror	r24
    18e4:	08 95       	ret
    18e6:	12 16       	cp	r1, r18
    18e8:	13 06       	cpc	r1, r19
    18ea:	14 06       	cpc	r1, r20
    18ec:	55 1f       	adc	r21, r21
    18ee:	f2 cf       	rjmp	.-28     	; 0x18d4 <__fp_split3+0xe>
    18f0:	46 95       	lsr	r20
    18f2:	f1 df       	rcall	.-30     	; 0x18d6 <__fp_splitA>
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <__fp_splitA+0x30>
    18f6:	16 16       	cp	r1, r22
    18f8:	17 06       	cpc	r1, r23
    18fa:	18 06       	cpc	r1, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	f1 cf       	rjmp	.-30     	; 0x18e2 <__fp_splitA+0xc>
    1900:	86 95       	lsr	r24
    1902:	71 05       	cpc	r23, r1
    1904:	61 05       	cpc	r22, r1
    1906:	08 94       	sec
    1908:	08 95       	ret

0000190a <__fp_zero>:
    190a:	e8 94       	clt

0000190c <__fp_szero>:
    190c:	bb 27       	eor	r27, r27
    190e:	66 27       	eor	r22, r22
    1910:	77 27       	eor	r23, r23
    1912:	cb 01       	movw	r24, r22
    1914:	97 f9       	bld	r25, 7
    1916:	08 95       	ret

00001918 <__mulsf3>:
    1918:	0e 94 9f 0c 	call	0x193e	; 0x193e <__mulsf3x>
    191c:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <__fp_round>
    1920:	0e 94 44 0c 	call	0x1888	; 0x1888 <__fp_pscA>
    1924:	38 f0       	brcs	.+14     	; 0x1934 <__mulsf3+0x1c>
    1926:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__fp_pscB>
    192a:	20 f0       	brcs	.+8      	; 0x1934 <__mulsf3+0x1c>
    192c:	95 23       	and	r25, r21
    192e:	11 f0       	breq	.+4      	; 0x1934 <__mulsf3+0x1c>
    1930:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_inf>
    1934:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__fp_nan>
    1938:	11 24       	eor	r1, r1
    193a:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>

0000193e <__mulsf3x>:
    193e:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <__fp_split3>
    1942:	70 f3       	brcs	.-36     	; 0x1920 <__mulsf3+0x8>

00001944 <__mulsf3_pse>:
    1944:	95 9f       	mul	r25, r21
    1946:	c1 f3       	breq	.-16     	; 0x1938 <__mulsf3+0x20>
    1948:	95 0f       	add	r25, r21
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	55 1f       	adc	r21, r21
    194e:	62 9f       	mul	r22, r18
    1950:	f0 01       	movw	r30, r0
    1952:	72 9f       	mul	r23, r18
    1954:	bb 27       	eor	r27, r27
    1956:	f0 0d       	add	r31, r0
    1958:	b1 1d       	adc	r27, r1
    195a:	63 9f       	mul	r22, r19
    195c:	aa 27       	eor	r26, r26
    195e:	f0 0d       	add	r31, r0
    1960:	b1 1d       	adc	r27, r1
    1962:	aa 1f       	adc	r26, r26
    1964:	64 9f       	mul	r22, r20
    1966:	66 27       	eor	r22, r22
    1968:	b0 0d       	add	r27, r0
    196a:	a1 1d       	adc	r26, r1
    196c:	66 1f       	adc	r22, r22
    196e:	82 9f       	mul	r24, r18
    1970:	22 27       	eor	r18, r18
    1972:	b0 0d       	add	r27, r0
    1974:	a1 1d       	adc	r26, r1
    1976:	62 1f       	adc	r22, r18
    1978:	73 9f       	mul	r23, r19
    197a:	b0 0d       	add	r27, r0
    197c:	a1 1d       	adc	r26, r1
    197e:	62 1f       	adc	r22, r18
    1980:	83 9f       	mul	r24, r19
    1982:	a0 0d       	add	r26, r0
    1984:	61 1d       	adc	r22, r1
    1986:	22 1f       	adc	r18, r18
    1988:	74 9f       	mul	r23, r20
    198a:	33 27       	eor	r19, r19
    198c:	a0 0d       	add	r26, r0
    198e:	61 1d       	adc	r22, r1
    1990:	23 1f       	adc	r18, r19
    1992:	84 9f       	mul	r24, r20
    1994:	60 0d       	add	r22, r0
    1996:	21 1d       	adc	r18, r1
    1998:	82 2f       	mov	r24, r18
    199a:	76 2f       	mov	r23, r22
    199c:	6a 2f       	mov	r22, r26
    199e:	11 24       	eor	r1, r1
    19a0:	9f 57       	subi	r25, 0x7F	; 127
    19a2:	50 40       	sbci	r21, 0x00	; 0
    19a4:	9a f0       	brmi	.+38     	; 0x19cc <__mulsf3_pse+0x88>
    19a6:	f1 f0       	breq	.+60     	; 0x19e4 <__mulsf3_pse+0xa0>
    19a8:	88 23       	and	r24, r24
    19aa:	4a f0       	brmi	.+18     	; 0x19be <__mulsf3_pse+0x7a>
    19ac:	ee 0f       	add	r30, r30
    19ae:	ff 1f       	adc	r31, r31
    19b0:	bb 1f       	adc	r27, r27
    19b2:	66 1f       	adc	r22, r22
    19b4:	77 1f       	adc	r23, r23
    19b6:	88 1f       	adc	r24, r24
    19b8:	91 50       	subi	r25, 0x01	; 1
    19ba:	50 40       	sbci	r21, 0x00	; 0
    19bc:	a9 f7       	brne	.-22     	; 0x19a8 <__mulsf3_pse+0x64>
    19be:	9e 3f       	cpi	r25, 0xFE	; 254
    19c0:	51 05       	cpc	r21, r1
    19c2:	80 f0       	brcs	.+32     	; 0x19e4 <__mulsf3_pse+0xa0>
    19c4:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__fp_inf>
    19c8:	0c 94 86 0c 	jmp	0x190c	; 0x190c <__fp_szero>
    19cc:	5f 3f       	cpi	r21, 0xFF	; 255
    19ce:	e4 f3       	brlt	.-8      	; 0x19c8 <__mulsf3_pse+0x84>
    19d0:	98 3e       	cpi	r25, 0xE8	; 232
    19d2:	d4 f3       	brlt	.-12     	; 0x19c8 <__mulsf3_pse+0x84>
    19d4:	86 95       	lsr	r24
    19d6:	77 95       	ror	r23
    19d8:	67 95       	ror	r22
    19da:	b7 95       	ror	r27
    19dc:	f7 95       	ror	r31
    19de:	e7 95       	ror	r30
    19e0:	9f 5f       	subi	r25, 0xFF	; 255
    19e2:	c1 f7       	brne	.-16     	; 0x19d4 <__mulsf3_pse+0x90>
    19e4:	fe 2b       	or	r31, r30
    19e6:	88 0f       	add	r24, r24
    19e8:	91 1d       	adc	r25, r1
    19ea:	96 95       	lsr	r25
    19ec:	87 95       	ror	r24
    19ee:	97 f9       	bld	r25, 7
    19f0:	08 95       	ret

000019f2 <do_rand>:
    19f2:	8f 92       	push	r8
    19f4:	9f 92       	push	r9
    19f6:	af 92       	push	r10
    19f8:	bf 92       	push	r11
    19fa:	cf 92       	push	r12
    19fc:	df 92       	push	r13
    19fe:	ef 92       	push	r14
    1a00:	ff 92       	push	r15
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	ec 01       	movw	r28, r24
    1a08:	68 81       	ld	r22, Y
    1a0a:	79 81       	ldd	r23, Y+1	; 0x01
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	61 15       	cp	r22, r1
    1a12:	71 05       	cpc	r23, r1
    1a14:	81 05       	cpc	r24, r1
    1a16:	91 05       	cpc	r25, r1
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <do_rand+0x30>
    1a1a:	64 e2       	ldi	r22, 0x24	; 36
    1a1c:	79 ed       	ldi	r23, 0xD9	; 217
    1a1e:	8b e5       	ldi	r24, 0x5B	; 91
    1a20:	97 e0       	ldi	r25, 0x07	; 7
    1a22:	2d e1       	ldi	r18, 0x1D	; 29
    1a24:	33 ef       	ldi	r19, 0xF3	; 243
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	50 e0       	ldi	r21, 0x00	; 0
    1a2a:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <__divmodsi4>
    1a2e:	49 01       	movw	r8, r18
    1a30:	5a 01       	movw	r10, r20
    1a32:	9b 01       	movw	r18, r22
    1a34:	ac 01       	movw	r20, r24
    1a36:	a7 ea       	ldi	r26, 0xA7	; 167
    1a38:	b1 e4       	ldi	r27, 0x41	; 65
    1a3a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muluhisi3>
    1a3e:	6b 01       	movw	r12, r22
    1a40:	7c 01       	movw	r14, r24
    1a42:	ac ee       	ldi	r26, 0xEC	; 236
    1a44:	b4 ef       	ldi	r27, 0xF4	; 244
    1a46:	a5 01       	movw	r20, r10
    1a48:	94 01       	movw	r18, r8
    1a4a:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__mulohisi3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8c 0d       	add	r24, r12
    1a54:	9d 1d       	adc	r25, r13
    1a56:	ae 1d       	adc	r26, r14
    1a58:	bf 1d       	adc	r27, r15
    1a5a:	b7 ff       	sbrs	r27, 7
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <do_rand+0x72>
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	a1 09       	sbc	r26, r1
    1a62:	b0 48       	sbci	r27, 0x80	; 128
    1a64:	88 83       	st	Y, r24
    1a66:	99 83       	std	Y+1, r25	; 0x01
    1a68:	aa 83       	std	Y+2, r26	; 0x02
    1a6a:	bb 83       	std	Y+3, r27	; 0x03
    1a6c:	9f 77       	andi	r25, 0x7F	; 127
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	ff 90       	pop	r15
    1a74:	ef 90       	pop	r14
    1a76:	df 90       	pop	r13
    1a78:	cf 90       	pop	r12
    1a7a:	bf 90       	pop	r11
    1a7c:	af 90       	pop	r10
    1a7e:	9f 90       	pop	r9
    1a80:	8f 90       	pop	r8
    1a82:	08 95       	ret

00001a84 <rand_r>:
    1a84:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <do_rand>
    1a88:	08 95       	ret

00001a8a <rand>:
    1a8a:	87 e0       	ldi	r24, 0x07	; 7
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <do_rand>
    1a92:	08 95       	ret

00001a94 <srand>:
    1a94:	a0 e0       	ldi	r26, 0x00	; 0
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <next>
    1a9c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <next+0x1>
    1aa0:	a0 93 09 01 	sts	0x0109, r26	; 0x800109 <next+0x2>
    1aa4:	b0 93 0a 01 	sts	0x010A, r27	; 0x80010a <next+0x3>
    1aa8:	08 95       	ret

00001aaa <eeprom_read_byte>:
    1aaa:	f9 99       	sbic	0x1f, 1	; 31
    1aac:	fe cf       	rjmp	.-4      	; 0x1aaa <eeprom_read_byte>
    1aae:	92 bd       	out	0x22, r25	; 34
    1ab0:	81 bd       	out	0x21, r24	; 33
    1ab2:	f8 9a       	sbi	0x1f, 0	; 31
    1ab4:	99 27       	eor	r25, r25
    1ab6:	80 b5       	in	r24, 0x20	; 32
    1ab8:	08 95       	ret

00001aba <eeprom_write_byte>:
    1aba:	26 2f       	mov	r18, r22

00001abc <eeprom_write_r18>:
    1abc:	f9 99       	sbic	0x1f, 1	; 31
    1abe:	fe cf       	rjmp	.-4      	; 0x1abc <eeprom_write_r18>
    1ac0:	1f ba       	out	0x1f, r1	; 31
    1ac2:	92 bd       	out	0x22, r25	; 34
    1ac4:	81 bd       	out	0x21, r24	; 33
    1ac6:	20 bd       	out	0x20, r18	; 32
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	fa 9a       	sbi	0x1f, 2	; 31
    1ace:	f9 9a       	sbi	0x1f, 1	; 31
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	08 95       	ret

00001ad6 <__divmodsi4>:
    1ad6:	05 2e       	mov	r0, r21
    1ad8:	97 fb       	bst	r25, 7
    1ada:	1e f4       	brtc	.+6      	; 0x1ae2 <__divmodsi4+0xc>
    1adc:	00 94       	com	r0
    1ade:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__negsi2>
    1ae2:	57 fd       	sbrc	r21, 7
    1ae4:	07 d0       	rcall	.+14     	; 0x1af4 <__divmodsi4_neg2>
    1ae6:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__udivmodsi4>
    1aea:	07 fc       	sbrc	r0, 7
    1aec:	03 d0       	rcall	.+6      	; 0x1af4 <__divmodsi4_neg2>
    1aee:	4e f4       	brtc	.+18     	; 0x1b02 <__divmodsi4_exit>
    1af0:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__negsi2>

00001af4 <__divmodsi4_neg2>:
    1af4:	50 95       	com	r21
    1af6:	40 95       	com	r20
    1af8:	30 95       	com	r19
    1afa:	21 95       	neg	r18
    1afc:	3f 4f       	sbci	r19, 0xFF	; 255
    1afe:	4f 4f       	sbci	r20, 0xFF	; 255
    1b00:	5f 4f       	sbci	r21, 0xFF	; 255

00001b02 <__divmodsi4_exit>:
    1b02:	08 95       	ret

00001b04 <__negsi2>:
    1b04:	90 95       	com	r25
    1b06:	80 95       	com	r24
    1b08:	70 95       	com	r23
    1b0a:	61 95       	neg	r22
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b10:	9f 4f       	sbci	r25, 0xFF	; 255
    1b12:	08 95       	ret

00001b14 <__muluhisi3>:
    1b14:	0e 94 c6 0a 	call	0x158c	; 0x158c <__umulhisi3>
    1b18:	a5 9f       	mul	r26, r21
    1b1a:	90 0d       	add	r25, r0
    1b1c:	b4 9f       	mul	r27, r20
    1b1e:	90 0d       	add	r25, r0
    1b20:	a4 9f       	mul	r26, r20
    1b22:	80 0d       	add	r24, r0
    1b24:	91 1d       	adc	r25, r1
    1b26:	11 24       	eor	r1, r1
    1b28:	08 95       	ret

00001b2a <__mulshisi3>:
    1b2a:	b7 ff       	sbrs	r27, 7
    1b2c:	0c 94 8a 0d 	jmp	0x1b14	; 0x1b14 <__muluhisi3>

00001b30 <__mulohisi3>:
    1b30:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <__muluhisi3>
    1b34:	82 1b       	sub	r24, r18
    1b36:	93 0b       	sbc	r25, r19
    1b38:	08 95       	ret

00001b3a <__udivmodsi4>:
    1b3a:	a1 e2       	ldi	r26, 0x21	; 33
    1b3c:	1a 2e       	mov	r1, r26
    1b3e:	aa 1b       	sub	r26, r26
    1b40:	bb 1b       	sub	r27, r27
    1b42:	fd 01       	movw	r30, r26
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <__udivmodsi4_ep>

00001b46 <__udivmodsi4_loop>:
    1b46:	aa 1f       	adc	r26, r26
    1b48:	bb 1f       	adc	r27, r27
    1b4a:	ee 1f       	adc	r30, r30
    1b4c:	ff 1f       	adc	r31, r31
    1b4e:	a2 17       	cp	r26, r18
    1b50:	b3 07       	cpc	r27, r19
    1b52:	e4 07       	cpc	r30, r20
    1b54:	f5 07       	cpc	r31, r21
    1b56:	20 f0       	brcs	.+8      	; 0x1b60 <__udivmodsi4_ep>
    1b58:	a2 1b       	sub	r26, r18
    1b5a:	b3 0b       	sbc	r27, r19
    1b5c:	e4 0b       	sbc	r30, r20
    1b5e:	f5 0b       	sbc	r31, r21

00001b60 <__udivmodsi4_ep>:
    1b60:	66 1f       	adc	r22, r22
    1b62:	77 1f       	adc	r23, r23
    1b64:	88 1f       	adc	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	1a 94       	dec	r1
    1b6a:	69 f7       	brne	.-38     	; 0x1b46 <__udivmodsi4_loop>
    1b6c:	60 95       	com	r22
    1b6e:	70 95       	com	r23
    1b70:	80 95       	com	r24
    1b72:	90 95       	com	r25
    1b74:	9b 01       	movw	r18, r22
    1b76:	ac 01       	movw	r20, r24
    1b78:	bd 01       	movw	r22, r26
    1b7a:	cf 01       	movw	r24, r30
    1b7c:	08 95       	ret

00001b7e <_exit>:
    1b7e:	f8 94       	cli

00001b80 <__stop_program>:
    1b80:	ff cf       	rjmp	.-2      	; 0x1b80 <__stop_program>
